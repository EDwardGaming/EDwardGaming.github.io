<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Yolo5第一代识别模型训练过程</title>
      <link href="/2025/02/04/Yolo5%E7%AC%AC%E4%B8%80%E4%BB%A3%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/"/>
      <url>/2025/02/04/Yolo5%E7%AC%AC%E4%B8%80%E4%BB%A3%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Yolo5第一代识别模型训练过程"><a href="#Yolo5第一代识别模型训练过程" class="headerlink" title="Yolo5第一代识别模型训练过程"></a>Yolo5第一代识别模型训练过程</h1><p>参考文章</p><p><a href="https://blog.csdn.net/kyriehan/article/details/144022625">【数据集】【YOLO】【目标检测】</a></p><p><a href="https://zhuanlan.zhihu.com/p/13491328897">YOLO 详解：从 v1 到 v11 - 知乎</a></p><p><a href="https://github.com/ultralytics/yolov5">ultralytics&#x2F;yolov5: YOLOv5 🚀 in PyTorch 项目源码</a></p><p><a href="https://github.com/THU-MIG/yolov10">THU-MIG&#x2F;yolov10: YOLOv10: Real-Time End-to-End Object Detection NeurIPS 2024</a></p><h2 id="训练出一个YOLO模型的步骤"><a href="#训练出一个YOLO模型的步骤" class="headerlink" title="训练出一个YOLO模型的步骤"></a>训练出一个YOLO模型的步骤</h2><h3 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. <strong>数据准备</strong></h3><ul><li><p>图像数据收集：收集足够的冰雪路面图像，包括正常路面、轻微结冰、严重结冰等不同场景的样本。</p><ul><li>来源：行车记录仪、公开数据集、无人机图像等。</li><li>注意：确保数据覆盖多种天气、光照和路面条件。</li></ul></li><li><p><strong>标注数据</strong>：</p><ul><li><p>使用标注工具（如 LabelImg 或 Roboflow）为图像标注目标区域。</p></li><li><p>标签包括冰雪路面区域，危险等级可以通过标签的形式嵌入，例如：</p><ul><li><code>icy_low_risk</code></li><li><code>icy_medium_risk</code></li><li><code>icy_high_risk</code></li></ul></li><li><p>YOLO 模型需要的数据格式是每张图片对应一个 <code>.txt</code> 文件，内容如下：</p><ul><li><p>每行表示一个目标，格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class_id x_center y_center width height</span><br><span class="line">class_id x_center y_center width height</span><br><span class="line">class_id x_center y_center width height</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>坐标和尺寸的值需归一化为<strong>相对于图像</strong>宽高的比例（范围为 <code>[0, 1]</code>）。</p></li></ul></li></ul></li></ul><h4 id="解析-JSON-标注文件"><a href="#解析-JSON-标注文件" class="headerlink" title="解析 JSON 标注文件"></a>解析 JSON 标注文件</h4><p>编写脚本将 JSON 文件转换为 YOLO 格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路径</span></span><br><span class="line">image_dir = <span class="string">&quot;road_snow/PNG&quot;</span>  <span class="comment"># 原始图片目录</span></span><br><span class="line">label_output_dir = <span class="string">&quot;road_snow/labels&quot;</span></span><br><span class="line">image_output_dir = <span class="string">&quot;road_snow/images&quot;</span></span><br><span class="line">os.makedirs(label_output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(image_output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义类别</span></span><br><span class="line">classes = [<span class="string">&quot;snow&quot;</span>, <span class="string">&quot;ice&quot;</span>, <span class="string">&quot;dry&quot;</span>, <span class="string">&quot;background&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：解析 JSON 并转换为 YOLO 格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_yolo</span>(<span class="params">json_file, img_width, img_height</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    </span><br><span class="line">    yolo_labels = []</span><br><span class="line">    <span class="keyword">for</span> shape <span class="keyword">in</span> data[<span class="string">&#x27;shapes&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> shape[<span class="string">&#x27;shape_type&#x27;</span>] == <span class="string">&#x27;polygon&#x27;</span>:</span><br><span class="line">            label = shape[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> classes:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            class_id = classes.index(label)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算多边形的外接矩形</span></span><br><span class="line">            points = shape[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">            x_coords = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> points]</span><br><span class="line">            y_coords = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> points]</span><br><span class="line">            x_min, x_max = <span class="built_in">min</span>(x_coords), <span class="built_in">max</span>(x_coords)</span><br><span class="line">            y_min, y_max = <span class="built_in">min</span>(y_coords), <span class="built_in">max</span>(y_coords)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 转换为 YOLO 格式</span></span><br><span class="line">            x_center = (x_min + x_max) / <span class="number">2</span> / img_width</span><br><span class="line">            y_center = (y_min + y_max) / <span class="number">2</span> / img_height</span><br><span class="line">            width = (x_max - x_min) / img_width</span><br><span class="line">            height = (y_max - y_min) / img_height</span><br><span class="line">            yolo_labels.append(<span class="string">f&quot;<span class="subst">&#123;class_id&#125;</span> <span class="subst">&#123;x_center&#125;</span> <span class="subst">&#123;y_center&#125;</span> <span class="subst">&#123;width&#125;</span> <span class="subst">&#123;height&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> yolo_labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数：保存图片和标签</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_data</span>(<span class="params">img_file, labels</span>):</span><br><span class="line">    <span class="comment"># 创建输出路径</span></span><br><span class="line">    base_name = os.path.basename(img_file).replace(<span class="string">&quot;.PNG&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    img_output_path = os.path.join(image_output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>.PNG&quot;</span>)</span><br><span class="line">    label_output_path = os.path.join(label_output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>.txt&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存标签</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(label_output_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>.join(labels))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 复制图片</span></span><br><span class="line">    os.system(<span class="string">f&quot;cp <span class="subst">&#123;img_file&#125;</span> <span class="subst">&#123;img_output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历图片文件</span></span><br><span class="line">image_paths = []</span><br><span class="line"><span class="keyword">for</span> img_file <span class="keyword">in</span> os.listdir(image_dir):</span><br><span class="line">    <span class="keyword">if</span> img_file.endswith(<span class="string">&quot;.PNG&quot;</span>):</span><br><span class="line">        json_file = os.path.join(image_dir, img_file.replace(<span class="string">&quot;.PNG&quot;</span>, <span class="string">&quot;.json&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(json_file):</span><br><span class="line">            <span class="comment"># 假设图片分辨率为 1920x1080，可以根据实际情况调整</span></span><br><span class="line">            img_width, img_height = <span class="number">1920</span>, <span class="number">1080</span></span><br><span class="line">            labels = convert_to_yolo(json_file, img_width, img_height)</span><br><span class="line">            save_data(os.path.join(image_dir, img_file), labels)</span><br><span class="line">            image_paths.append(os.path.join(image_dir, img_file))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集划分</span></span><br><span class="line">train_imgs, val_imgs = train_test_split(image_paths, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"><span class="keyword">for</span> img_file <span class="keyword">in</span> train_imgs:</span><br><span class="line">    os.system(<span class="string">f&quot;mv <span class="subst">&#123;img_file&#125;</span> road_snow/images/train/&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> img_file <span class="keyword">in</span> val_imgs:</span><br><span class="line">    os.system(<span class="string">f&quot;mv <span class="subst">&#123;img_file&#125;</span> road_snow/images/val/&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="2-模型选择与准备"><a href="#2-模型选择与准备" class="headerlink" title="2. 模型选择与准备"></a>2. <strong>模型选择与准备</strong></h3><ul><li><p>选择 YOLO 版本：</p><ul><li><strong>YOLOv5&#x2F;YOLOv8</strong> 是常见的选择，易于使用且支持多种任务。</li></ul></li><li><p>下载预训练模型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision matplotlib</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ultralytics/yolov5</span><br><span class="line"><span class="built_in">cd</span> yolov5</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>使用 **<a href="https://www.cnblogs.com/niuben/p/18242947">COCO 数据集</a>**预训练的权重作为初始权重，加速训练。</p></li></ul><hr><h3 id="3-数据预处理"><a href="#3-数据预处理" class="headerlink" title="3. 数据预处理"></a>3. <strong>数据预处理</strong></h3><ul><li><p>配置目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">road_snow/</span><br><span class="line">├── images/</span><br><span class="line">│   ├── train/         # 训练集图片</span><br><span class="line">│   ├── val/           # 验证集图片</span><br><span class="line">│   ├── test/          # 测试集图片（可选）</span><br><span class="line">├── labels/</span><br><span class="line">│   ├── train/         # 训练集标注文件（YOLO格式）</span><br><span class="line">│   ├── val/           # 验证集标注文件（YOLO格式）</span><br><span class="line">│   ├── test/          # 测试集标注文件（YOLO格式）（可选）</span><br><span class="line">├── data.yaml          # YOLO 数据配置文件</span><br></pre></td></tr></table></figure><p>以下是一个 Python 脚本，用于在 <code>D:\Program Files\road_snow</code> 下生成 YOLO 格式的训练目录结构，并将对应的图片和标注文件移动到正确的子目录中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义源路径和目标路径</span></span><br><span class="line">base_dir = <span class="string">r&quot;D:\Program Files\road_snow&quot;</span></span><br><span class="line">image_dir = os.path.join(base_dir, <span class="string">&quot;road_snow&quot;</span>, <span class="string">&quot;images&quot;</span>)</span><br><span class="line">label_dir = os.path.join(base_dir, <span class="string">&quot;road_snow&quot;</span>, <span class="string">&quot;labels&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目标目录结构</span></span><br><span class="line">os.makedirs(os.path.join(base_dir, <span class="string">&quot;images&quot;</span>, <span class="string">&quot;train&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(base_dir, <span class="string">&quot;images&quot;</span>, <span class="string">&quot;val&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(base_dir, <span class="string">&quot;labels&quot;</span>, <span class="string">&quot;train&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(base_dir, <span class="string">&quot;labels&quot;</span>, <span class="string">&quot;val&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历验证集目录，将图片和标注文件移动到 val 文件夹</span></span><br><span class="line">val_image_dir = os.path.join(image_dir, <span class="string">&quot;val&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> os.listdir(val_image_dir):</span><br><span class="line">    <span class="keyword">if</span> image_file.endswith((<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span>)):</span><br><span class="line">        <span class="comment"># 获取图片和对应的标签文件</span></span><br><span class="line">        label_file = image_file.replace(<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.txt&quot;</span>).replace(<span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.txt&quot;</span>).replace(<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        src_image_path = os.path.join(val_image_dir, image_file)</span><br><span class="line">        src_label_path = os.path.join(label_dir, label_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 目标路径</span></span><br><span class="line">        dest_image_path = os.path.join(base_dir, <span class="string">&quot;images&quot;</span>, <span class="string">&quot;val&quot;</span>, image_file)</span><br><span class="line">        dest_label_path = os.path.join(base_dir, <span class="string">&quot;labels&quot;</span>, <span class="string">&quot;val&quot;</span>, label_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 移动图片和标注文件</span></span><br><span class="line">        shutil.move(src_image_path, dest_image_path)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(src_label_path):</span><br><span class="line">            shutil.move(src_label_path, dest_label_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其余图片和标注文件移动到 train 文件夹</span></span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> os.listdir(image_dir):</span><br><span class="line">    <span class="keyword">if</span> image_file.endswith((<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span>)):</span><br><span class="line">        <span class="comment"># 获取图片和对应的标签文件</span></span><br><span class="line">        label_file = image_file.replace(<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.txt&quot;</span>).replace(<span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.txt&quot;</span>).replace(<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        src_image_path = os.path.join(image_dir, image_file)</span><br><span class="line">        src_label_path = os.path.join(label_dir, label_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 目标路径</span></span><br><span class="line">        dest_image_path = os.path.join(base_dir, <span class="string">&quot;images&quot;</span>, <span class="string">&quot;train&quot;</span>, image_file)</span><br><span class="line">        dest_label_path = os.path.join(base_dir, <span class="string">&quot;labels&quot;</span>, <span class="string">&quot;train&quot;</span>, label_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 移动图片和标注文件</span></span><br><span class="line">        shutil.move(src_image_path, dest_image_path)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(src_label_path):</span><br><span class="line">            shutil.move(src_label_path, dest_label_path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练目录结构生成完毕！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>划分数据集：</p><ul><li>训练集、验证集和测试集比例建议为 7:2:1。</li></ul></li><li><p>图像增强：</p><ul><li>随机裁剪、翻转、亮度调整等操作可以提高模型的鲁棒性。</li></ul></li><li><p>危险等级定义：</p><ul><li>根据冰雪厚度、覆盖面积等，将图像划分为不同危险等级并对应到标签中。</li></ul></li></ul><hr><h3 id="4-模型训练"><a href="#4-模型训练" class="headerlink" title="4. 模型训练"></a>4. <strong>模型训练</strong></h3><ul><li><p><strong>配置文件</strong>：</p><ul><li><p>在 <code>data.yaml</code> 文件中配置类标签和数据集路径。</p></li><li><p>样例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据集路径配置</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">./road_snow</span>  <span class="comment"># 数据集的根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别数量</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">4</span>  <span class="comment"># 类别数（snow, ice, dry, background）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别名称</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;snow&#x27;</span>, <span class="string">&#x27;ice&#x27;</span>, <span class="string">&#x27;dry&#x27;</span>, <span class="string">&#x27;background&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练、验证和测试数据集路径</span></span><br><span class="line"><span class="attr">train:</span> <span class="string">images/train</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">images/val</span></span><br><span class="line"><span class="attr">test:</span> <span class="string">images/test</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>训练命令</strong>：</p><ul><li><p>在 YOLOv5 的目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --img 640 --batch 16 --epochs 50 --data ./road_snow/config/yolov5.yaml --weights yolov5s.pt</span><br></pre></td></tr></table></figure><ul><li><code>--img</code>：设置输入图片的尺寸。</li><li><code>--batch</code>：设置每个批次的图片数量。</li><li><code>--epochs</code>：训练轮次。</li><li><code>--weights</code>：使用预训练的 YOLO 权重。</li><li><code>--cache</code>：加快数据加载。</li><li><code>--data</code>：数据集配置文件路径。</li><li><code>--weights</code>: 预训练权重文件（也可用 <code>yolov5m.pt</code>, <code>yolov5l.pt</code>）。</li></ul></li><li><p>训练完成后，模型会生成一个权重文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runs/train/exp/weights/best.pt</span><br></pre></td></tr></table></figure></li><li><p>优化训练方法</p><ul><li>增加更多标注图片，提升数据多样性。</li><li>调整超参数（如学习率、数据增强策略）。</li><li>如果冰雪目标较小，使用更高分辨率（如 <code>--img 1024</code>）。</li></ul></li></ul></li><li><p><strong>监控训练过程</strong>：</p><ul><li>使用 TensorBoard 或 Weights &amp; Biases 监控模型的损失和性能。</li></ul></li></ul><hr><h3 id="5-模型评估与优化"><a href="#5-模型评估与优化" class="headerlink" title="5. 模型评估与优化"></a>5. <strong>模型评估与优化</strong></h3><ul><li><p>测试模型：</p><ul><li>你可以使用该文件进行推理，测试单张图片或整个测试集：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-python detect.py --weights runs/train/exp/weights/best.pt --img 640 --<span class="built_in">source</span> road_snow/images/test</span><br></pre></td></tr></table></figure><ul><li><p>评估指标包括 mAP（均值平均精度）、召回率和精确率。</p><ul><li><p>你可以使用 TensorBoard 查看训练过程中的损失、准确率等指标：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=runs/train</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查危险等级的分类准确性。</p></li></ul></li><li><p>优化模型：</p><ul><li>调整学习率、批量大小等超参数。</li><li>增加数据集样本或使用更多增强策略。</li></ul></li></ul><hr><h3 id="6-危险等级输出"><a href="#6-危险等级输出" class="headerlink" title="6. 危险等级输出"></a>6. <strong>危险等级输出</strong></h3><ul><li><p>输出逻辑：</p><ul><li>在推理时，结合 YOLO 检测到的目标框置信度、面积占比等信息，进一步判断危险等级。</li></ul></li><li><p>样例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> yolov5 <span class="keyword">import</span> detect</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, <span class="string">&#x27;custom&#x27;</span>, path=<span class="string">&#x27;best.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推理</span></span><br><span class="line">results = model(<span class="string">&#x27;test_image.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析结果</span></span><br><span class="line"><span class="keyword">for</span> pred <span class="keyword">in</span> results.xyxy[<span class="number">0</span>]:  <span class="comment"># 每个预测框</span></span><br><span class="line">    x1, y1, x2, y2, conf, cls = pred</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;位置: <span class="subst">&#123;x1&#125;</span>-<span class="subst">&#123;x2&#125;</span>, 置信度: <span class="subst">&#123;conf&#125;</span>, 类别: <span class="subst">&#123;results.names[<span class="built_in">int</span>(cls)]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="7-部署与应用"><a href="#7-部署与应用" class="headerlink" title="7. 部署与应用"></a>7. <strong>部署与应用</strong></h3><ul><li>部署环境：<ul><li>PC、树莓派或嵌入式设备。</li><li>使用 ONNX、TensorRT 等优化模型推理速度。</li></ul></li><li>实时应用：<ul><li>集成到车载摄像头系统，实时分析路面危险等级并提醒司机。</li><li>部署到无人机进行路面冰雪状况探测并发布到地图app上。</li></ul></li></ul><h2 id="前端展示代码"><a href="#前端展示代码" class="headerlink" title="前端展示代码"></a>前端展示代码</h2><h3 id="在前端展示结果"><a href="#在前端展示结果" class="headerlink" title="在前端展示结果"></a><strong>在前端展示结果</strong></h3><p>你可以将 YOLOv5 推理功能集成到一个简单的前端网页应用中。以下是展示的两种思路：</p><p> <strong>a. 使用 Flask 构建 Web 服务</strong></p><p>YOLOv5 提供了 RESTful API 示例代码，可以通过 Flask 快速部署。以下是示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, <span class="string">&#x27;custom&#x27;</span>, path=<span class="string">&#x27;runs/train/exp/weights/best.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/predict&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;image&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No image uploaded&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    file = request.files[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    img_path = Path(<span class="string">&quot;uploads&quot;</span>) / file.filename</span><br><span class="line">    img_path.parent.mkdir(exist_ok=<span class="literal">True</span>, parents=<span class="literal">True</span>)</span><br><span class="line">    file.save(img_path)</span><br><span class="line">    </span><br><span class="line">    results = model(img_path)</span><br><span class="line">    results.save(save_dir=<span class="string">&quot;static/results/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Prediction completed&#x27;</span>, <span class="string">&#x27;result_path&#x27;</span>: <span class="string">f&quot;static/results/<span class="subst">&#123;file.filename&#125;</span>&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>运行上述代码后，可以通过上传图片到 <code>http://127.0.0.1:5000/predict</code> 获取检测结果。</p><hr><p><strong>b. 使用 Streamlit 快速构建 UI</strong></p><p>Streamlit 是一个轻量级的 Python 前端框架，用于快速展示模型效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load YOLOv5 model</span></span><br><span class="line">model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, <span class="string">&#x27;custom&#x27;</span>, path=<span class="string">&#x27;runs/train/exp/weights/best.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">st.title(<span class="string">&quot;YOLOv5 Object Detection&quot;</span>)</span><br><span class="line">uploaded_file = st.file_uploader(<span class="string">&quot;Choose an image...&quot;</span>, <span class="built_in">type</span>=[<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;png&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> uploaded_file:</span><br><span class="line">    image = Image.<span class="built_in">open</span>(uploaded_file)</span><br><span class="line">    st.image(image, caption=<span class="string">&#x27;Uploaded Image&#x27;</span>, use_column_width=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> st.spinner(<span class="string">&#x27;Processing...&#x27;</span>):</span><br><span class="line">        results = model(image)</span><br><span class="line">        results.save(save_dir=<span class="string">&quot;temp/&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    st.image(<span class="string">f&quot;temp/<span class="subst">&#123;uploaded_file.name&#125;</span>&quot;</span>, caption=<span class="string">&#x27;Detection Result&#x27;</span>, use_column_width=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">streamlit run app.py</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <code>http://localhost:8501</code>，即可上传图片并查看检测结果。</p><hr><p> <strong>验证模型效果</strong></p><p>可以通过 YOLOv5 提供的 <code>val.py</code> 脚本对验证集运行模型，查看性能指标（如 mAP、Precision、Recall 等）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python val.py --weights runs/train/exp/weights/best.pt --data path_to_your_yaml --img 640</span><br></pre></td></tr></table></figure><hr><p> <strong>在线部署</strong></p><p>如果需要更复杂的前端展示，可以考虑使用：</p><ul><li><strong>前端框架</strong>：React.js &#x2F; Vue.js + YOLO 推理服务 API</li><li><strong>部署工具</strong>：Docker 容器化部署，或使用云服务（如 AWS、Azure、Google Cloud）</li></ul><p>你可以根据项目需求选择适合的展示方式，简单推理推荐命令行或 Streamlit，复杂展示推荐 Flask 或前端框架。</p><h2 id="实现一个前端可以运行的应用"><a href="#实现一个前端可以运行的应用" class="headerlink" title="实现一个前端可以运行的应用"></a>实现一个前端可以运行的应用</h2><p>用于选择图片或视频并进行 YOLOv5 的预测</p><hr><h3 id="1-技术选型"><a href="#1-技术选型" class="headerlink" title="1. 技术选型"></a><strong>1. 技术选型</strong></h3><ul><li><strong>前端</strong>：使用 HTML 和 JavaScript 进行文件选择和结果展示。</li><li><strong>后端</strong>：用 Flask 提供 API 接口，调用 <code>detect.py</code> 完成预测任务。</li><li>依赖环境：<ul><li>Python 3</li><li>Flask</li><li>已经训练好的 YOLOv5 模型</li></ul></li></ul><hr><h3 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a><strong>2. 目录结构</strong></h3><p>在 YOLOv5 项目目录下创建以下结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yolov5/</span><br><span class="line">├── detect.py</span><br><span class="line">├── runs/</span><br><span class="line">├── static/</span><br><span class="line">│   ├── results/          # 用于存储预测结果</span><br><span class="line">│   └── css/</span><br><span class="line">│       └── styles.css    # 前端样式文件</span><br><span class="line">├── templates/</span><br><span class="line">│   └── index.html        # 前端页面</span><br><span class="line">└── app.py                # Flask 后端</span><br></pre></td></tr></table></figure><hr><h3 id="3-后端代码-app-py"><a href="#3-后端代码-app-py" class="headerlink" title="3. 后端代码 (app.py)"></a><strong>3. 后端代码 (app.py)</strong></h3><p>后端基于 Flask 提供 API 接口，通过调用 <code>detect.py</code> 实现预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_from_directory, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;static/uploads/&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>] = <span class="string">&#x27;static/results/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保文件夹存在</span></span><br><span class="line">os.makedirs(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>], exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No file uploaded&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No selected file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存上传文件</span></span><br><span class="line">    input_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">    file.save(input_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># YOLOv5 预测</span></span><br><span class="line">    output_path = os.path.join(app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">    command = [</span><br><span class="line">        <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;detect.py&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--weights&#x27;</span>, <span class="string">&#x27;runs/train/exp/weights/best.pt&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--img&#x27;</span>, <span class="string">&#x27;640&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--source&#x27;</span>, input_path,</span><br><span class="line">        <span class="string">&#x27;--save-txt&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--project&#x27;</span>, app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;--name&#x27;</span>, os.path.splitext(file.filename)[<span class="number">0</span>]</span><br><span class="line">    ]</span><br><span class="line">    subprocess.run(command, check=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;result&#x27;</span>: <span class="string">f&#x27;/static/results/<span class="subst">&#123;os.path.splitext(file.filename)[<span class="number">0</span>]&#125;</span>/<span class="subst">&#123;file.filename&#125;</span>&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static/&lt;path:path&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serve_static</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">&#x27;static&#x27;</span>, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="4-前端代码-templates-index-html"><a href="#4-前端代码-templates-index-html" class="headerlink" title="4. 前端代码 (templates&#x2F;index.html)"></a><strong>4. 前端代码 (templates&#x2F;index.html)</strong></h3><p>前端用于文件选择和结果展示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/styles.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>YOLOv5 Detection<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>YOLOv5 Object Detection<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;upload-form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*,video/*&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload and Predict<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Prediction Result:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;result-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Result will be displayed here&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;result-video&quot;</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%; display: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;upload-form&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> resultImage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result-image&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> resultVideo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result-video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="title function_">async</span> (e) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!file) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;Please select a file.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/upload&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">body</span>: formData,</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (result.<span class="property">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(result.<span class="property">error</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> resultPath = result.<span class="property">result</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;image/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">src</span> = resultPath;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;video/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">src</span> = resultPath;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;Prediction failed.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-样式文件-static-css-styles-css"><a href="#5-样式文件-static-css-styles-css" class="headerlink" title="5. 样式文件 (static&#x2F;css&#x2F;styles.css)"></a><strong>5. 样式文件 (static&#x2F;css&#x2F;styles.css)</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0056b3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#result</span> <span class="selector-tag">img</span>, <span class="selector-id">#result</span> <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-启动服务"><a href="#6-启动服务" class="headerlink" title="6. 启动服务"></a><strong>6. 启动服务</strong></h3><p>运行 Flask 应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <code>http://127.0.0.1:5000</code>，即可上传图片或视频并查看预测结果。</p><hr><h3 id="7-效果"><a href="#7-效果" class="headerlink" title="7. 效果"></a><strong>7. 效果</strong></h3><ul><li>图片或视频会被上传到后端，调用 <code>detect.py</code> 生成预测结果。</li><li>前端展示预测完成的图片或视频。</li></ul><p>你可以根据需求进一步优化样式或扩展功能。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Yolo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
