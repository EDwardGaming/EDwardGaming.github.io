<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python3 内置函数</title>
      <link href="/2025/06/02/Python3%20%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/2025/06/02/Python3%20%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="📌-Python-内置函数详解"><a href="#📌-Python-内置函数详解" class="headerlink" title="📌 Python 内置函数详解"></a>📌 Python 内置函数详解</h1><hr><h2 id="🔍-eval-函数"><a href="#🔍-eval-函数" class="headerlink" title="🔍 eval() 函数"></a>🔍 <code>eval()</code> 函数</h2><h3 id="✅-功能简介"><a href="#✅-功能简介" class="headerlink" title="✅ 功能简介"></a>✅ 功能简介</h3><p><code>eval()</code> 用于 <strong>执行一个字符串形式的 Python 表达式</strong>，并返回表达式的结果。</p><h3 id="🧪-函数语法"><a href="#🧪-函数语法" class="headerlink" title="🧪 函数语法"></a>🧪 函数语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(expression[, <span class="built_in">globals</span>[, <span class="built_in">locals</span>]])</span><br></pre></td></tr></table></figure><h3 id="📥-参数说明"><a href="#📥-参数说明" class="headerlink" title="📥 参数说明"></a>📥 参数说明</h3><ul><li><strong>expression</strong>：字符串表达式（必需）。</li><li><strong>globals</strong>：可选，指定全局命名空间（类型为 <code>dict</code>）。</li><li><strong>locals</strong>：可选，指定局部命名空间（任意映射类型）。</li></ul><blockquote><p>⚠️ <code>eval()</code> 能执行任意代码，使用时要防止代码注入等安全风险！</p></blockquote><h3 id="🎯-使用示例"><a href="#🎯-使用示例" class="headerlink" title="🎯 使用示例"></a>🎯 使用示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单数学运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;2 + 3 * 4&quot;</span>))  <span class="comment"># 输出: 14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;x + 5&quot;</span>))      <span class="comment"># 输出: 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定命名空间</span></span><br><span class="line">env = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;a + b&quot;</span>, env)) <span class="comment"># 输出: 5</span></span><br></pre></td></tr></table></figure><hr><h2 id="🖨️-print-函数"><a href="#🖨️-print-函数" class="headerlink" title="🖨️ print() 函数"></a>🖨️ <code>print()</code> 函数</h2><h3 id="✅-函数语法"><a href="#✅-函数语法" class="headerlink" title="✅ 函数语法"></a>✅ 函数语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(*objects, sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="📥-参数说明-1"><a href="#📥-参数说明-1" class="headerlink" title="📥 参数说明"></a>📥 参数说明</h3><ul><li><strong>objects</strong>：一个或多个要打印的对象。</li><li><strong>sep</strong>：对象之间的分隔符，默认空格。</li><li><strong>end</strong>：输出的结尾，默认换行符 <code>\n</code>。</li><li><strong>file</strong>：输出目标，默认是标准输出 <code>sys.stdout</code>。</li><li><strong>flush</strong>：是否强制刷新输出缓冲区，默认 <code>False</code>。</li></ul><h3 id="🎯-使用示例：动态打印效果"><a href="#🎯-使用示例：动态打印效果" class="headerlink" title="🎯 使用示例：动态打印效果"></a>🎯 使用示例：动态打印效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---RUNOOB EXAMPLE ： Loading 效果---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loading&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>输出效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---RUNOOB EXAMPLE ： Loading 效果---</span><br><span class="line">Loading....................</span><br></pre></td></tr></table></figure><hr><h2 id="🔢-sum-函数实际案例：查找相反数对"><a href="#🔢-sum-函数实际案例：查找相反数对" class="headerlink" title="🔢 sum() 函数实际案例：查找相反数对"></a>🔢 <code>sum()</code> 函数实际案例：查找相反数对</h2><h3 id="📘-题目说明"><a href="#📘-题目说明" class="headerlink" title="📘 题目说明"></a>📘 题目说明</h3><p>输入：</p><ul><li>第一行：数字个数 <code>n</code></li><li>第二行：<code>n</code> 个整数，可能有重复</li></ul><p>输出：</p><ul><li>数组中成对和为 0 的不同数对个数（每对只算一次）</li></ul><h3 id="🎯-示例输入输出"><a href="#🎯-示例输入输出" class="headerlink" title="🎯 示例输入输出"></a>🎯 示例输入输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">-1 2 3 -2 1</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="✅-解法一：遍历判断"><a href="#✅-解法一：遍历判断" class="headerlink" title="✅ 解法一：遍历判断"></a>✅ 解法一：遍历判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums = <span class="built_in">set</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="comment"># 遍历所有数对，统计和为 0 的组合数量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> nums <span class="keyword">for</span> j <span class="keyword">in</span> nums <span class="keyword">if</span> i + j == <span class="number">0</span>) // <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="✅-解法二：用绝对值优化（巧解）"><a href="#✅-解法二：用绝对值优化（巧解）" class="headerlink" title="✅ 解法二：用绝对值优化（巧解）"></a>✅ 解法二：用绝对值优化（巧解）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums = <span class="built_in">set</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="comment"># 成对出现时，正负数只保留一个，差值即为成对数量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(nums) - <span class="built_in">len</span>(<span class="built_in">set</span>(<span class="built_in">map</span>(<span class="built_in">abs</span>, nums))))</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 内存机制</title>
      <link href="/2025/06/02/Python3%20%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2025/06/02/Python3%20%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-内存机制"><a href="#Python3-内存机制" class="headerlink" title="Python3 内存机制"></a>Python3 内存机制</h1><p><strong>本文中交替出现 Python 的编译模式和交互模式代码块，为便于区分，带有 <code>&gt;&gt;&gt;</code> 的 Python 代码块为交互模式，其余 Python 代码块为编译模式。</strong></p><h2 id="可变对象与不可变对象"><a href="#可变对象与不可变对象" class="headerlink" title="可变对象与不可变对象"></a><strong>可变对象与不可变对象</strong></h2><table><thead><tr><th align="center"><strong>可变对象</strong></th><th align="center"><strong>不可变对象</strong></th></tr></thead><tbody><tr><td align="center"><strong>列表、字典、集合</strong></td><td align="center"><strong>整型、浮点型、布尔型、字符串、元组</strong></td></tr></tbody></table><p><strong>简单来说，可变对象就是指在修改数据时，直接修改原来的数据对象；不可变对象则是创建一个新的对象，并且将变量的引用(相当于C++中的指针)转移到新创建的对象上。</strong></p><h3 id="不可变对象实例"><a href="#不可变对象实例" class="headerlink" title="不可变对象实例"></a><strong>不可变对象实例</strong></h3><ul><li><strong>int</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140725289698248</span></span><br><span class="line">&gt;&gt;&gt;a = <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140725289698280</span></span><br></pre></td></tr></table></figure><ul><li><strong>string</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;string = <span class="string">&quot;ykx!!!&quot;</span></span><br><span class="line">&gt;&gt;&gt;new_string = string</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(string)</span><br><span class="line"><span class="number">2053870338288</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(new_string)</span><br><span class="line"><span class="number">2053870338288</span></span><br><span class="line">&gt;&gt;&gt;new_string = string.replace(<span class="string">&quot;!&quot;</span>,<span class="string">&quot;?&quot;</span>)</span><br><span class="line">&gt;&gt;&gt;new_string</span><br><span class="line"><span class="string">&#x27;ykx???&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(new_string)</span><br><span class="line"><span class="number">2053827268784</span></span><br></pre></td></tr></table></figure><h3 id="可变对象实例"><a href="#可变对象实例" class="headerlink" title="可变对象实例"></a><strong>可变对象实例</strong></h3><ul><li><strong>dict</strong></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;tinydic = &#123;<span class="string">&quot;ykx&quot;</span>:<span class="string">&quot;大帅哥&quot;</span>,<span class="string">&quot;hhy&quot;</span>:<span class="string">&quot;憨憨&quot;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;new_tinydic = &#123;<span class="string">&quot;Mercedes&quot;</span>:<span class="string">&quot;cool&quot;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(tinydic)</span><br><span class="line"><span class="number">2053870017280</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(new_tinydic)</span><br><span class="line"><span class="number">2053870017728</span></span><br><span class="line">&gt;&gt;&gt;tinydic.update(new_tinydic)</span><br><span class="line">&gt;&gt;&gt;tinydic</span><br><span class="line">&#123;<span class="string">&#x27;ykx&#x27;</span>: <span class="string">&#x27;大帅哥&#x27;</span>, <span class="string">&#x27;hhy&#x27;</span>: <span class="string">&#x27;憨憨&#x27;</span>, <span class="string">&#x27;Mercedes&#x27;</span>: <span class="string">&#x27;cool&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(tinydic)</span><br><span class="line"><span class="number">2053870017280</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(new_tinydic)</span><br><span class="line"><span class="number">2053870017728</span></span><br><span class="line">&gt;&gt;&gt;new_tinydic[<span class="string">&quot;Mercedes&quot;</span>] = <span class="string">&quot;considerable&quot;</span></span><br><span class="line"><span class="built_in">id</span>(new_tinydic)</span><br><span class="line"><span class="number">2053870017728</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a><strong>深拷贝与浅拷贝</strong></h2><blockquote><p> <strong>在Python中，拷贝对象时有两种方式：浅拷贝（shallow copy）和深拷贝（deep copy）。理解它们之间的区别对处理复杂的数据结构非常重要。</strong></p></blockquote><h3 id="浅拷贝（Shallow-Copy）"><a href="#浅拷贝（Shallow-Copy）" class="headerlink" title="浅拷贝（Shallow Copy）"></a><strong>浅拷贝（Shallow Copy）</strong></h3><p><strong>拷贝对象的引用。当原对象的数据改变时，拷贝的对象也会发生改变。</strong></p><blockquote><p><strong>浅拷贝创建一个新的对象，但不会递归地复制对象中包含的所有子对象。对于包含的子对象，浅拷贝只会复制它们的引用。</strong></p><p><strong>可以使用 <code>copy</code> 模块中的 <code>copy()</code> 函数或对象的 <code>copy()</code> 方法来进行浅拷贝。</strong></p></blockquote><h3 id="深拷贝（Deep-Copy）"><a href="#深拷贝（Deep-Copy）" class="headerlink" title="深拷贝（Deep Copy）"></a><strong>深拷贝（Deep Copy）</strong></h3><p><strong>创建一个新的对象并将原数据存入新的对象。原对象数据改变不影响拷贝对象</strong></p><blockquote><p><strong>深拷贝创建一个新的对象，并递归地复制所有包含的对象，形成一个独立的副本。深拷贝后的对象与原对象完全独立，修改其中一个不会影响另一个。</strong></p><p><strong>可以使用 <code>copy</code> 模块中的 <code>deepcopy()</code> 函数来进行深拷贝。</strong></p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">original_list = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">shallow_copied_list = copy.copy(original_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(original_list)          <span class="comment"># 输出: [1, 2, [3, 4]]</span></span><br><span class="line"><span class="built_in">print</span>(shallow_copied_list)    <span class="comment"># 输出: [1, 2, [3, 4]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改原列表中的子列表</span></span><br><span class="line">original_list[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(original_list)          <span class="comment"># 输出: [1, 2, [99, 4]]</span></span><br><span class="line"><span class="built_in">print</span>(shallow_copied_list)    <span class="comment"># 输出: [1, 2, [99, 4]]</span></span><br></pre></td></tr></table></figure><p><strong>在这个例子中，修改 <code>original_list</code> 中的子列表也影响了 <code>shallow_copied_list</code>，因为它们共享同一个子列表的引用。</strong></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">original_list = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">deep_copied_list = copy.deepcopy(original_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(original_list)          <span class="comment"># 输出: [1, 2, [3, 4]]</span></span><br><span class="line"><span class="built_in">print</span>(deep_copied_list)       <span class="comment"># 输出: [1, 2, [3, 4]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改原列表中的子列表</span></span><br><span class="line">original_list[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(original_list)          <span class="comment"># 输出: [1, 2, [99, 4]]</span></span><br><span class="line"><span class="built_in">print</span>(deep_copied_list)       <span class="comment"># 输出: [1, 2, [3, 4]]</span></span><br></pre></td></tr></table></figure><p><strong>在这个例子中，修改 <code>original_list</code> 中的子列表不会影响 <code>deep_copied_list</code>，因为深拷贝创建了一个完全独立的副本。</strong></p><p><strong>值得注意的是，python3中列表默认的的.copy()方法是浅拷贝，但是remove()方法会改变深浅。</strong></p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_list = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shallow_copied_list = original_list.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_list[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">99</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shallow_copied_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">99</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p><strong>在这个例子中，修改 <code>original_list</code> 中的子列表也影响了 <code>shallow_copied_list</code>，因为它们共享同一个子列表的引用。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&quot;safdf&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;safdf&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">&#x27;safdf&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> b = a.copy()</span><br></pre></td></tr></table></figure><p><strong>在这个例子中，使用remove()方法后会再次开辟一块内存深拷贝a，a和b就不属于同一引用了。</strong></p><h3 id="使用-copy-模块进行浅拷贝和深拷贝"><a href="#使用-copy-模块进行浅拷贝和深拷贝" class="headerlink" title="使用 copy 模块进行浅拷贝和深拷贝"></a><strong>使用 <code>copy</code> 模块进行浅拷贝和深拷贝</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝</span></span><br><span class="line">shallow_copy = copy.copy(original_object)</span><br><span class="line">shallow_copied_list = original_list.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line">deep_copy = copy.deepcopy(original_object)</span><br></pre></td></tr></table></figure><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h4><ul><li><strong>浅拷贝适用于对象层次结构较浅且只需要复制最外层的情况。</strong></li><li><strong>深拷贝适用于对象层次结构较深且需要完整独立副本的情况。</strong></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><ol><li><strong>浅拷贝在处理不可变对象（如整数、字符串、元组）时，行为与深拷贝相同，因为这些对象本质上不会被修改。</strong></li><li><strong>深拷贝可能会比较耗时和耗内存，特别是对于大型复杂对象。</strong></li></ol><p><strong>理解浅拷贝和深拷贝的区别，以及如何在Python中正确使用它们，对于编写健壮的代码非常重要。</strong></p><h3 id="字典中的深浅拷贝问题"><a href="#字典中的深浅拷贝问题" class="headerlink" title="字典中的深浅拷贝问题"></a><a href="https://www.runoob.com/w3cnote/python-understanding-dict-copy-shallow-or-deep.html#:~:text=%E6%B5%85%E6%8B%B7%E8%B4%9D(copy)%EF%BC%9A">字典中的深浅拷贝问题</a></h3><p><strong>浅拷贝</strong>：只拷贝对象的引用</p><p>**深拷贝：**再开辟一块内存，新建立一条引用储存拷贝对象</p><h4 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h4><p><code>copy</code></p><ul><li><p><code>copy.copy()</code> 或 直接赋值：浅拷贝</p></li><li><p><code>copy.deepcopy()</code>深拷贝完全拷贝了父对象及其子对象。</p></li></ul><h4 id="深浅拷贝举例"><a href="#深浅拷贝举例" class="headerlink" title="深浅拷贝举例"></a>深浅拷贝举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">dic_mother = &#123;<span class="string">&quot;母体&quot;</span>:<span class="string">&quot;111&quot;</span>&#125;</span><br><span class="line">dic_son = &#123;<span class="string">&quot;1&quot;</span>:<span class="string">&quot;111&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">dic_mother[<span class="string">&quot;子体&quot;</span>] = dic_son</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;刚刚初始化的母体字典<span class="subst">&#123;dic_son&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;刚刚初始化的母体字典<span class="subst">&#123;dic_mother&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">dic_mother_shallowcopy =  dic_mother <span class="comment">#直接赋值，属于浅拷贝</span></span><br><span class="line">dic_mother_shallowcopy[<span class="string">&quot;子体&quot;</span>][<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;222&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;浅拷贝并修改后的的母体字典<span class="subst">&#123;dic_mother_shallowcopy&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;子体字典<span class="subst">&#123;dic_son&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">dic_mother_deepcopy = copy.deepcopy(dic_mother)</span><br><span class="line">dic_mother_deepcopy[<span class="string">&quot;子体&quot;</span>][<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;333&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;浅拷贝并修改后的的母体字典<span class="subst">&#123;dic_mother_deepcopy&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;子体字典<span class="subst">&#123;dic_son&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">刚刚初始化的母体字典&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;111&#x27;</span>&#125;</span><br><span class="line">刚刚初始化的母体字典&#123;<span class="string">&#x27;母体&#x27;</span>: <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;子体&#x27;</span>: &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;111&#x27;</span>&#125;&#125;</span><br><span class="line">浅拷贝并修改后的的母体字典&#123;<span class="string">&#x27;母体&#x27;</span>: <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;子体&#x27;</span>: &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;222&#x27;</span>&#125;&#125;</span><br><span class="line">子体字典&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;222&#x27;</span>&#125;</span><br><span class="line">浅拷贝并修改后的的母体字典&#123;<span class="string">&#x27;母体&#x27;</span>: <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;子体&#x27;</span>: &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;333&#x27;</span>&#125;&#125;</span><br><span class="line">子体字典&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;222&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看出<strong>深浅拷贝</strong><code>copy.copy()</code>：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，子对象是引用</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 函数式编程</title>
      <link href="/2025/06/02/Python3%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2025/06/02/Python3%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-函数式编程-教学笔记"><a href="#Python-函数式编程-教学笔记" class="headerlink" title="Python 函数式编程 教学笔记"></a>Python 函数式编程 教学笔记</h1><blockquote><p><strong>函数式编程：</strong> 在 Python 中，函数式编程强调<strong>使用函数和表达式</strong>来进行数据处理，避免显式的循环和临时变量。常用的函数式编程工具包括高阶函数（如 <a href="https://www.runoob.com/python3/python3-func-map.html"><code>map()</code></a>、<a href="https://www.runoob.com/python3/python3-func-filter.html"><code>filter()</code></a>）和**<a href="https://www.runoob.com/python3/python-comprehensions.html">推导式</a>**（列表、集合、字典推导式）等。它们可以让代码更简洁明了，提高可读性和开发效率。</p></blockquote><h2 id="lambda-表达式-匿名函数"><a href="#lambda-表达式-匿名函数" class="headerlink" title="lambda 表达式(匿名函数)"></a><a href="https://www.runoob.com/python3/python-lambda.html">lambda 表达式(匿名函数)</a></h2><p><code>lambda</code> 表达式用于创建<strong>匿名函数</strong>，其语法为 <code>lambda 参数: 表达式</code>，会返回一个函数对象。它通常用于临时定义简单的函数。示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统函数定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">5</span>))       <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 lambda 表达式</span></span><br><span class="line">f = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>, <span class="number">5</span>))         <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即调用 lambda（不赋名）</span></span><br><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> x, y: x * y)(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>lambda</code> 表达式只能包含一个表达式，不能写赋值语句或多行逻辑。如果函数逻辑较复杂，仍然建议使用 <code>def</code> 定义函数。</li></ul><h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a><a href="https://www.runoob.com/python3/python3-func-map.html">map() 函数</a></h2><p><code>map(function, iterable)</code> 接收<strong>一个函数</strong>(可接受匿名函数)和一个可迭代对象，将函数依次作用到每个元素上，<strong>返回一个迭代器</strong>。</p><p>例如，计算列表中每个数的平方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 map 对每个元素求平方</span></span><br><span class="line">result = <span class="built_in">map</span>(square, nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>注意：在 Python 3 中，<code>map()</code> 返回的是一个迭代器，需要用 <code>list()</code> 、<code>tuple()</code> 转换为列表才能查看所有结果。我们也可以使用 <code>lambda</code> 表达式简化函数定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lambda 常与 map()、filter() 等函数一起使用。</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 使用 lambda 和 map</span></span><br><span class="line">squares = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, nums))</span><br><span class="line"><span class="built_in">print</span>(squares)  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> , nums]</span><br><span class="line">doubles = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * <span class="number">2</span>, nums1))</span><br><span class="line"><span class="built_in">print</span>(doubles)  <span class="comment"># [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25]</span><br><span class="line">[2, 4, 6, 8, [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]]</span><br></pre></td></tr></table></figure><p>如果有多个可迭代对象传入，<code>map()</code> 会并行取各可迭代对象的元素作为参数传给函数，直到最短的可迭代对象耗尽。</p><p><strong>示例 1：基础并行计算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算三个列表中对应位置元素的和</span></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">nums3 = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y, z: x + y + z, nums1, nums2, nums3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># 输出: [111, 222, 333]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：不等长序列处理</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动以最短的序列(numbers)为准</span></span><br><span class="line">combined = <span class="built_in">map</span>(<span class="keyword">lambda</span> l, n: <span class="string">f&quot;<span class="subst">&#123;l&#125;</span><span class="subst">&#123;n&#125;</span>&quot;</span>, letters, numbers)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(combined))  <span class="comment"># 输出: [&#x27;a1&#x27;, &#x27;b2&#x27;] (c被忽略)</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：类型混合操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>]</span><br><span class="line">ages = [<span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line">templates = [<span class="string">&quot;&#123;&#125; is &#123;&#125; years old&quot;</span>, <span class="string">&quot;Name: &#123;&#125;, Age: &#123;&#125;&quot;</span>]</span><br><span class="line"></span><br><span class="line">formatted = <span class="built_in">map</span>(<span class="keyword">lambda</span> n, a, t: t.<span class="built_in">format</span>(n, a), names, ages, templates)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(formatted))</span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="comment"># [&#x27;Alice is 25 years old&#x27;, &#x27;Name: Bob, Age: 30&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>示例 4：模拟内置函数 <code>zip()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用 map 实现类似 zip 的功能</span></span><br><span class="line">keys = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">values = [<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">dict_pairs = <span class="built_in">map</span>(<span class="keyword">lambda</span> k, v: (k, v), keys, values)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(dict_pairs))  <span class="comment"># 输出: &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25&#125;</span></span><br></pre></td></tr></table></figure><h2 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter() 函数"></a><a href="https://www.runoob.com/python3/python3-func-filter.html">filter() 函数</a></h2><p><code>filter(function, iterable)</code> </p><ul><li>用于过滤序列。</li><li>它也接收一个函数和一个可迭代对象，将函数作用到每个元素，保留返回值为 <code>True</code> 的元素.</li><li>返回一个迭代器。</li></ul><p>例如，从列表中过滤出偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 filter 和 lambda 筛选偶数</span></span><br><span class="line">evens = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(evens))  <span class="comment"># [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>同样地，在 Python 3 中，<code>filter()</code> 返回迭代器，需要 <code>list()</code> 转换为列表。若 <code>function</code> 为 <code>None</code>，<code>filter()</code> 则会去掉序列中所有值为假（如 <code>None</code>, <code>0</code>, <code>&#39;&#39;</code> 等）的元素。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;&quot;</span>]</span><br><span class="line"><span class="comment"># 去除空字符串和 None</span></span><br><span class="line">cleaned = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>, data))</span><br><span class="line"><span class="built_in">print</span>(cleaned)  <span class="comment"># [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="三元表达式-Ternary-Operator"><a href="#三元表达式-Ternary-Operator" class="headerlink" title="三元表达式(Ternary Operator)"></a>三元表达式(Ternary Operator)</h2><p>Python 的三元表达式（也称为<strong>条件表达式</strong>）提供了一种简洁的方式来根据条件选择两个值中的一个。它的基本语法如下：</p><hr><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value_if_true <span class="keyword">if</span> condition <span class="keyword">else</span> value_if_false</span><br></pre></td></tr></table></figure><ul><li><strong>执行逻辑</strong>：<ul><li>如果 <code>condition</code> 为 <code>True</code>，返回 <code>value_if_true</code>。</li><li>如果 <code>condition</code> 为 <code>False</code>，返回 <code>value_if_false</code>。</li></ul></li></ul><hr><h4 id="示例-1：基本用法"><a href="#示例-1：基本用法" class="headerlink" title="示例 1：基本用法"></a><strong>示例 1：基本用法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用三元表达式选择较大的值</span></span><br><span class="line">max_value = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="built_in">print</span>(max_value)  <span class="comment"># 输出: 20</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-2：在赋值中使用"><a href="#示例-2：在赋值中使用" class="headerlink" title="示例 2：在赋值中使用"></a><strong>示例 2：在赋值中使用</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">status = <span class="string">&quot;成年&quot;</span> <span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">else</span> <span class="string">&quot;未成年&quot;</span></span><br><span class="line"><span class="built_in">print</span>(status)  <span class="comment"># 输出: &quot;成年&quot;</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-3：与函数返回值结合"><a href="#示例-3：与函数返回值结合" class="headerlink" title="示例 3：与函数返回值结合"></a><strong>示例 3：与函数返回值结合</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_even(<span class="number">4</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(is_even(<span class="number">5</span>))  <span class="comment"># 输出: False</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-4：嵌套三元表达式（不推荐，可读性差）"><a href="#示例-4：嵌套三元表达式（不推荐，可读性差）" class="headerlink" title="示例 4：嵌套三元表达式（不推荐，可读性差）"></a><strong>示例 4：嵌套三元表达式（不推荐，可读性差）</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">20</span></span><br><span class="line">z = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套三元表达式（可读性较低）</span></span><br><span class="line">result = <span class="string">&quot;x最大&quot;</span> <span class="keyword">if</span> x &gt; y <span class="keyword">and</span> x &gt; z <span class="keyword">else</span> (<span class="string">&quot;y最大&quot;</span> <span class="keyword">if</span> y &gt; z <span class="keyword">else</span> <span class="string">&quot;z最大&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: &quot;z最大&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：嵌套三元表达式会降低代码可读性，建议改用 <code>if-elif-else</code> 结构。</p></blockquote><hr><h4 id="示例-5：在列表推导式中使用"><a href="#示例-5：在列表推导式中使用" class="headerlink" title="示例 5：在列表推导式中使用"></a><strong>示例 5：在列表推导式中使用</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 将偶数加倍，奇数保持不变</span></span><br><span class="line">processed = [x * <span class="number">2</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> x <span class="keyword">for</span> x <span class="keyword">in</span> numbers]</span><br><span class="line"><span class="built_in">print</span>(processed)  <span class="comment"># 输出: [1, 4, 3, 8, 5]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-6：在Lambda匿名函数中使用"><a href="#示例-6：在Lambda匿名函数中使用" class="headerlink" title="示例 6：在Lambda匿名函数中使用"></a><strong>示例 6：在Lambda匿名函数中使用</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_positive = <span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="三元表达式-vs-普通-if-else"><a href="#三元表达式-vs-普通-if-else" class="headerlink" title="三元表达式 vs 普通 if-else"></a><strong>三元表达式 vs 普通 <code>if-else</code></strong></h4><table><thead><tr><th>场景</th><th>三元表达式</th><th>普通 <code>if-else</code></th></tr></thead><tbody><tr><td><strong>简单条件赋值</strong></td><td><code>value = a if cond else b</code></td><td><code>if cond: value = a else: value = b</code></td></tr><tr><td><strong>多分支条件</strong></td><td>可嵌套（但不推荐）</td><td>使用 <code>elif</code> 更清晰</td></tr><tr><td><strong>代码简洁性</strong></td><td>更紧凑</td><td>更冗长</td></tr><tr><td><strong>可读性</strong></td><td>简单条件时更直观</td><td>复杂逻辑时更易读</td></tr></tbody></table><h2 id="推导式（列表-集合-字典推导式）"><a href="#推导式（列表-集合-字典推导式）" class="headerlink" title="推导式（列表&#x2F;集合&#x2F;字典推导式）"></a>推导式（列表&#x2F;集合&#x2F;字典推导式）</h2><p>推导式是一种简洁生成集合类型数据的表达式。常见的有列表推导式、集合推导式和字典推导式。</p><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式（list comprehension）的基本形式如下，它可以生成一个新列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 <span class="keyword">if</span> 条件]</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 计算平方，生成列表</span></span><br><span class="line">squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> nums]</span><br><span class="line"><span class="built_in">print</span>(squares)  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件过滤：仅保留偶数的平方</span></span><br><span class="line">even_squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> nums <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(even_squares)  <span class="comment"># [4, 16]</span></span><br></pre></td></tr></table></figure><p>上面两个例子分别对应对每个元素操作和带条件的操作。</p><p>列表推导式<strong>可以包含多个 <code>for</code> 子句</strong>，从而实现嵌套循环。</p><p>例如，将二维列表拍平：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">flatten = [num <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> num <span class="keyword">in</span> row]</span><br><span class="line"><span class="built_in">print</span>(flatten)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p><strong>小结：</strong> 官方教程指出，使用列表推导式可以在一行内创建列表，代码更加简洁易读。</p><h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><p>集合推导式和列表推导式类似，使用 <code>&#123;&#125;</code> 来生成集合（去重且无序）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">unique_set = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> nums&#125;</span><br><span class="line"><span class="built_in">print</span>(unique_set)  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><p>如果需要按照顺序去重，可以先使用集合去除重复元素，然后转换为列表。不过要注意，<code>set</code> 会改变元素顺序。如果要保持原顺序去重，可使用字典（见后文）或循环处理。</p><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>字典推导式使用 <code>&#123;键: 值 for ...&#125;</code> 形式来生成字典。例如，将列表生成数字平方的字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="built_in">range</span>(<span class="number">5</span>)  <span class="comment"># 0, 1, 2, 3, 4</span></span><br><span class="line">square_dict = &#123;x: x * x <span class="keyword">for</span> x <span class="keyword">in</span> nums&#125;</span><br><span class="line"><span class="built_in">print</span>(square_dict)  <span class="comment"># &#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br></pre></td></tr></table></figure><p>也可以结合条件或解包键值对。例如，将一组键值元组转换为字典，只包含值大于 1 的项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pairs = [(<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)]</span><br><span class="line">filtered_dict = &#123;k: v <span class="keyword">for</span> (k, v) <span class="keyword">in</span> pairs <span class="keyword">if</span> v &gt; <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(filtered_dict)  <span class="comment"># &#123;&#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><p>推导式使用语法简单，且不需要手动创建并填充新集合，从而减少样板代码。</p><h2 id="实战案例：函数式编程在实际中与传统写法的对比"><a href="#实战案例：函数式编程在实际中与传统写法的对比" class="headerlink" title="实战案例：函数式编程在实际中与传统写法的对比"></a>实战案例：函数式编程在实际中与传统写法的对比</h2><p>下面通过多个小案例展示函数式编程在日常任务中的实际效果与优势。</p><hr><h3 id="案例一：数据清洗-——-去除空白与空值"><a href="#案例一：数据清洗-——-去除空白与空值" class="headerlink" title="案例一：数据清洗 —— 去除空白与空值"></a>案例一：数据清洗 —— 去除空白与空值</h3><p><strong>目标</strong>：从原始字符串列表中去除首尾空白并删除空项（包括 <code>None</code> 和空字符串）。</p><p><strong>传统写法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">raw = [<span class="string">&quot; Alice &quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;  &quot;</span>, <span class="string">&quot;Charlie  &quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;  David&quot;</span>]</span><br><span class="line">cleaned = []</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> raw:</span><br><span class="line">    <span class="keyword">if</span> s:  <span class="comment"># 过滤 None 和空字符串</span></span><br><span class="line">        stripped = s.strip()</span><br><span class="line">        <span class="keyword">if</span> stripped:</span><br><span class="line">            cleaned.append(stripped)</span><br><span class="line"><span class="built_in">print</span>(cleaned)</span><br><span class="line"><span class="comment"># 输出 [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;David&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>函数式写法</strong>（推荐使用列表推导式）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cleaned = [s.strip() <span class="keyword">for</span> s <span class="keyword">in</span> raw <span class="keyword">if</span> s <span class="keyword">and</span> s.strip()]</span><br><span class="line"><span class="built_in">print</span>(cleaned)</span><br><span class="line"><span class="comment"># 输出 [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;David&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>也可使用 <code>filter()</code> 和 <code>map()</code>，但列表推导式更简洁直观。</p></blockquote><hr><h3 id="案例二：文本处理-——-拆分句子并统计单词数"><a href="#案例二：文本处理-——-拆分句子并统计单词数" class="headerlink" title="案例二：文本处理 —— 拆分句子并统计单词数"></a>案例二：文本处理 —— 拆分句子并统计单词数</h3><p><strong>目标</strong>：将句子拆分为单词并统计每句单词数量。</p><p><strong>传统写法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sentences = [<span class="string">&quot;Hello world&quot;</span>, <span class="string">&quot;Python is great&quot;</span>, <span class="string">&quot; Functional Programming&quot;</span>]</span><br><span class="line">words_list = []</span><br><span class="line">word_counts = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> sentences:</span><br><span class="line">    s = s.strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    words = s.split()</span><br><span class="line">    words_list.append(words)</span><br><span class="line">    word_counts.append(<span class="built_in">len</span>(words))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(words_list)   <span class="comment"># [[&#x27;Hello&#x27;, &#x27;world&#x27;], [&#x27;Python&#x27;, &#x27;is&#x27;, &#x27;great&#x27;], [&#x27;Functional&#x27;, &#x27;Programming&#x27;]]</span></span><br><span class="line"><span class="built_in">print</span>(word_counts)  <span class="comment"># [2, 3, 2]</span></span><br></pre></td></tr></table></figure><p><strong>函数式写法 1</strong>（列表推导式）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">words_list = [s.strip().split() <span class="keyword">for</span> s <span class="keyword">in</span> sentences <span class="keyword">if</span> s.strip()]</span><br><span class="line">word_counts = [<span class="built_in">len</span>(words) <span class="keyword">for</span> words <span class="keyword">in</span> words_list]</span><br></pre></td></tr></table></figure><p><strong>函数式写法 2</strong>（<code>map()</code> + <code>filter()</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentence_stripped = <span class="built_in">filter</span>(<span class="literal">None</span>, <span class="built_in">map</span>(<span class="built_in">str</span>.strip, sentences))</span><br><span class="line">word_counts = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> s: <span class="built_in">len</span>(s.split()), sentence_stripped))</span><br><span class="line"><span class="built_in">print</span>(word_counts)  <span class="comment"># [2, 3, 2]</span></span><br></pre></td></tr></table></figure><hr><h3 id="案例三：列表去重-——-保留顺序或使用集合"><a href="#案例三：列表去重-——-保留顺序或使用集合" class="headerlink" title="案例三：列表去重 —— 保留顺序或使用集合"></a>案例三：列表去重 —— 保留顺序或使用集合</h3><p><strong>目标</strong>：去除重复元素，尽可能保留原顺序。</p><p><strong>传统写法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">unique = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> unique:</span><br><span class="line">        unique.append(x)</span><br><span class="line"><span class="built_in">print</span>(unique)  <span class="comment"># [3, 1, 2, 4]</span></span><br></pre></td></tr></table></figure><p><strong>函数式写法</strong>：</p><ul><li><p><strong>使用集合（不保序）</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unique_set = <span class="built_in">list</span>(<span class="built_in">set</span>(nums))</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>dict.fromkeys()</code>（保序推荐）</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unique_ordered = <span class="built_in">list</span>(<span class="built_in">dict</span>.fromkeys(nums))</span><br><span class="line"><span class="built_in">print</span>(unique_ordered)  <span class="comment"># [3, 1, 2, 4]</span></span><br></pre></td></tr></table></figure></li></ul><p>这些对比示例表明，函数式写法往往可以用更少的代码行实现相同功能，并且结构清晰，一眼就能看出“对每个元素做什么操作”。</p><h2 id="函数式编程常见技巧进阶"><a href="#函数式编程常见技巧进阶" class="headerlink" title="函数式编程常见技巧进阶"></a>函数式编程常见技巧进阶</h2><hr><h3 id="一、高阶函数：map、filter、sorted-等组合使用"><a href="#一、高阶函数：map、filter、sorted-等组合使用" class="headerlink" title="一、高阶函数：map、filter、sorted 等组合使用"></a>一、高阶函数：map、filter、sorted 等组合使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map(): 批量转换</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">squared = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, nums))  <span class="comment"># [1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter(): 条件筛选</span></span><br><span class="line">evens = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, nums))  <span class="comment"># [2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted(): 自定义排序</span></span><br><span class="line">pairs = [(<span class="number">1</span>, <span class="string">&#x27;Z&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;B&#x27;</span>)]</span><br><span class="line">sorted_pairs = <span class="built_in">sorted</span>(pairs, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])  <span class="comment"># [(3, &#x27;A&#x27;), (2, &#x27;B&#x27;), (1, &#x27;Z&#x27;)]</span></span><br></pre></td></tr></table></figure><hr><h3 id="二、列表与字典操作的函数式写法"><a href="#二、列表与字典操作的函数式写法" class="headerlink" title="二、列表与字典操作的函数式写法"></a>二、列表与字典操作的函数式写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表元素统一处理（大写）</span></span><br><span class="line">names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>]</span><br><span class="line">upper_names = [(<span class="keyword">lambda</span> s: s.upper())(name) <span class="keyword">for</span> name <span class="keyword">in</span> names]  <span class="comment"># [&#x27;ALICE&#x27;, &#x27;BOB&#x27;, &#x27;CHARLIE&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典值转换处理</span></span><br><span class="line">data = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">transformed = &#123;k: (<span class="keyword">lambda</span> v: v * <span class="number">10</span>)(v) <span class="keyword">for</span> k, v <span class="keyword">in</span> data.items()&#125;  <span class="comment"># &#123;&#x27;a&#x27;: 10, &#x27;b&#x27;: 20&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、闭包与延迟计算"><a href="#三、闭包与延迟计算" class="headerlink" title="三、闭包与延迟计算"></a>三、闭包与延迟计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 闭包：根据参数生成不同幂函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power_maker</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x ** n</span><br><span class="line"></span><br><span class="line">square = power_maker(<span class="number">2</span>)</span><br><span class="line">cube = power_maker(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">4</span>))  <span class="comment"># 16</span></span><br><span class="line"><span class="built_in">print</span>(cube(<span class="number">3</span>))    <span class="comment"># 27</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 延迟执行：常用于回调、按钮操作</span></span><br><span class="line">button_actions = &#123;</span><br><span class="line">    <span class="string">&quot;add&quot;</span>: <span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&quot;执行加法&quot;</span>),</span><br><span class="line">    <span class="string">&quot;exit&quot;</span>: <span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&quot;退出程序&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">button_actions[<span class="string">&quot;add&quot;</span>]()  <span class="comment"># 执行加法</span></span><br></pre></td></tr></table></figure><hr><h3 id="四、条件逻辑的函数式写法"><a href="#四、条件逻辑的函数式写法" class="headerlink" title="四、条件逻辑的函数式写法"></a>四、条件逻辑的函数式写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单条件表达</span></span><br><span class="line">grade = <span class="keyword">lambda</span> score: <span class="string">&quot;及格&quot;</span> <span class="keyword">if</span> score &gt;= <span class="number">60</span> <span class="keyword">else</span> <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="built_in">print</span>(grade(<span class="number">75</span>))  <span class="comment"># 及格</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多分支条件处理</span></span><br><span class="line">category = <span class="keyword">lambda</span> age: (</span><br><span class="line">    <span class="string">&quot;儿童&quot;</span> <span class="keyword">if</span> age &lt; <span class="number">12</span> <span class="keyword">else</span></span><br><span class="line">    <span class="string">&quot;青少年&quot;</span> <span class="keyword">if</span> age &lt; <span class="number">18</span> <span class="keyword">else</span></span><br><span class="line">    <span class="string">&quot;成人&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(category(<span class="number">15</span>))  <span class="comment"># 青少年</span></span><br></pre></td></tr></table></figure><hr><h3 id="五、特殊参数与函数定义技巧"><a href="#五、特殊参数与函数定义技巧" class="headerlink" title="五、特殊参数与函数定义技巧"></a>五、特殊参数与函数定义技巧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda 支持默认参数</span></span><br><span class="line">adder = <span class="keyword">lambda</span> x, y=<span class="number">10</span>: x + y</span><br><span class="line"><span class="built_in">print</span>(adder(<span class="number">5</span>))      <span class="comment"># 15</span></span><br><span class="line"><span class="built_in">print</span>(adder(<span class="number">5</span>, <span class="number">20</span>))  <span class="comment"># 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持可变参数</span></span><br><span class="line">processor = <span class="keyword">lambda</span> *args, **kwargs: <span class="string">f&quot;收到位置参数: <span class="subst">&#123;args&#125;</span>, 关键字参数: <span class="subst">&#123;kwargs&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(processor(<span class="number">1</span>, <span class="number">2</span>, a=<span class="number">3</span>))  <span class="comment"># 收到位置参数: (1, 2), 关键字参数: &#123;&#x27;a&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="何时使用-lambda"><a href="#何时使用-lambda" class="headerlink" title="何时使用 lambda"></a>何时使用 <code>lambda</code></h3><table><thead><tr><th>场景</th><th>推荐使用</th><th>不推荐使用</th></tr></thead><tbody><tr><td>简单数学运算</td><td>✅ <code>map(lambda x: x*2, lst)</code></td><td>❌ 复杂公式</td></tr><tr><td>临时回调函数</td><td>✅ <code>button.click(lambda: ...)</code></td><td>❌ 多步骤业务逻辑</td></tr><tr><td>排序&#x2F;过滤键</td><td>✅ <code>sorted(data, key=lambda x: x[1])</code></td><td>❌ 需要描述性名称时</td></tr><tr><td>函数参数简化</td><td>✅ <code>functools.reduce(lambda a,b: a+b, lst)</code></td><td>❌ 需要类型提示时</td></tr></tbody></table><h2 id="函数式编程的例题"><a href="#函数式编程的例题" class="headerlink" title="函数式编程的例题"></a>函数式编程的例题</h2><hr><h4 id="示例-1：从列表中提取偶数并平方"><a href="#示例-1：从列表中提取偶数并平方" class="headerlink" title="示例 1：从列表中提取偶数并平方"></a>示例 1：从列表中提取偶数并平方</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, nums)))</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [4, 16, 36]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-2：提取字符串中以“a”开头的单词"><a href="#示例-2：提取字符串中以“a”开头的单词" class="headerlink" title="示例 2：提取字符串中以“a”开头的单词"></a>示例 2：提取字符串中以“a”开头的单词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;apple banana apricot cherry avocado&quot;</span></span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> w: w.startswith(<span class="string">&quot;a&quot;</span>), text.split()))</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [&#x27;apple&#x27;, &#x27;apricot&#x27;, &#x27;avocado&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-3：字典键值批量转换（键大写，值乘以10）"><a href="#示例-3：字典键值批量转换（键大写，值乘以10）" class="headerlink" title="示例 3：字典键值批量转换（键大写，值乘以10）"></a>示例 3：字典键值批量转换（键大写，值乘以10）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&quot;x&quot;</span>: <span class="number">1</span>, <span class="string">&quot;y&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">result = &#123;k.upper(): v * <span class="number">10</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> data.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &#123;&#x27;X&#x27;: 10, &#x27;Y&#x27;: 20&#125;</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-4：字符串列表转为单词列表（去空白-小写）"><a href="#示例-4：字符串列表转为单词列表（去空白-小写）" class="headerlink" title="示例 4：字符串列表转为单词列表（去空白+小写）"></a>示例 4：字符串列表转为单词列表（去空白+小写）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lines = [<span class="string">&quot; Hello World  &quot;</span>, <span class="string">&quot;  PYTHON  IS  Fun &quot;</span>]</span><br><span class="line">words = [word.lower() <span class="keyword">for</span> line <span class="keyword">in</span> lines <span class="keyword">for</span> word <span class="keyword">in</span> line.strip().split()]</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;, &#x27;is&#x27;, &#x27;fun&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-5：生成指定幂函数的列表（闭包）"><a href="#示例-5：生成指定幂函数的列表（闭包）" class="headerlink" title="示例 5：生成指定幂函数的列表（闭包）"></a>示例 5：生成指定幂函数的列表（闭包）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power_makers</span>(<span class="params">n_list</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x, n=n: x**n <span class="keyword">for</span> n <span class="keyword">in</span> n_list]</span><br><span class="line"></span><br><span class="line">powers = power_makers([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>([f(<span class="number">2</span>) <span class="keyword">for</span> f <span class="keyword">in</span> powers])  <span class="comment"># [2, 4, 8]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-6：对字符串按长度排序（忽略空白）"><a href="#示例-6：对字符串按长度排序（忽略空白）" class="headerlink" title="示例 6：对字符串按长度排序（忽略空白）"></a>示例 6：对字符串按长度排序（忽略空白）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">&quot;  banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot; cherry &quot;</span>]</span><br><span class="line">result = <span class="built_in">sorted</span>(words, key=<span class="keyword">lambda</span> s: <span class="built_in">len</span>(s.strip()))</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [&#x27;apple&#x27;, &#x27; cherry &#x27;, &#x27;  banana&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-7：从嵌套列表中提取所有数字"><a href="#示例-7：从嵌套列表中提取所有数字" class="headerlink" title="示例 7：从嵌套列表中提取所有数字"></a>示例 7：从嵌套列表中提取所有数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nested = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>]]</span><br><span class="line">flat = [x <span class="keyword">for</span> sublist <span class="keyword">in</span> nested <span class="keyword">for</span> x <span class="keyword">in</span> sublist]</span><br><span class="line"><span class="built_in">print</span>(flat)  <span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-8：组合两个列表成字典（忽略-None-值）"><a href="#示例-8：组合两个列表成字典（忽略-None-值）" class="headerlink" title="示例 8：组合两个列表成字典（忽略 None 值）"></a>示例 8：组合两个列表成字典（忽略 None 值）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line">values = [<span class="number">1</span>, <span class="literal">None</span>, <span class="number">3</span>]</span><br><span class="line">result = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(keys, values) <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;c&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-9：延迟计算表达式序列（惰性生成器）"><a href="#示例-9：延迟计算表达式序列（惰性生成器）" class="headerlink" title="示例 9：延迟计算表达式序列（惰性生成器）"></a>示例 9：延迟计算表达式序列（惰性生成器）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expressions = [<span class="keyword">lambda</span> x=i: x**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> expressions:</span><br><span class="line">    <span class="built_in">print</span>(f(), end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 0 1 4 9 16</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-10：多条件筛选数值"><a href="#示例-10：多条件筛选数值" class="headerlink" title="示例 10：多条件筛选数值"></a>示例 10：多条件筛选数值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="built_in">range</span>(<span class="number">20</span>)</span><br><span class="line">filtered = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> x % <span class="number">3</span> != <span class="number">0</span>, nums))</span><br><span class="line"><span class="built_in">print</span>(filtered)  <span class="comment"># [2, 4, 8, 10, 14, 16]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-11：提取唯一单词并按字母排序"><a href="#示例-11：提取唯一单词并按字母排序" class="headerlink" title="示例 11：提取唯一单词并按字母排序"></a>示例 11：提取唯一单词并按字母排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;apple banana apple orange Banana&quot;</span></span><br><span class="line">words = <span class="built_in">sorted</span>(<span class="built_in">set</span>(<span class="built_in">map</span>(<span class="built_in">str</span>.lower, text.split())))</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-12：统计每类词频（忽略大小写）"><a href="#示例-12：统计每类词频（忽略大小写）" class="headerlink" title="示例 12：统计每类词频（忽略大小写）"></a>示例 12：统计每类词频（忽略大小写）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">text = <span class="string">&quot;Dog cat dog CAT fish&quot;</span></span><br><span class="line">counts = Counter(<span class="built_in">map</span>(<span class="built_in">str</span>.lower, text.split()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(counts))  <span class="comment"># &#123;&#x27;dog&#x27;: 2, &#x27;cat&#x27;: 2, &#x27;fish&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-13：对二维矩阵按列求和"><a href="#示例-13：对二维矩阵按列求和" class="headerlink" title="示例 13：对二维矩阵按列求和"></a>示例 13：对二维矩阵按列求和</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">col_sum = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">sum</span>, <span class="built_in">zip</span>(*matrix)))</span><br><span class="line"><span class="built_in">print</span>(col_sum)  <span class="comment"># [5, 7, 9]</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-14：动态生成带标签的打印函数（闭包）"><a href="#示例-14：动态生成带标签的打印函数（闭包）" class="headerlink" title="示例 14：动态生成带标签的打印函数（闭包）"></a>示例 14：动态生成带标签的打印函数（闭包）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">labeler</span>(<span class="params">tag</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> msg: <span class="string">f&quot;[<span class="subst">&#123;tag.upper()&#125;</span>] <span class="subst">&#123;msg&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">warn = labeler(<span class="string">&quot;warn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(warn(<span class="string">&quot;Low battery&quot;</span>))  <span class="comment"># [WARN] Low battery</span></span><br></pre></td></tr></table></figure><hr><h4 id="示例-15：按条件映射标签（分级）"><a href="#示例-15：按条件映射标签（分级）" class="headerlink" title="示例 15：按条件映射标签（分级）"></a>示例 15：按条件映射标签（分级）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = [<span class="number">45</span>, <span class="number">78</span>, <span class="number">90</span>]</span><br><span class="line">labels = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> s: <span class="string">&quot;优&quot;</span> <span class="keyword">if</span> s &gt;= <span class="number">85</span> <span class="keyword">else</span> <span class="string">&quot;良&quot;</span> <span class="keyword">if</span> s &gt;= <span class="number">60</span> <span class="keyword">else</span> <span class="string">&quot;差&quot;</span>, scores))</span><br><span class="line"><span class="built_in">print</span>(labels)  <span class="comment"># [&#x27;差&#x27;, &#x27;良&#x27;, &#x27;优&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="函数式编程的优势"><a href="#函数式编程的优势" class="headerlink" title="函数式编程的优势"></a>函数式编程的优势</h2><ul><li><strong>减少样板代码：</strong> 使用 <code>map</code>、<code>filter</code> 和推导式时，不需要先创建空列表再循环填充，省去了多行循环模板代码。</li><li><strong>提高代码简洁度：</strong> 许多操作可以在一行表达式中完成，使得代码更简洁、一目了然。</li><li><strong>加快开发速度：</strong> 由于代码量减少，开发、调试和维护都更高效。开发者能专注于“做什么”而非“如何做”。</li><li><strong>可读性更强：</strong> 链式使用内置函数和推导式能够清楚表达数据转化逻辑，代码意图直观易懂。例如，一行推导式就可以展示过滤、映射、拆分等步骤。</li><li><strong>易于组合和复用：</strong> 许多函数式工具产生迭代器，可以方便地与其他工具（如 <code>itertools</code>）组合，编写复杂逻辑时保持简洁。</li></ul><p>综上所述，掌握 <code>map</code>、<code>filter</code>、<code>lambda</code> 和各种推导式，可以帮助 Python 开发者编写更简洁、可读性更高的代码，大大减少样板工作，提高开发效率。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 可迭代对象</title>
      <link href="/2025/06/02/Python3%20%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/"/>
      <url>/2025/06/02/Python3%20%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-可迭代对象"><a href="#Python3-可迭代对象" class="headerlink" title="Python3 可迭代对象"></a>Python3 可迭代对象</h1><blockquote><p><strong>本文中交替出现 Python 的编译模式和交互模式代码块，为便于区分，带有 <code>&gt;&gt;&gt;</code> 的 Python 代码块为交互模式，其余 Python 代码块为编译模式。</strong></p></blockquote><blockquote><p>可迭代对象是Python3 最伟大的发明，是Python3区别于其它编程语言的最显著特征。掌握好可迭代对象才是真正学好了Python3.</p></blockquote><h2 id="可迭代对象（Iterable）"><a href="#可迭代对象（Iterable）" class="headerlink" title="可迭代对象（Iterable）"></a>可迭代对象（Iterable）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>可迭代对象（Iterable）是指在 Python 中能够使用迭代器进行遍历的对象。它包括了各种容器对象，如列表（list）、元组（tuple）、集合（set）、字典（dict）以及字符串等。</p><p>可迭代对象的特点是可以通过 <code>for</code> 循环来遍历其中的元素，或者使用内置的 <code>iter()</code> 函数将其转换为迭代器对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表是可迭代对象</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组也是可迭代对象</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_tuple:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串是可迭代对象</span></span><br><span class="line">my_string = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> my_string:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure><h3 id="基本概念和操作"><a href="#基本概念和操作" class="headerlink" title="基本概念和操作"></a>基本概念和操作</h3><p>在 Python 中，<strong>可迭代对象（Iterable）</strong> 是一个可以被逐个取出元素的对象，常用于 <code>for</code> 循环、生成器表达式、函数 <code>iter()</code> 中。</p><hr><h4 id="判断是否是可迭代对象"><a href="#判断是否是可迭代对象" class="headerlink" title="判断是否是可迭代对象"></a>判断是否是可迭代对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], Iterable))      <span class="comment"># True（列表）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&quot;hello&quot;</span>, Iterable))       <span class="comment"># True（字符串）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">123</span>, Iterable))           <span class="comment"># False（整数）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterable))  <span class="comment"># True（生成器属于可迭代对象）</span></span><br></pre></td></tr></table></figure><hr><h4 id="常见可迭代对象类型"><a href="#常见可迭代对象类型" class="headerlink" title="常见可迭代对象类型"></a>常见可迭代对象类型</h4><table><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>list</code></td><td><code>[1, 2, 3]</code></td><td>可重复遍历，可变</td></tr><tr><td><code>tuple</code></td><td><code>(1, 2, 3)</code></td><td>不可变</td></tr><tr><td><code>str</code></td><td><code>&quot;abc&quot;</code></td><td>每个字符是一个元素</td></tr><tr><td><code>dict</code></td><td><code>&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</code></td><td>遍历时是键</td></tr><tr><td><code>set</code></td><td><code>&#123;1, 2, 3&#125;</code></td><td>无序不重复元素</td></tr><tr><td><code>range</code></td><td><code>range(10)</code></td><td>整数序列生成</td></tr><tr><td><code>generator</code></td><td><code>(x for x in range(10))</code></td><td>一次性遍历，惰性计算</td></tr><tr><td><code>file</code></td><td><code>open(&#39;a.txt&#39;)</code></td><td>行级读取，每次一行</td></tr><tr><td><code>enumerate</code></td><td><code>enumerate(lst)</code></td><td>下标+元素</td></tr><tr><td><code>zip</code></td><td><code>zip(a, b)</code></td><td>元素打包</td></tr></tbody></table><hr><h4 id="可迭代对象的高级应用"><a href="#可迭代对象的高级应用" class="headerlink" title="可迭代对象的高级应用"></a>可迭代对象的高级应用</h4><h5 id="枚举（enumerate）"><a href="#枚举（enumerate）" class="headerlink" title="枚举（enumerate）"></a>枚举（<code>enumerate</code>）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 a</span><br><span class="line">1 b</span><br><span class="line">2 c</span><br></pre></td></tr></table></figure><h5 id="同时遍历多个序列（zip）"><a href="#同时遍历多个序列（zip）" class="headerlink" title="同时遍历多个序列（zip）"></a>同时遍历多个序列（<code>zip</code>）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>]</span><br><span class="line">scores = [<span class="number">90</span>, <span class="number">85</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, score <span class="keyword">in</span> <span class="built_in">zip</span>(names, scores):</span><br><span class="line">    <span class="built_in">print</span>(name, score)</span><br><span class="line">    </span><br><span class="line">[<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> <span class="subst">&#123;score&#125;</span>&quot;</span>) <span class="keyword">for</span> name, score <span class="keyword">in</span> <span class="built_in">zip</span>(names, scores)]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tom 90</span><br><span class="line">Jerry 85</span><br><span class="line">Tom 90</span><br><span class="line">Jerry 85</span><br></pre></td></tr></table></figure><h5 id="解包可迭代对象（-运算符）"><a href="#解包可迭代对象（-运算符）" class="headerlink" title="解包可迭代对象（* 运算符）"></a>解包可迭代对象（<code>*</code> 运算符）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, *rest = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a, b)     <span class="comment"># 1 2</span></span><br><span class="line"><span class="built_in">print</span>(rest)     <span class="comment"># [3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>迭代器（Iterator）是一种可以实现惰性计算的对象，可以被用来遍历可迭代对象中的元素。迭代器是一种特殊的对象，它实现了 <code>__iter__()</code> 和 <code>__next__()</code> 方法，这使得它可以被 <code>next()</code> 函数调用，并且可以逐个返回元素，直到没有元素可返回时抛出 <strong><code>StopIteration</code></strong> 异常。</p><p>迭代器的主要特点是它只在需要时才生成下一个值，这种延迟计算的方式使得迭代器在处理大数据集时非常高效，因为它不会一次性将所有数据都加载到内存中，而是按需生成和处理数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">my_iterator = <span class="built_in">iter</span>(my_list)  <span class="comment"># 使用iter()函数将列表转换为迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出迭代器的下一个元素</span></span><br></pre></td></tr></table></figure><hr><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="将可迭代对象转为迭代器：iter"><a href="#将可迭代对象转为迭代器：iter" class="headerlink" title="将可迭代对象转为迭代器：iter()"></a>将可迭代对象转为迭代器：<code>iter()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;hello&quot;</span></span><br><span class="line">it = <span class="built_in">iter</span>(s)     <span class="comment"># 将字符串变成迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># h</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># e</span></span><br></pre></td></tr></table></figure><hr><h4 id="可迭代对象与迭代器对比"><a href="#可迭代对象与迭代器对比" class="headerlink" title="可迭代对象与迭代器对比"></a>可迭代对象与迭代器对比</h4><table><thead><tr><th>概念</th><th>是否惰性计算</th><th>是否可 <code>next()</code></th><th>是否可 <code>for</code></th></tr></thead><tbody><tr><td>Iterable</td><td>❌ 否</td><td>❌ 不可</td><td>✅ 可以</td></tr><tr><td>Iterator</td><td>✅ 是</td><td>✅ 可以</td><td>✅ 可以</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(lst, Iterable))   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(lst, Iterator))   <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(it, Iterator))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><hr><h4 id="使用for-循环操作迭代器关系"><a href="#使用for-循环操作迭代器关系" class="headerlink" title="使用for 循环操作迭代器关系"></a>使用<code>for</code> 循环操作迭代器关系</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等价于 for i in [1, 2, 3]</span></span><br><span class="line">it = <span class="built_in">iter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Python-3-中返回迭代器的内置函数及其应用示例"><a href="#Python-3-中返回迭代器的内置函数及其应用示例" class="headerlink" title="Python 3 中返回迭代器的内置函数及其应用示例"></a>Python 3 中返回迭代器的内置函数及其应用示例</h3><p>以下是在 Python 3 中返回迭代器（而非列表）的常用内置函数，它们具有惰性求值特性，适用于大数据处理：</p><h4 id="1-map-function-iterable"><a href="#1-map-function-iterable" class="headerlink" title="1. map(function, iterable, ...)"></a>1. <code>map(function, iterable, ...)</code></h4><p>返回将函数应用于每个元素的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算数字的平方</span></span><br><span class="line">squares = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(squares))  <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(squares))  <span class="comment"># 输出: [4, 9, 16] (注意第一个元素已消耗)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多序列并行处理</span></span><br><span class="line">combined = <span class="built_in">map</span>(<span class="keyword">lambda</span> a, b: <span class="string">f&quot;<span class="subst">&#123;a&#125;</span>-<span class="subst">&#123;b&#125;</span>&quot;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(combined))  <span class="comment"># 输出: [&#x27;A-1&#x27;, &#x27;B-2&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="2-filter-function-iterable"><a href="#2-filter-function-iterable" class="headerlink" title="2. filter(function, iterable)"></a>2. <code>filter(function, iterable)</code></h4><p>返回满足条件元素的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选偶数</span></span><br><span class="line">numbers = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(numbers))  <span class="comment"># 输出: [0, 2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选非空字符串</span></span><br><span class="line">words = <span class="built_in">filter</span>(<span class="literal">None</span>, [<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;world&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(words))  <span class="comment"># 输出: [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="3-zip-iterables"><a href="#3-zip-iterables" class="headerlink" title="3. zip(*iterables)"></a>3. <code>zip(*iterables)</code></h4><p>返回聚合多个可迭代对象的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并姓名和年龄</span></span><br><span class="line">names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>]</span><br><span class="line">ages = [<span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line">zipped = <span class="built_in">zip</span>(names, ages)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(zipped))  <span class="comment"># 输出: &#123;&#x27;Alice&#x27;: 25, &#x27;Bob&#x27;: 30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等长序列处理</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(numbers, letters)))  <span class="comment"># 输出: [(1, &#x27;a&#x27;), (2, &#x27;b&#x27;)]</span></span><br></pre></td></tr></table></figure><h4 id="4-enumerate-iterable-start-0"><a href="#4-enumerate-iterable-start-0" class="headerlink" title="4. enumerate(iterable, start=0)"></a>4. <code>enumerate(iterable, start=0)</code></h4><p>返回带索引的元素迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带索引遍历</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>. <span class="subst">&#123;fruit&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># 1. apple</span></span><br><span class="line"><span class="comment"># 2. banana</span></span><br><span class="line"><span class="comment"># 3. cherry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建索引字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">enumerate</span>(fruits)))  <span class="comment"># 输出: &#123;0: &#x27;apple&#x27;, 1: &#x27;banana&#x27;, 2: &#x27;cherry&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-reversed-sequence"><a href="#5-reversed-sequence" class="headerlink" title="5. reversed(sequence)"></a>5. <code>reversed(sequence)</code></h4><p>返回反向访问的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向遍历列表</span></span><br><span class="line">colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">reversed_colors = <span class="built_in">reversed</span>(colors)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(reversed_colors))  <span class="comment"># 输出: [&#x27;blue&#x27;, &#x27;green&#x27;, &#x27;red&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向字符串处理</span></span><br><span class="line">text = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(text)))  <span class="comment"># 输出: &#x27;nohtyP&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="6-iter-object-sentinel"><a href="#6-iter-object-sentinel" class="headerlink" title="6. iter(object[, sentinel])"></a>6. <code>iter(object[, sentinel])</code></h4><p>返回对象的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础用法</span></span><br><span class="line">numbers = <span class="built_in">iter</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(numbers))  <span class="comment"># 输出: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带哨兵值 - 读取文件直到空行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">iter</span>(f.readline, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(line.strip())</span><br></pre></td></tr></table></figure><h4 id="7-dict-keys-dict-values-dict-items"><a href="#7-dict-keys-dict-values-dict-items" class="headerlink" title="7. dict.keys(), dict.values(), dict.items()"></a>7. <code>dict.keys()</code>, <code>dict.values()</code>, <code>dict.items()</code></h4><p>返回字典视图对象（可迭代）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态字典操作</span></span><br><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键迭代器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(person.keys()))  <span class="comment"># 输出: [&#x27;name&#x27;, &#x27;age&#x27;, &#x27;job&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 值迭代器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(person.values()))  <span class="comment"># 输出: [&#x27;Alice&#x27;, 25, &#x27;Engineer&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 键值对迭代器</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> person.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="关键特性总结"><a href="#关键特性总结" class="headerlink" title="关键特性总结"></a>关键特性总结</h3><p>这些函数均返回的是迭代器，比如<code>map</code>对象也是返回一个迭代器。</p><table><thead><tr><th>函数</th><th>返回类型</th><th>内存效率</th><th>是否一次性</th><th>典型应用场景</th></tr></thead><tbody><tr><td><code>map()</code></td><td><code>map</code>对象</td><td>✅ 高效</td><td>✅ 是</td><td>数据转换&#x2F;批量操作</td></tr><tr><td><code>filter()</code></td><td><code>filter</code>对象</td><td>✅ 高效</td><td>✅ 是</td><td>条件筛选&#x2F;数据清洗</td></tr><tr><td><code>zip()</code></td><td><code>zip</code>对象</td><td>✅ 高效</td><td>✅ 是</td><td>多序列合并&#x2F;矩阵转置</td></tr><tr><td><code>enumerate()</code></td><td><code>enumerate</code>对象</td><td>✅ 高效</td><td>✅ 是</td><td>带索引遍历&#x2F;创建索引映射</td></tr><tr><td><code>reversed()</code></td><td>反向迭代器</td><td>✅ 高效</td><td>✅ 是</td><td>逆序处理&#x2F;栈操作</td></tr><tr><td><code>iter()</code></td><td>迭代器</td><td>✅ 高效</td><td>✅ 是</td><td>自定义迭代&#x2F;分块读取</td></tr><tr><td><code>dict.views()</code></td><td>字典视图</td><td>✅ 动态</td><td>❌ 可重用</td><td>字典遍历&#x2F;实时更新</td></tr></tbody></table><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ol><li><p><strong>一次性消耗</strong>：这些迭代器大多只能遍历一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapped = <span class="built_in">map</span>(<span class="built_in">str</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">list</span>(mapped)  <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"><span class="built_in">list</span>(mapped)  <span class="comment"># [] 已耗尽</span></span><br></pre></td></tr></table></figure></li><li><p><strong>惰性求值</strong>：元素只在请求时计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不会立即执行所有平方计算</span></span><br><span class="line">big_squares = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">range</span>(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>类型转换</strong>：需要持久化结果时转换为容器类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filtered = <span class="built_in">tuple</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, [<span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]))</span><br></pre></td></tr></table></figure></li><li><p><strong>内存优势</strong>：处理大文件时特别高效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅需少量内存处理大文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;huge.log&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    error_lines = <span class="built_in">filter</span>(<span class="keyword">lambda</span> line: <span class="string">&#x27;ERROR&#x27;</span> <span class="keyword">in</span> line, f)</span><br><span class="line">    <span class="keyword">for</span> error <span class="keyword">in</span> error_lines:</span><br><span class="line">        process(error)</span><br></pre></td></tr></table></figure></li></ol><p>这些迭代器返回函数是 Python 函数式编程的核心工具，特别适合处理大数据流和构建高效的数据处理管道。</p><hr><h2 id="生成器（Generator）"><a href="#生成器（Generator）" class="headerlink" title="生成器（Generator）"></a>生成器（Generator）</h2><p>生成器（Generator）是一种特殊的迭代器，它可以在需要时动态生成值，而不是一次性将所有值存储在内存中。生成器使用 <code>yield</code> 关键字来定义生成值的逻辑，每次调用生成器的 <code>__next__()</code> 方法时，它会从上一次的 <code>yield</code> 语句处继续执行，直到遇到下一个 <code>yield</code> 或者函数结束。</p><p>生成器在实现上更加简洁和高效，因为它不需要显式地维护整个序列，而是在每次迭代中动态生成下一个值，这种惰性计算的方式使得生成器非常适合处理大数据集或者无限序列。</p><p>Python 中有两种定义生成器的方式</p><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><p>使用 <code>def</code> 关键字定义的函数，其中包含 <code>yield</code> 语句来产生值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">gen = my_generator()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>类似于列表推导式，使用圆括号来生成一个生成器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gen = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出：9</span></span><br></pre></td></tr></table></figure><h3 id="生成器的应用"><a href="#生成器的应用" class="headerlink" title="生成器的应用"></a>生成器的应用</h3><h4 id="1-生成器函数创建的数据"><a href="#1-生成器函数创建的数据" class="headerlink" title="1. 生成器函数创建的数据"></a>1. <strong>生成器函数创建的数据</strong></h4><p>使用 <code>yield</code> 关键字定义的函数返回的对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_down</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用生成器函数返回生成器对象</span></span><br><span class="line">gen = count_down(<span class="number">3</span>)  <span class="comment"># 属于生成器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(gen))  <span class="comment"># list相当于一次性全部消费生成器。输出: [2, 1],因为3被消费了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(gen))  <span class="comment"># &lt;class &#x27;generator&#x27;&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">[2, 1]</span><br><span class="line">&lt;class &#x27;generator&#x27;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-生成器表达式创建的数据"><a href="#2-生成器表达式创建的数据" class="headerlink" title="2. 生成器表达式创建的数据"></a>2. <strong>生成器表达式创建的数据</strong></h4><p>使用类似列表推导式但用圆括号 <code>()</code> 包裹的表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gen = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>))  <span class="comment"># 属于生成器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(gen))  <span class="comment"># &lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(gen))  <span class="comment"># [4, 9]</span></span><br><span class="line"><span class="comment"># 生成器是迭代器的一种特殊形式</span></span><br></pre></td></tr></table></figure><h3 id="生成器的核心特征"><a href="#生成器的核心特征" class="headerlink" title="生成器的核心特征"></a>生成器的核心特征</h3><ol><li><p><strong>惰性计算</strong><br>只在调用 <code>next()</code> 时生成值（不提前计算所有结果）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gen = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 0（首次调用时计算）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>一次性使用</strong><br>遍历结束后不可复用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gen = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">list</span>(gen)  <span class="comment"># [0, 1]</span></span><br><span class="line"><span class="built_in">list</span>(gen)  <span class="comment"># []（已耗尽）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>内存高效</strong><br>不存储完整数据集（对比列表推导式）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.getsizeof([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>)])  <span class="comment"># 一个列表，约 8 MB</span></span><br><span class="line">sys.getsizeof((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>)))  <span class="comment"># 一个娇小的生成器，约 128 Bytes</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="常见误辨别的非生成器案例"><a href="#常见误辨别的非生成器案例" class="headerlink" title="常见误辨别的非生成器案例"></a>常见误辨别的非生成器案例</h3><table><thead><tr><th>对象类型</th><th>是否生成器</th><th>原因</th></tr></thead><tbody><tr><td><code>range(5)</code></td><td>❌</td><td>返回 range 对象（惰性序列）</td></tr><tr><td><code>zip([1,2], [3,4])</code></td><td>❌</td><td>返回 zip 对象（迭代器）</td></tr><tr><td><code>open(&#39;file.txt&#39;)</code></td><td>❌</td><td>返回文件对象（迭代器）</td></tr><tr><td>列表 <code>[x for x in...]</code></td><td>❌</td><td>列表推导式返回完整列表对象</td></tr><tr><td><code>(x for x in range(5))</code></td><td>✅</td><td>似乎只有这个内置函数返回生成器</td></tr></tbody></table><h3 id="快速检测方法"><a href="#快速检测方法" class="headerlink" title="快速检测方法"></a>快速检测方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_generator</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isinstance</span>(obj, types.GeneratorType)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_generator((x <span class="keyword">for</span> x <span class="keyword">in</span> [])))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(is_generator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))          <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="Python面向对象：自定义类分别实现可迭代对象、迭代器、生成器"><a href="#Python面向对象：自定义类分别实现可迭代对象、迭代器、生成器" class="headerlink" title="Python面向对象：自定义类分别实现可迭代对象、迭代器、生成器"></a>Python面向对象：自定义类分别实现可迭代对象、迭代器、生成器</h2><p>下面我将设计四个自定义类，分别演示不同迭代特性的实现方式，并提供详细的使用示例：</p><h3 id="1-仅实现-getitem-的可迭代对象"><a href="#1-仅实现-getitem-的可迭代对象" class="headerlink" title="1. 仅实现 __getitem__ 的可迭代对象"></a>1. 仅实现 <code>__getitem__</code> 的可迭代对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SequenceIterable</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;通过下标访问的可迭代对象 (非迭代器)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = <span class="built_in">list</span>(args)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="comment"># 支持切片和索引访问</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">slice</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.data[index]</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.data[index]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示</span></span><br><span class="line">seq = SequenceIterable(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1. 下标访问的可迭代对象:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;索引访问: seq[2] = <span class="subst">&#123;seq[<span class="number">2</span>]&#125;</span>&quot;</span>)  <span class="comment"># 30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;切片操作: seq[1:4] = <span class="subst">&#123;seq[<span class="number">1</span>:<span class="number">4</span>]&#125;</span>&quot;</span>)  <span class="comment"># [20, 30, 40]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;长度: <span class="subst">&#123;<span class="built_in">len</span>(seq)&#125;</span>&quot;</span>)  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代但非迭代器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;遍历结果:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 10 20 30 40 50</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 下标访问的可迭代对象:</span><br><span class="line">索引访问: seq[2] = 30</span><br><span class="line">切片操作: seq[1:4] = [20, 30, 40]</span><br><span class="line">长度: 5</span><br><span class="line">遍历结果:</span><br><span class="line">10 20 30 40 50</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="2-实现-iter-的可迭代对象（非迭代器）"><a href="#2-实现-iter-的可迭代对象（非迭代器）" class="headerlink" title="2. 实现 __iter__ 的可迭代对象（非迭代器）"></a>2. 实现 <code>__iter__</code> 的可迭代对象（非迭代器）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassicIterable</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;经典可迭代对象 (非迭代器)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start, end</span>):</span><br><span class="line">        <span class="variable language_">self</span>.start = start</span><br><span class="line">        <span class="variable language_">self</span>.end = end</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回独立的迭代器实例</span></span><br><span class="line">        <span class="keyword">return</span> RangeIterator(<span class="variable language_">self</span>.start, <span class="variable language_">self</span>.end)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RangeIterator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;配套迭代器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start, end</span>):</span><br><span class="line">        <span class="variable language_">self</span>.current = start</span><br><span class="line">        <span class="variable language_">self</span>.end = end</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.current &gt;= <span class="variable language_">self</span>.end:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        value = <span class="variable language_">self</span>.current</span><br><span class="line">        <span class="variable language_">self</span>.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示</span></span><br><span class="line">iterable = ClassicIterable(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. 经典可迭代对象:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一次遍历:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> iterable:</span><br><span class="line">    <span class="built_in">print</span>(num, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n第二次遍历 (可复用):&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> iterable:</span><br><span class="line">    <span class="built_in">print</span>(num, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 5 6 7 8 9</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------</span><br><span class="line">PS E:\education\quzia_pac\pythonforhyr&gt; python .\1.py</span><br><span class="line">2. 经典可迭代对象:</span><br><span class="line">第一次遍历:</span><br><span class="line">5 6 7 8 9</span><br><span class="line">第二次遍历 (可复用):</span><br><span class="line">5 6 7 8 9</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="3-同时实现-iter-和-next-的迭代器"><a href="#3-同时实现-iter-和-next-的迭代器" class="headerlink" title="3. 同时实现 __iter__ 和 __next__ 的迭代器"></a>3. 同时实现 <code>__iter__</code> 和 <code>__next__</code> 的迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SquareIterator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自身就是迭代器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.current = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">max</span> = max_value</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.current &gt;= <span class="variable language_">self</span>.<span class="built_in">max</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        result = <span class="variable language_">self</span>.current ** <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示</span></span><br><span class="line">iterator = SquareIterator(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3. 自身迭代器:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一次遍历:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> square <span class="keyword">in</span> iterator:</span><br><span class="line">    <span class="built_in">print</span>(square, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 0 1 4 9 16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n第二次遍历 (已耗尽):&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;剩余元素:&quot;</span>, <span class="built_in">list</span>(iterator))  <span class="comment"># [] (空列表)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动迭代演示</span></span><br><span class="line">iterator2 = SquareIterator(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n手动迭代:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iterator2))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iterator2))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(iterator2))  <span class="comment"># 4</span></span><br><span class="line"><span class="comment"># print(next(iterator2))  # 触发 StopIteration</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3. 自身迭代器:</span><br><span class="line">第一次遍历:</span><br><span class="line">0 1 4 9 16</span><br><span class="line">第二次遍历 (已耗尽):</span><br><span class="line">剩余元素: []</span><br><span class="line"></span><br><span class="line">手动迭代:</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="4-生成器类（使用-yield）"><a href="#4-生成器类（使用-yield）" class="headerlink" title="4. 生成器类（使用 yield）"></a>4. 生成器类（使用 <code>yield</code>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeGenerator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成器类 (无限素数序列)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.primes = []</span><br><span class="line">        <span class="variable language_">self</span>.current = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(<span class="variable language_">self</span>.current % p != <span class="number">0</span> <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.primes <span class="keyword">if</span> p*p &lt;= <span class="variable language_">self</span>.current):</span><br><span class="line">                <span class="variable language_">self</span>.primes.append(<span class="variable language_">self</span>.current)</span><br><span class="line">                <span class="keyword">yield</span> <span class="variable language_">self</span>.current</span><br><span class="line">            <span class="variable language_">self</span>.current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;4. 生成器类 (无限素数):&quot;</span>)</span><br><span class="line">primes = PrimeGenerator()</span><br><span class="line">prime_iter = <span class="built_in">iter</span>(primes)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;前10个素数:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(prime_iter), end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 2 3 5 7 11 13 17 19 23 29</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n下一个素数:&quot;</span>, <span class="built_in">next</span>(prime_iter))  <span class="comment"># 31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用itertools获取更多</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第11-15个素数:&quot;</span>, <span class="built_in">list</span>(itertools.islice(prime_iter, <span class="number">4</span>)))  <span class="comment"># [37, 41, 43, 47]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4. 生成器类 (无限素数):</span><br><span class="line">前10个素数:</span><br><span class="line">2 3 5 7 11 13 17 19 23 29</span><br><span class="line">下一个素数: 31</span><br><span class="line">第11-15个素数: [37, 41, 43, 47]</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="类型验证代码"><a href="#类型验证代码" class="headerlink" title="类型验证代码"></a>类型验证代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型验证函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_type</span>(<span class="params">obj, name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;name&#125;</span>类型验证:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;是可迭代对象? <span class="subst">&#123;<span class="built_in">isinstance</span>(obj, Iterable)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;是迭代器? <span class="subst">&#123;<span class="built_in">isinstance</span>(obj, Iterator)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;是生成器? <span class="subst">&#123;<span class="built_in">isinstance</span>(obj, types.GeneratorType)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证各个实例</span></span><br><span class="line">check_type(SequenceIterable(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="string">&quot;SequenceIterable&quot;</span>)</span><br><span class="line">check_type(ClassicIterable(<span class="number">1</span>, <span class="number">5</span>), <span class="string">&quot;ClassicIterable&quot;</span>)</span><br><span class="line">check_type(<span class="built_in">iter</span>(ClassicIterable(<span class="number">1</span>, <span class="number">5</span>)), <span class="string">&quot;ClassicIterable的迭代器&quot;</span>)</span><br><span class="line">check_type(SquareIterator(<span class="number">3</span>), <span class="string">&quot;SquareIterator&quot;</span>)</span><br><span class="line">check_type(<span class="built_in">iter</span>(PrimeGenerator()), <span class="string">&quot;PrimeGenerator迭代器&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SequenceIterable类型验证:</span><br><span class="line">是可迭代对象? True</span><br><span class="line">是迭代器? False</span><br><span class="line">是生成器? False</span><br><span class="line"></span><br><span class="line">ClassicIterable类型验证:</span><br><span class="line">是可迭代对象? True</span><br><span class="line">是迭代器? False</span><br><span class="line">是生成器? False</span><br><span class="line"></span><br><span class="line">ClassicIterable的迭代器类型验证:</span><br><span class="line">是可迭代对象? True</span><br><span class="line">是迭代器? True</span><br><span class="line">是生成器? False</span><br><span class="line"></span><br><span class="line">SquareIterator类型验证:</span><br><span class="line">是可迭代对象? True</span><br><span class="line">是迭代器? True</span><br><span class="line">是生成器? False</span><br><span class="line"></span><br><span class="line">PrimeGenerator迭代器类型验证:</span><br><span class="line">是可迭代对象? True</span><br><span class="line">是迭代器? True</span><br><span class="line">是生成器? True</span><br></pre></td></tr></table></figure><h3 id="关键区别总结："><a href="#关键区别总结：" class="headerlink" title="关键区别总结："></a>关键区别总结：</h3><ol><li><p><strong>可迭代对象</strong>：</p><ul><li>实现了 <code>__iter__()</code> 或 <code>__getitem__()</code></li><li>可通过 <code>iter()</code> 获取迭代器</li><li>可多次遍历（如 <code>ClassicIterable</code>）</li></ul></li><li><p><strong>迭代器</strong>：</p><ul><li>同时实现 <code>__iter__()</code> 和 <code>__next__()</code></li><li><code>__iter__()</code> 返回自身</li><li>一次性使用（如 <code>SquareIterator</code>）</li></ul></li><li><p><strong>生成器</strong>：</p><ul><li>特殊迭代器</li><li>使用 <code>yield</code> 关键字实现</li><li>自动维护状态（如 <code>PrimeGenerator</code>）</li><li>类型为 <code>types.GeneratorType</code></li></ul></li><li><p><strong>下标访问对象</strong>：</p><ul><li>仅实现 <code>__getitem__()</code></li><li>支持索引和切片</li><li>可迭代但 <code>isinstance(obj, Iterable)</code> 返回 <code>False</code></li></ul></li></ol><h2 id="表格总结"><a href="#表格总结" class="headerlink" title="表格总结"></a>表格总结</h2><p>Python3 可迭代对象(Iterable)、序列（Sequence）、迭代器（Iterator）、生成器（generator）的关键定义和包含类型：</p><table><thead><tr><th><strong>概念</strong></th><th><strong>定义</strong></th><th><strong>包含类型&#x2F;实现要求</strong></th><th><strong>核心特性</strong></th></tr></thead><tbody><tr><td><strong>可迭代对象 (Iterable)</strong></td><td>能够一次返回一个成员的对象，支持 <code>for...in</code> 循环遍历</td><td><strong>序列</strong>：<code>list</code>, <code>str</code>, <code>tuple</code>, <code>bytes</code><br><strong>非序列</strong>：<code>dict</code>, 文件对象<br><strong>自定义类</strong>：实现了 <code>__iter__()</code> 或 <code>__getitem__()</code> 方法的类。</td><td>可通过 <code>iter(obj)</code> 转换为迭代器；<code>isinstance</code> 检测仅对实现 <code>__iter__()</code> 方法的有效</td></tr><tr><td><strong>序列 (Sequence)</strong></td><td>可迭代对象的子集，支持高效整数索引访问和长度获取</td><td><code>list</code>, <code>str</code>, <code>tuple</code>, <code>bytes</code></td><td>必须实现：<br><code>__getitem__()</code>（索引访问）<br><code>__len__()</code>（长度获取）<br>注意：<code>dict</code> 不是序列</td></tr><tr><td><strong>迭代器 (Iterator)</strong></td><td>表示数据流的对象，通过 <code>next()</code> 逐个返回元素，耗尽后抛出 <code>StopIteration</code></td><td><strong>内置转换</strong>：<code>iter(可迭代对象)</code>（如 <code>list_iterator</code>）<br><strong>自定义类</strong>：同时实现 <code>__iter__()</code>（返回自身）和 <code>__next__()</code> 方法</td><td>一次性消费（遍历后不可复用）<br />迭代器本身也是可迭代对象。</td></tr><tr><td><strong>生成器 (Generator)</strong></td><td>特殊的迭代器，由包含 <code>yield</code> 的函数或生成器表达式创建</td><td><strong>生成器函数</strong>：<code>def gen(): yield ...</code><br><strong>生成器表达式</strong>：<code>(x for x in range(n))</code></td><td>惰性求值（按需生成值）<br />继承迭代器的所有特性</td></tr></tbody></table><p>关键特性：</p><ol><li><p><strong>包含关系</strong> ：生成器、迭代器、序列均属于可迭代对象。<br>生成器 ⊂ 迭代器 ⊂ <strong>可迭代对象</strong><br>序列 ⊂ <strong>可迭代对象</strong></p></li><li><p><strong>转换关系</strong>：  </p><ul><li>可迭代对象 → 迭代器：<code>iter(可迭代对象)</code>  </li><li>序列 → 迭代器：<code>iter(序列)</code>（如 <code>iter([1,2,3])</code>）</li></ul></li><li><p><strong>判断方法</strong>：</p><ul><li><strong>可迭代对象</strong>：<code>iter(obj)</code> 不报错即为可迭代（最可靠）</li><li><strong>迭代器</strong>：<code>isinstance(obj, Iterator)</code> 且实现 <code>__next__()</code></li><li><strong>生成器</strong>：<code>isinstance(obj, types.GeneratorType)</code></li></ul></li></ol><blockquote><p>⚠️ <strong>注意</strong>：  </p><ul><li>仅实现 <code>__getitem__()</code> 的类是可迭代对象，但 <code>isinstance(obj, Iterable)</code> 返回 <code>False</code>。  </li><li>迭代器必须同时实现 <code>__iter__()</code>（返回自身）和 <code>__next__()</code> 才能被正确识别。  </li><li>生成器是语法糖，本质是实现了 <code>__iter__()</code> 和 <code>__next__()</code> 的迭代器。</li></ul></blockquote><p>参考文献：</p><p><a href="https://blog.csdn.net/qq_23981335/article/details/105110398">Python详解可迭代对象（Iterable）、序列（Sequence）、迭代器（Iterator）、生成器（generator）_可迭代序列-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/2388146">【Python入门第十三讲】可迭代对象（Iterable）、迭代器（Iterator）和生成器（Generator）-腾讯云开发者社区-腾讯云</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基本数据类型</title>
      <link href="/2025/06/02/Python3%20%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2025/06/02/Python3%20%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-3-基本数据类型"><a href="#Python-3-基本数据类型" class="headerlink" title="Python 3 基本数据类型"></a>Python 3 基本数据类型</h1><blockquote><p><strong>本文中交替出现 Python 的编译模式和交互模式代码块，为便于区分，带有 <code>&gt;&gt;&gt;</code> 的 Python 代码块为交互模式，其余 Python 代码块为编译模式。</strong></p></blockquote><h2 id="一、数字类型（Number）"><a href="#一、数字类型（Number）" class="headerlink" title="一、数字类型（Number）"></a>一、数字类型（Number）</h2><h3 id="1-整型（int）"><a href="#1-整型（int）" class="headerlink" title="1. 整型（int）"></a>1. 整型（<code>int</code>）</h3><ul><li>任意大小整数（Python 3 中 <code>int</code> 没有范围限制）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">42</span></span><br><span class="line">b = -<span class="number">100</span></span><br><span class="line">c = <span class="number">99999999999999999999999999</span></span><br></pre></td></tr></table></figure><h3 id="2-浮点型（float）"><a href="#2-浮点型（float）" class="headerlink" title="2. 浮点型（float）"></a>2. 浮点型（<code>float</code>）</h3><ul><li>带小数点的数字，精度有限</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">3.1415</span></span><br><span class="line">y = -<span class="number">0.01</span></span><br></pre></td></tr></table></figure><h3 id="3-复数型（complex）"><a href="#3-复数型（complex）" class="headerlink" title="3. 复数型（complex）"></a>3. 复数型（<code>complex</code>）</h3><ul><li>用于科学计算，<code>j</code> 表示虚数单位</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z = <span class="number">2</span> + <span class="number">3j</span></span><br><span class="line"><span class="built_in">print</span>(z.real)  <span class="comment"># 实部 2.0</span></span><br><span class="line"><span class="built_in">print</span>(z.imag)  <span class="comment"># 虚部 3.0</span></span><br></pre></td></tr></table></figure><h2 id="二、字符串类型（str）"><a href="#二、字符串类型（str）" class="headerlink" title="二、字符串类型（str）"></a>二、字符串类型（<code>str</code>）</h2><p>由字符组成的文本，使用 <code>&#39;</code> 或 <code>&quot;</code> 包围，属于可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, Python!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])       <span class="comment"># &#x27;H&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])      <span class="comment"># &#x27;!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())  <span class="comment"># &#x27;HELLO, PYTHON!&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Python-转义字符"><a href="#Python-转义字符" class="headerlink" title="Python 转义字符"></a>Python 转义字符</h3><p>在需要在字符中使用特殊字符时，python 用反斜杠<code>\</code>转义字符。如下表：</p><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">反斜杠符号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">\n</td><td align="left">换行符</td></tr></tbody></table><p><img src="/assets/image-20250601223734247.png" alt="image-20250601223734247"></p><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>建议使用 f-strings (Python 3.6+)，这是最简洁和高效的方法，使用前缀 <code>f</code> 或 <code>F</code>，可以直接在字符串中嵌入变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>formatted_string = <span class="string">f&quot;My name is <span class="subst">&#123;name&#125;</span> and I am <span class="subst">&#123;age&#125;</span> years old.&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(formatted_string)</span><br><span class="line">My name <span class="keyword">is</span> Alice <span class="keyword">and</span> I am <span class="number">30</span> years old.</span><br></pre></td></tr></table></figure><h3 id="字符串内建方法"><a href="#字符串内建方法" class="headerlink" title="字符串内建方法"></a>字符串内建方法</h3><blockquote><p>tips:</p><ul><li>如果需要详细了解每个方法，请访问点击链接进行跳转。</li><li>我对自认为比较重要的方法进行了加粗，请重点关注。请先掌握加粗的部分！</li></ul></blockquote><table><thead><tr><th>序号</th><th>方法及链接</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td><strong><a href="https://www.runoob.com/python3/python3-string-capitalize.html">capitalize()</a></strong></td><td>将字符串的第一个字符转换为大写</td><td><code>&#39;hello&#39;.capitalize()</code> → <code>&#39;Hello&#39;</code></td></tr><tr><td>2</td><td><a href="https://www.runoob.com/python3/python3-string-center.html">center(width, fillchar)</a></td><td>返回一个指定宽度居中的字符串，使用指定字符填充</td><td><code>&#39;hi&#39;.center(6, &#39;*&#39;)</code> → <code>&#39;**hi**&#39;</code></td></tr><tr><td>3</td><td><strong><a href="https://www.runoob.com/python3/python3-string-count.html">count(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td>返回子字符串在指定范围内出现的次数</td><td><code>&#39;banana&#39;.count(&#39;a&#39;)</code> → <code>3</code></td></tr><tr><td>4</td><td><a href="https://www.runoob.com/python3/python3-string-decode.html">bytes.decode(encoding&#x3D;”utf-8”, errors&#x3D;”strict”)</a></td><td>解码 bytes 对象为字符串</td><td><code>b&#39;hello&#39;.decode(&#39;utf-8&#39;)</code> → <code>&#39;hello&#39;</code></td></tr><tr><td>5</td><td><a href="https://www.runoob.com/python3/python3-string-encode.html">encode(encoding&#x3D;’UTF-8’)</a></td><td>将字符串编码为指定格式的 bytes</td><td><code>&#39;你好&#39;.encode(&#39;utf-8&#39;)</code> → <code>b&#39;\xe4\xbd\xa0\xe5\xa5\xbd&#39;</code></td></tr><tr><td>6</td><td><strong><a href="https://www.runoob.com/python3/python3-string-endswith.html">endswith(suffix)</a></strong></td><td>检查是否以指定后缀结尾</td><td><code>&#39;test.py&#39;.endswith(&#39;.py&#39;)</code> → <code>True</code></td></tr><tr><td>7</td><td><a href="https://www.runoob.com/python3/python3-string-expandtabs.html">expandtabs(tabsize&#x3D;8)</a></td><td>将制表符 (<code>\t</code>) 替换为空格</td><td><code>&#39;a\tb&#39;.expandtabs(4)</code> → <code>&#39;a   b&#39;</code></td></tr><tr><td>8</td><td><a href="https://www.runoob.com/python3/python3-string-find.html">find(str)</a></td><td>查找子串出现的最小索引，找不到返回 -1</td><td><code>&#39;hello&#39;.find(&#39;e&#39;)</code> → <code>1</code></td></tr><tr><td>9</td><td><a href="https://www.runoob.com/python3/python3-string-index.html">index(str)</a></td><td>类似 find()，但找不到会抛出异常</td><td><code>&#39;hello&#39;.index(&#39;e&#39;)</code> → <code>1</code></td></tr><tr><td>10</td><td><a href="https://www.runoob.com/python3/python3-string-isalnum.html">isalnum()</a></td><td>判断是否只由字母和数字组成</td><td><code>&#39;abc123&#39;.isalnum()</code> → <code>True</code></td></tr><tr><td>11</td><td><a href="https://www.runoob.com/python3/python3-string-isalpha.html">isalpha()</a></td><td>判断是否只由字母组成</td><td><code>&#39;abc&#39;.isalpha()</code> → <code>True</code></td></tr><tr><td>12</td><td><a href="https://www.runoob.com/python3/python3-string-isdigit.html">isdigit()</a></td><td>判断是否只由数字组成</td><td><code>&#39;123&#39;.isdigit()</code> → <code>True</code></td></tr><tr><td>13</td><td><a href="https://www.runoob.com/python3/python3-string-islower.html">islower()</a></td><td>判断所有字母是否都是小写</td><td><code>&#39;abc&#39;.islower()</code> → <code>True</code></td></tr><tr><td>14</td><td><a href="https://www.runoob.com/python3/python3-string-isnumeric.html">isnumeric()</a></td><td>判断是否为纯数字字符</td><td><code>&#39;一二三&#39;.isnumeric()</code> → <code>True</code></td></tr><tr><td>15</td><td><a href="https://www.runoob.com/python3/python3-string-isspace.html">isspace()</a></td><td>判断是否只包含空白符</td><td><code>&#39;   &#39;.isspace()</code> → <code>True</code></td></tr><tr><td>16</td><td><a href="https://www.runoob.com/python3/python3-string-istitle.html">istitle()</a></td><td>判断字符串是否为标题格式</td><td><code>&#39;This Is A Title&#39;.istitle()</code> → <code>True</code></td></tr><tr><td>17</td><td><a href="https://www.runoob.com/python3/python3-string-isupper.html">isupper()</a></td><td>判断所有字母是否都是大写</td><td><code>&#39;ABC&#39;.isupper()</code> → <code>True</code></td></tr><tr><td>18</td><td><strong><a href="https://www.runoob.com/python3/python3-string-join.html">join(seq)</a></strong></td><td>使用指定分隔符连接序列元素</td><td><code>&#39;--&#39;.join([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code> → <code>&#39;a--b--c&#39;</code></td></tr><tr><td>19</td><td><strong><a href="https://www.runoob.com/python3/python3-string-len.html">len(string)</a></strong></td><td>获取字符串长度</td><td><code>len(&#39;hello&#39;)</code> → <code>5</code></td></tr><tr><td>20</td><td><a href="https://www.runoob.com/python3/python3-string-ljust.html">ljust(width, fillchar)</a></td><td>左对齐填充到指定宽度</td><td><code>&#39;hi&#39;.ljust(5, &#39;-&#39;)</code> → <code>&#39;hi---&#39;</code></td></tr><tr><td>21</td><td><a href="https://www.runoob.com/python3/python3-string-lower.html">lower()</a></td><td>转换为小写</td><td><code>&#39;HELLO&#39;.lower()</code> → <code>&#39;hello&#39;</code></td></tr><tr><td>22</td><td><strong><a href="https://www.runoob.com/python3/python3-string-lstrip.html">lstrip()</a></strong></td><td>删除左侧空格或指定字符</td><td><code>&#39;  hello&#39;.lstrip()</code> → <code>&#39;hello&#39;</code></td></tr><tr><td>23</td><td><a href="https://www.runoob.com/python3/python3-string-maketrans.html">maketrans()</a></td><td>创建字符映射表用于 translate()</td><td><code>str.maketrans(&#39;ae&#39;, &#39;12&#39;)</code></td></tr><tr><td>24</td><td><strong><a href="https://www.runoob.com/python3/python3-string-max.html">max(str)</a></strong></td><td>返回最大字符（按 ASCII 排序）</td><td><code>max(&#39;abc&#39;)</code> → <code>&#39;c&#39;</code></td></tr><tr><td>25</td><td><strong><a href="https://www.runoob.com/python3/python3-string-min.html">min(str)</a></strong></td><td>返回最小字符</td><td><code>min(&#39;abc&#39;)</code> → <code>&#39;a&#39;</code></td></tr><tr><td>26</td><td><strong><a href="https://www.runoob.com/python3/python3-string-replace.html">replace(old, new, max)</a></strong></td><td>替换子串，最多替换 max 次</td><td><code>&#39;aabb&#39;.replace(&#39;a&#39;, &#39;z&#39;, 1)</code> → <code>&#39;zabb&#39;</code></td></tr><tr><td>27</td><td><a href="https://www.runoob.com/python3/python3-string-rfind.html">rfind(str)</a></td><td>从右侧查找子串</td><td><code>&#39;hello&#39;.rfind(&#39;l&#39;)</code> → <code>3</code></td></tr><tr><td>28</td><td><a href="https://www.runoob.com/python3/python3-string-rindex.html">rindex(str)</a></td><td>从右查找子串，找不到报异常</td><td><code>&#39;hello&#39;.rindex(&#39;l&#39;)</code> → <code>3</code></td></tr><tr><td>29</td><td><a href="https://www.runoob.com/python3/python3-string-rjust.html">rjust(width, fillchar)</a></td><td>右对齐填充</td><td><code>&#39;hi&#39;.rjust(5, &#39;-&#39;)</code> → <code>&#39;---hi&#39;</code></td></tr><tr><td>30</td><td><strong><a href="https://www.runoob.com/python3/python3-string-rstrip.html">rstrip()</a></strong></td><td>删除右侧空格</td><td><code>&#39;hello   &#39;.rstrip()</code> → <code>&#39;hello&#39;</code></td></tr><tr><td>31</td><td><strong><a href="https://www.runoob.com/python3/python3-string-split.html">split(str, num)</a></strong></td><td>按分隔符分割字符串</td><td><code>&#39;a,b,c&#39;.split(&#39;,&#39;)</code> → <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td></tr><tr><td>32</td><td><strong><a href="https://www.runoob.com/python3/python3-string-splitlines.html">splitlines(keepends)</a></strong></td><td>按行切分，可保留换行符</td><td><code>&#39;a\nb&#39;.splitlines()</code> → <code>[&#39;a&#39;, &#39;b&#39;]</code></td></tr><tr><td>33</td><td><a href="https://www.runoob.com/python3/python3-string-startswith.html">startswith(str)</a></td><td>判断是否以子串开头</td><td><code>&#39;hello&#39;.startswith(&#39;he&#39;)</code> → <code>True</code></td></tr><tr><td>34</td><td><strong><a href="https://www.runoob.com/python3/python3-string-strip.html">strip(chars)</a></strong></td><td>删除两端空白</td><td><code>&#39;  hi  &#39;.strip()</code> → <code>&#39;hi&#39;</code></td></tr><tr><td>35</td><td><a href="https://www.runoob.com/python3/python3-string-swapcase.html">swapcase()</a></td><td>大小写互换</td><td><code>&#39;AbC&#39;.swapcase()</code> → <code>&#39;aBc&#39;</code></td></tr><tr><td>36</td><td><a href="https://www.runoob.com/python3/python3-string-title.html">title()</a></td><td>转换为标题格式</td><td><code>&#39;hello world&#39;.title()</code> → <code>&#39;Hello World&#39;</code></td></tr><tr><td>37</td><td><a href="https://www.runoob.com/python3/python3-string-translate.html">translate(table)</a></td><td>按映射表转换字符串</td><td><code>&#39;abc&#39;.translate(str.maketrans(&#39;a&#39;, &#39;1&#39;))</code> → <code>&#39;1bc&#39;</code></td></tr><tr><td>38</td><td><strong><a href="https://www.runoob.com/python3/python3-string-upper.html">upper()</a></strong></td><td>转换为大写</td><td><code>&#39;hello&#39;.upper()</code> → <code>&#39;HELLO&#39;</code></td></tr><tr><td>39</td><td><a href="https://www.runoob.com/python3/python3-string-zfill.html">zfill(width)</a></td><td>前面填充 0，使字符串长度为 width</td><td><code>&#39;7&#39;.zfill(3)</code> → <code>&#39;007&#39;</code></td></tr><tr><td>40</td><td><a href="https://www.runoob.com/python3/python3-string-isdecimal.html">isdecimal()</a></td><td>检查是否为十进制数字</td><td><code>&#39;123&#39;.isdecimal()</code> → <code>True</code></td></tr></tbody></table><h3 id="字符串重点建方法"><a href="#字符串重点建方法" class="headerlink" title="字符串重点建方法"></a>字符串重点建方法</h3><blockquote><p>可迭代对象在后续的文章里面会讲解</p></blockquote><h4 id="str-join"><a href="#str-join" class="headerlink" title="str.join()"></a><code>str.join()</code></h4><p><code>Python join()</code> 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.join(sequence)</span><br></pre></td></tr></table></figure><ul><li>sequence ：<strong>可迭代对象</strong>，要连接的元素序列。可迭代对象的内容必须是字符串</li><li>str : 字符串对象</li></ul><h5 id="示例1-无损数据压缩"><a href="#示例1-无损数据压缩" class="headerlink" title="示例1 无损数据压缩"></a><strong>示例1 无损数据压缩</strong></h5><p>数据压缩，要求返回字符串中的字母的数量。</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hkahjgjkghksjf</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1f1g2h3j3k3s1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compressString</span>(<span class="params">S</span>):</span><br><span class="line">    len_s = <span class="number">1</span></span><br><span class="line">    res = []</span><br><span class="line">    S += <span class="string">&#x27; &#x27;</span>  <span class="comment">## 处理最右边的边界问题</span></span><br><span class="line">    res_S = <span class="string">&#x27;&#x27;</span>   <span class="comment">## 最终压缩后的字符串</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(S)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> S[i] == S[i+<span class="number">1</span>]:</span><br><span class="line">            len_s += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append([S[i],len_s])</span><br><span class="line">            len_s = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    res_S = <span class="string">&quot;&quot;</span>.join(<span class="string">f&quot;<span class="subst">&#123;j[<span class="number">0</span>]&#125;</span><span class="subst">&#123;<span class="built_in">str</span>(j[<span class="number">1</span>])&#125;</span>&quot;</span> <span class="keyword">for</span> j <span class="keyword">in</span> res) <span class="comment">#使用推导式生成压缩后的字符串，给join函数传递一个可迭代对象(迭代器)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res_S <span class="keyword">if</span> <span class="built_in">len</span>(res_S) &lt; <span class="built_in">len</span>(S) - <span class="number">1</span> <span class="keyword">else</span> S[:<span class="built_in">len</span>(S)-<span class="number">1</span>] <span class="comment">#三元表达式</span></span><br><span class="line"></span><br><span class="line">S = <span class="string">&quot;ddaabbccddd&quot;</span></span><br><span class="line">result = compressString(S)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2a2b2c2d3</span><br></pre></td></tr></table></figure><h5 id="示例2-接受可迭代对象"><a href="#示例2-接受可迭代对象" class="headerlink" title="示例2 接受可迭代对象"></a><strong>示例2 接受可迭代对象</strong></h5><p>使用元组作为可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>symbol = <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>symbol.join(seq)</span><br><span class="line"><span class="string">&#x27;a-b-c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;.&quot;</span>.join(seq)</span><br><span class="line"><span class="string">&#x27;a.b.c&#x27;</span></span><br></pre></td></tr></table></figure><p>使用列表作为可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lis = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;.&quot;</span>.join(lis)</span><br><span class="line"><span class="string">&#x27;1.2.3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lis = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;.&quot;</span>.join(lis) <span class="comment">#报错，可迭代对象的内容必须是字符串</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: sequence item <span class="number">0</span>: expected <span class="built_in">str</span> instance, <span class="built_in">int</span> found</span><br></pre></td></tr></table></figure><p>使用迭代器(map对象) 作为可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lis = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;+&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,lis)))</span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,lis))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;map&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>使用生成器作为可迭代对象，生成器返回一个迭代器，本质上就是一个迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>gene = (<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(gene)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;generator&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;+&quot;</span>.join(gene))</span><br><span class="line"><span class="number">0</span>+<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>+<span class="number">6</span>+<span class="number">7</span>+<span class="number">8</span>+<span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="str-split"><a href="#str-split" class="headerlink" title="str.split()"></a><code>str.split()</code></h4><p><code>split() </code>方法通过指定分隔符对字符串进行切片，该方法将字符串分割成子字符串并返回一个由这些子字符串组成的列表。</p><p>如果第二个参数 num 有指定值，则分割为 num+1 个子字符串。</p><p><code>split()</code>方法特别适用于根据特定的分隔符将字符串拆分成多个部分。</p><p><strong>语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.split(<span class="built_in">str</span>=<span class="string">&quot;&quot;</span>, num=string.count(<span class="built_in">str</span>)).</span><br></pre></td></tr></table></figure><ul><li><p><code>str</code>  分隔符，<strong>默认</strong>为所有的空字符，包括空格<code>&quot; &quot;</code>、换行<code>&quot;\n&quot;</code>、制表符<code>&quot;\t&quot;</code>等。</p></li><li><p><code>num </code> 分割次数，如果设置了这个参数，则最多分割成 <code>maxsplit+1</code> 个子字符串。默认为 <code>-1</code>, 即分隔所有。</p></li></ul><p><strong>返回值</strong></p><p>返回分割后的字符串<strong>列表</strong></p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;this is string example....\nwow!!!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">str</span>.split())        <span class="comment"># 默认以空格 换行符 为分隔符</span></span><br><span class="line">[<span class="string">&#x27;this&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;example....&#x27;</span>, <span class="string">&#x27;wow!!!&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">str</span>.split(<span class="string">&#x27;i&#x27;</span>,<span class="number">1</span>))   <span class="comment"># 以 i 为分隔符</span></span><br><span class="line">[<span class="string">&#x27;th&#x27;</span>, <span class="string">&#x27;s is string example....\nwow!!!&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">str</span>.split(<span class="string">&#x27;w&#x27;</span>))     <span class="comment"># 以 w 为分隔符</span></span><br><span class="line">[<span class="string">&#x27;this is string example....\n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;!!!&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="三、布尔类型（bool）"><a href="#三、布尔类型（bool）" class="headerlink" title="三、布尔类型（bool）"></a>三、布尔类型（<code>bool</code>）</h2><ul><li>只有两个值：<code>True</code> 和 <code>False</code></li><li>实际上是 <code>int</code> 的子类：<code>True == 1</code>, <code>False == 0</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &gt; <span class="number">2</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;Hello&quot;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><hr><h2 id="四、序列类型（可迭代、可索引）"><a href="#四、序列类型（可迭代、可索引）" class="headerlink" title="四、序列类型（可迭代、可索引）"></a>四、序列类型（可迭代、可索引）</h2><h3 id="1-列表（list）可变"><a href="#1-列表（list）可变" class="headerlink" title="1. 列表（list）可变"></a>1. 列表（<code>list</code>）可变</h3><p><strong>属于可变数据类型</strong></p><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>使用嵌套列表即在列表里创建其它列表，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]  </span><br><span class="line">&gt;&gt;&gt; n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  </span><br><span class="line">&gt;&gt;&gt; x = [a, n]  </span><br><span class="line">&gt;&gt;&gt; x  </span><br><span class="line">[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]  </span><br><span class="line">&gt;&gt;&gt; x[<span class="number">0</span>]  </span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]  </span><br><span class="line">&gt;&gt;&gt; x[<span class="number">0</span>][<span class="number">1</span>]  </span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="切片访问"><a href="#切片访问" class="headerlink" title="切片访问"></a>切片访问</h4><p>扩展切片指的是这样的切片形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[start:stop:step]</span><br></pre></td></tr></table></figure><ul><li><p>其中<code>step</code>是一个非零整数</p></li><li><p>此时切片的行为可概括为：从<code>start</code>对应的位置出发，以<code>step</code>为步长索引序列，直至越过<code>stop</code>对应的位置(不包括<code>stop</code>)</p></li></ul><p>需要详细解释的是<code>step</code>分别为正数和负数的两种情况。</p><p><strong><code>step</code>为正数</strong></p><p>当<code>step</code>为正数时，切片行为很容易理解，<code>start</code>和<code>stop</code>的<strong>截断</strong>和<strong>缺省</strong>规则也与简单切片完全一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:-<span class="number">2</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><p><strong><code>step</code>为负数</strong></p><p>当<code>step</code>为负数时，切片将其解释为从<code>start</code>出发以步长<code>|step|</code><strong>逆序</strong>索引序列，此时，<code>start</code>和<code>stop</code>的<strong>截断</strong>依然遵循前述规则，但<strong>缺省</strong>发生一点变化，因为我们说过，在缺省的情况下，Python的行为是<strong>尽可能取最大区间</strong>，此时访问是<strong>逆序</strong>的，<code>start</code>应尽量取大，<code>stop</code>应尽量取小，才能保证区间最大，因此：</p><blockquote><p>按照扩充索引范围的观点，<code>start</code>的缺省值是<strong>无穷大()</strong>，<code>stop</code>的缺省值是<strong>无穷小()</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">5</span>::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">4</span>:-<span class="number">2</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">&gt;&gt;&gt;a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a[<span class="number">5</span>:<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&quot;Zhihu&quot;</span>, <span class="string">&quot;Taobao&quot;</span>, <span class="string">&quot;Wiki&quot;</span>]</span><br><span class="line">&gt;&gt;&gt;a[-<span class="number">1</span>:-<span class="number">6</span>:-<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;Wiki&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;a[-<span class="number">1</span>:-<span class="number">5</span>:-<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;Wiki&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;a[-<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="string">&#x27;Wiki&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="Python-列表脚本操作符"><a href="#Python-列表脚本操作符" class="headerlink" title="Python 列表脚本操作符"></a>Python 列表脚本操作符</h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><p>如下所示：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x, end&#x3D;” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><hr><h4 id="Python-列表函数"><a href="#Python-列表函数" class="headerlink" title="Python 列表函数"></a>Python 列表函数</h4><blockquote><p>tips:</p><ul><li>如果需要详细了解每个方法，请访问点击链接进行跳转。</li><li>我对自认为比较重要的方法进行了加粗，请重点关注。请先掌握加粗的部分！</li></ul></blockquote><table><thead><tr><th>序号</th><th>函数</th><th>含义与小示例</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.runoob.com/python/att-list-cmp.html">cmp(list1, list2)</a></td><td>比较两个列表的元素是否相等。📌 示例：<code>cmp([1, 2], [1, 2])</code> → 0（相等）⚠️ 仅适用于 Python 2，Python 3 中已移除。</td></tr><tr><td><strong>2</strong></td><td><a href="https://www.runoob.com/python/att-list-len.html"><strong>len(list)</strong></a></td><td>返回列表元素个数。📌 示例：<code>len([1, 2, 3])</code> → 3</td></tr><tr><td><strong>3</strong></td><td><a href="https://www.runoob.com/python/att-list-max.html"><strong>max(list)</strong></a></td><td>返回列表中最大值。📌 示例：<code>max([5, 9, 2])</code> → 9</td></tr><tr><td><strong>4</strong></td><td><a href="https://www.runoob.com/python/att-list-min.html"><strong>min(list)</strong></a></td><td>返回列表中最小值。📌 示例：<code>min([5, 9, 2])</code> → 2</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/python/att-list-list.html">list(seq)</a></td><td>将其他序列（如元组）转换为列表。📌 示例：<code>list((1, 2))</code> → <code>[1, 2]</code></td></tr></tbody></table><hr><h4 id="Python-列表内置方法"><a href="#Python-列表内置方法" class="headerlink" title="Python 列表内置方法"></a>Python 列表内置方法</h4><table><thead><tr><th>序号</th><th>方法</th><th>含义与小示例</th></tr></thead><tbody><tr><td><strong>9</strong></td><td><a href="https://www.runoob.com/python/att-list-sort.html"><strong>list.sort(cmp&#x3D;None, key&#x3D;None, reverse&#x3D;False)</strong></a></td><td>对列表原地排序，可指定规则。📌 示例：<code>lst = [3, 1, 2]; lst.sort()</code> → <code>[1, 2, 3]</code>💡 <code>key=str.lower</code> 可用于忽略大小写排序</td></tr><tr><td><strong>1</strong></td><td><a href="https://www.runoob.com/python/att-list-append.html"><strong>list.append(obj)</strong></a></td><td>在列表末尾添加一个元素。📌 示例：<code>lst = [1]; lst.append(2)</code> → <code>[1, 2]</code></td></tr><tr><td><strong>2</strong></td><td><a href="https://www.runoob.com/python/att-list-count.html"><strong>list.count(obj)</strong></a></td><td>返回某元素在列表中出现的次数。📌 示例：<code>[1, 2, 2].count(2)</code> → 2</td></tr><tr><td><strong>3</strong></td><td><a href="https://www.runoob.com/python/att-list-extend.html"><strong>list.extend(seq)</strong></a></td><td>将序列中元素逐一添加到列表。📌 示例：<code>[1].extend([2, 3])</code> → <code>[1, 2, 3]</code></td></tr><tr><td><strong>4</strong></td><td><a href="https://www.runoob.com/python/att-list-index.html"><strong>list.index(obj)</strong></a></td><td>返回某元素第一次出现的位置。📌 示例：<code>[3, 4, 5].index(4)</code> → 1</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/python/att-list-insert.html">list.insert(index, obj)</a></td><td>在指定位置插入元素。📌 示例：<code>lst = [1, 3]; lst.insert(1, 2)</code> → <code>[1, 2, 3]</code></td></tr><tr><td><strong>6</strong></td><td><a href="https://www.runoob.com/python/att-list-pop.html"><strong>list.pop([index&#x3D;-1])</strong></a></td><td>移除并返回指定索引的元素，默认是最后一个。📌 示例：<code>[1, 2, 3].pop()</code> → 返回 3，列表变为 <code>[1, 2]</code></td></tr><tr><td><strong>7</strong></td><td><a href="https://www.runoob.com/python/att-list-remove.html"><strong>list.remove(obj)</strong></a></td><td>移除列表中某元素的第一个匹配项。📌 示例：<code>[1, 2, 2].remove(2)</code> → <code>[1, 2]</code></td></tr><tr><td>8</td><td><a href="https://www.runoob.com/python/att-list-reverse.html">list.reverse()</a></td><td>将列表原地反转。📌 示例：<code>lst = [1, 2, 3]; lst.reverse()</code> → <code>[3, 2, 1]</code></td></tr></tbody></table><h4 id="较重要的列表内置方法"><a href="#较重要的列表内置方法" class="headerlink" title="较重要的列表内置方法"></a>较重要的列表内置方法</h4><h5 id="List-sort"><a href="#List-sort" class="headerlink" title="List sort()"></a>List sort()</h5><p><strong>描述</strong></p><p>sort() 函数用于对原列表进行<strong>排序</strong>，如果指定参数，则使用比较函数指定的比较函数。</p><p><strong>语法</strong></p><p>sort()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.sort( key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse – 排序规则，<strong>reverse &#x3D; True</strong> 降序， <strong>reverse &#x3D; False</strong> 升序（<strong>默认</strong>）。</li></ul><p><strong>返回值</strong></p><p>该方法没有返回值，但是会对列表的对象进行排序。</p><p><strong>综合示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 获取列表的第二个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">takeSecond</span>(<span class="params">elem</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random1 = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2 = [[<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">3</span>]]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 不指定元素，默认升序排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random1.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2</span><br><span class="line">[[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">1</span>]]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 指定以待排序元素的第二个元素为依据进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2.sort(key=takeSecond)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2</span><br><span class="line">[[<span class="number">4</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 降序排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random1</span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2</span><br><span class="line">[[<span class="number">4</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><p><code>key</code>也可以接受<code>lambda</code>匿名函数表达式，还是上一题，可以这样写，同样的效果。匿名函数接下来的文章会仔细讲。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2 = [[<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 指定以待排序元素的第二个元素为依据进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2.sort(key=<span class="keyword">lambda</span> element : element[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random2</span><br><span class="line">[[<span class="number">4</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h5 id="List-index"><a href="#List-index" class="headerlink" title="List index()"></a>List index()</h5><p><strong>描述</strong></p><p>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。</p><p><strong>语法</strong></p><p>index()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.index(x[, start[, end]])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>x– 查找的对象。</li><li>start– 可选，查找的起始位置。</li><li>end– 可选，查找的结束位置。</li></ul><p><strong>返回值</strong></p><p>该方法返回查找对象的索引位置，如果没有找到对象则抛出异常。</p><h5 id="List-insert"><a href="#List-insert" class="headerlink" title="List insert()"></a>List insert()</h5><p><strong>描述</strong></p><p>insert() 函数用于将指定对象插入列表的指定位置。</p><p><strong>语法</strong></p><p>insert()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.insert(index, obj)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>index – 对象obj需要插入的索引位置。</li><li>obj – 要插入列表中的对象。</li></ul><p><strong>返回值</strong></p><p>该方法没有返回值，但会在列表指定位置插入对象。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">1</span>, <span class="string">&#x27;Baidu&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="List-pop"><a href="#List-pop" class="headerlink" title="List pop()"></a>List pop()</h5><p><strong>描述</strong></p><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p><p><strong>语法</strong></p><p>pop()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.pop([index=-1])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>index – 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index&#x3D;-1，删除最后一个列表值。</li></ul><p><strong>返回值</strong></p><p>该方法返回从列表中移除的元素对象。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">1</span>, <span class="string">&#x27;Baidu&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;Baidu&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="List-remove"><a href="#List-remove" class="headerlink" title="List remove()"></a>List remove()</h5><p><strong>描述</strong></p><p>remove() 函数用于移除列表中某个值的第一个匹配项。</p><p><strong>语法</strong></p><p>remove()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.remove(obj)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>obj – 列表中要移除的对象。</li></ul><p><strong>返回值</strong></p><p>该方法没有返回值但是会移除列表中的某个值的第一个匹配项。</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="2-元组（tuple）不可变"><a href="#2-元组（tuple）不可变" class="headerlink" title="2. 元组（tuple）不可变"></a>2. 元组（<code>tuple</code>）不可变</h3><blockquote><p>Python 中的元组（tuple）是一种内置的数据结构，用于存储一组有序的元素。元组与列表类似，但它们的一个重要区别是元组是不可变的，即一旦创建，元组的元素就不能修改、添加或删除。这使得元组可以用作键或存储在集合等需要不可变类型的地方。</p></blockquote><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><p><strong>使用 <code>tuple()</code> 函数创建元组</strong></p><p>可以使用内置的 <code>tuple()</code> 函数将其他可迭代对象（如列表、字符串等）转换为元组：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_to_tuple = <span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(list_to_tuple)  <span class="comment"># 输出：(1, 2, 3)</span></span><br><span class="line"></span><br><span class="line">string_to_tuple = <span class="built_in">tuple</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(string_to_tuple)  <span class="comment"># 输出：(&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br></pre></td></tr></table></figure><p><strong>使用生成器表达式创建元组</strong></p><p>可以通过生成器表达式创建元组，但需要显式地使用 <code>tuple()</code> 函数，因为生成器表达式本身创建的是生成器对象：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">generator_tuple = <span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(generator_tuple)  <span class="comment"># 输出：(0, 1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><p><strong>示例代码汇总</strong></p><p>以下是一个完整的示例代码，展示了不同创建元组的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空元组</span></span><br><span class="line">empty_tuple = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;空元组: <span class="subst">&#123;empty_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建单个元素的元组</span></span><br><span class="line">single_element_tuple = (<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;单个元素的元组: <span class="subst">&#123;single_element_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个元素的元组</span></span><br><span class="line">multiple_elements_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;多个元素的元组: <span class="subst">&#123;multiple_elements_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动推断创建元组</span></span><br><span class="line">auto_tuple = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;自动推断创建的元组: <span class="subst">&#123;auto_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tuple() 函数创建元组</span></span><br><span class="line">list_to_tuple = <span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表转换为元组: <span class="subst">&#123;list_to_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">dir_to_tuple = <span class="built_in">tuple</span>(&#123;<span class="string">&#x27;laoda&#x27;</span>:<span class="number">24</span>,<span class="string">&#x27;laoer&#x27;</span>:<span class="number">10</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;字典转换为元组: <span class="subst">&#123;dir_to_tuple&#125;</span>&quot;</span>)<span class="comment">#仅仅储存key</span></span><br><span class="line"></span><br><span class="line">string_to_tuple = <span class="built_in">tuple</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;字符串转换为元组: <span class="subst">&#123;string_to_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套元组</span></span><br><span class="line">nested_tuple = (<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;嵌套元组: <span class="subst">&#123;nested_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成器表达式创建元组</span></span><br><span class="line">generator_tuple = <span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;生成器表达式创建的元组: <span class="subst">&#123;generator_tuple&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">空元组: ()</span></span><br><span class="line"><span class="string">单个元素的元组: (1,)</span></span><br><span class="line"><span class="string">多个元素的元组: (1, 2, 3)</span></span><br><span class="line"><span class="string">自动推断创建的元组: (1, 2, 3)</span></span><br><span class="line"><span class="string">列表转换为元组: (1, 2, 3)</span></span><br><span class="line"><span class="string">字典转换为元组: (&#x27;laoda&#x27;, &#x27;laoer&#x27;)</span></span><br><span class="line"><span class="string">字符串转换为元组: (&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"><span class="string">嵌套元组: (1, (2, 3), (4, 5, 6))</span></span><br><span class="line"><span class="string">生成器表达式创建的元组: (0, 1, 2, 3, 4)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="元组的方法"><a href="#元组的方法" class="headerlink" title="元组的方法"></a>元组的方法</h4><p><strong><code>count()</code> 方法</strong></p><p><code>count()</code> 方法用于统计指定元素在元组中出现的次数。</p><p><strong>语法：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="built_in">tuple</span>.count(element)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li><code>element</code>：需要统计出现次数的元素。</li></ul><p><strong>返回值</strong></p><ul><li>指定元素在元组中出现的次数。</li></ul><p><strong>示例</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">count_of_twos = my_tuple.count(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(count_of_twos)  <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>index()</code> 方法</li></ol><p><code>index()</code> 方法用于查找指定元素在元组中的第一次出现的位置（索引）。如果元素不存在，会抛出 <code>ValueError</code>。</p><p><strong>语法：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span>.index(element, start=<span class="number">0</span>, end=<span class="built_in">len</span>(<span class="built_in">tuple</span>))</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li><code>element</code>：需要查找的元素。</li><li><code>start</code>（可选）：搜索的起始位置，默认为0。</li><li><code>end</code>（可选）：搜索的结束位置，默认为元组的长度。</li></ul><p><strong>返回值：</strong></p><ul><li>指定元素在元组中第一次出现的位置。</li></ul><p><strong>示例：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">index_of_three = my_tuple.index(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(index_of_three)  <span class="comment"># 输出 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有起始和结束位置的示例</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">index_of_two_after_first = my_tuple.index(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(index_of_two_after_first)  <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure><h4 id="元组的切片"><a href="#元组的切片" class="headerlink" title="元组的切片"></a>元组的切片</h4><p>元组支持切片操作来访问其子集：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 输出 (20, 30)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[:<span class="number">2</span>])   <span class="comment"># 输出 (10, 20)</span></span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">3</span>:])   <span class="comment"># 输出 (40, 50)</span></span><br></pre></td></tr></table></figure><h4 id="元组的嵌套"><a href="#元组的嵌套" class="headerlink" title="元组的嵌套"></a>元组的嵌套</h4><p>元组可以包含其他元组（或列表、字典等），形成嵌套结构：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nested_tuple = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(nested_tuple[<span class="number">0</span>])    <span class="comment"># 输出 (1, 2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(nested_tuple[<span class="number">1</span>][<span class="number">1</span>]) <span class="comment"># 输出 5</span></span><br></pre></td></tr></table></figure><h4 id="元组的解包"><a href="#元组的解包" class="headerlink" title="元组的解包"></a>元组的解包</h4><p>元组的解包（Tuple Unpacking）是Python中的一种语法特性，允许将元组中的元素直接赋值给多个变量。解包可以提高代码的可读性和简洁性，特别是在函数返回多个值的情况下。以下是关于元组解包的详细解释和示例。</p><h5 id="基本解包"><a href="#基本解包" class="headerlink" title="基本解包"></a>基本解包</h5><p>当元组的元素数量与变量数量一致时，可以直接解包元组：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a, b, c = my_tuple</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出 1</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出 2</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure><h5 id="使用-运算符解包"><a href="#使用-运算符解包" class="headerlink" title="使用 * 运算符解包"></a>使用 <code>*</code> 运算符解包</h5><p>当变量数量不确定时，可以使用 <code>*</code> 运算符来捕获剩余的元素。<code>*</code> 前缀表示该变量将接收一个列表，包含元组中所有未分配的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">a, b, *rest = my_tuple</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)    <span class="comment"># 输出 1</span></span><br><span class="line"><span class="built_in">print</span>(b)    <span class="comment"># 输出 2</span></span><br><span class="line"><span class="built_in">print</span>(rest) <span class="comment"># 输出 [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>你也可以将 <code>*</code> 运算符用于中间位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">a, *middle, b = my_tuple</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)      <span class="comment"># 输出 1</span></span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 输出 5</span></span><br><span class="line"><span class="built_in">print</span>(middle) <span class="comment"># 输出 [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h5 id="嵌套解包"><a href="#嵌套解包" class="headerlink" title="嵌套解包"></a>嵌套解包</h5><p>当元组中包含嵌套元组时，可以进行嵌套解包：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>), <span class="number">4</span>)</span><br><span class="line">a, (b, c), d = my_tuple</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出 1</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出 2</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出 3</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure><h5 id="在函数返回值中的解包"><a href="#在函数返回值中的解包" class="headerlink" title="在函数返回值中的解包"></a>在函数返回值中的解包</h5><p>函数返回多个值时，可以直接解包这些值：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_coordinates</span>():</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">x, y = get_coordinates()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 输出 10</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># 输出 20</span></span><br></pre></td></tr></table></figure><h4 id="元组的遍历"><a href="#元组的遍历" class="headerlink" title="元组的遍历"></a>元组的遍历</h4><p>在Python中，元组的遍历（iteration）非常简单，可以使用多种方法来遍历元组中的元素。以下是几种常见的遍历元组的方法及示例代码。</p><h5 id="使用-for-循环遍历元组"><a href="#使用-for-循环遍历元组" class="headerlink" title="使用 for 循环遍历元组"></a><strong>使用 <code>for</code> 循环遍历元组</strong></h5><p>最常见的方法是使用 <code>for</code> 循环直接遍历元组中的元素：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> my_tuple:</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h5 id="使用-enumerate-函数"><a href="#使用-enumerate-函数" class="headerlink" title="使用 enumerate() 函数"></a><strong>使用 <code>enumerate()</code> 函数</strong></h5><p><code>enumerate()</code> 函数在遍历元组时，同时获取元素的索引和值：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(my_tuple):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Index: <span class="subst">&#123;index&#125;</span>, Element: <span class="subst">&#123;element&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Index: <span class="number">0</span>, Element: <span class="number">1</span></span><br><span class="line">Index: <span class="number">1</span>, Element: <span class="number">2</span></span><br><span class="line">Index: <span class="number">2</span>, Element: <span class="number">3</span></span><br><span class="line">Index: <span class="number">3</span>, Element: <span class="number">4</span></span><br><span class="line">Index: <span class="number">4</span>, Element: <span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="使用列表推导式"><a href="#使用列表推导式" class="headerlink" title="使用列表推导式"></a><strong>使用列表推导式</strong></h5><p>虽然列表推导式通常用于生成列表，但也可以用于遍历元组并执行操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每个元素</span></span><br><span class="line">[<span class="built_in">print</span>(element) <span class="keyword">for</span> element <span class="keyword">in</span> my_tuple]</span><br><span class="line"><span class="comment"># 打印列表</span></span><br><span class="line"><span class="built_in">print</span>([element <span class="keyword">for</span> element <span class="keyword">in</span> my_tuple])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><h5 id="遍历包含嵌套元组的元组"><a href="#遍历包含嵌套元组的元组" class="headerlink" title="遍历包含嵌套元组的元组"></a><strong>遍历包含嵌套元组的元组</strong></h5><p>如果元组中包含嵌套元组，可以使用递归的方法遍历所有元素：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归打印</span></span><br><span class="line">nest_tuple = ((<span class="number">1</span>,<span class="number">2</span>,(<span class="number">3</span>,<span class="number">4</span>)),(<span class="number">5</span>,<span class="number">6</span>),(<span class="number">7</span>,<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_nest_tuple</span>(<span class="params">Nest_tuple</span>):</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> Nest_tuple:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(element,<span class="built_in">tuple</span>):</span><br><span class="line">print_nest_tuple(element)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(element)</span><br><span class="line"></span><br><span class="line">print_nest_tuple(nest_tuple)</span><br></pre></td></tr></table></figure><p>同理，如果想要打印嵌套的列表，只需要把<code>if isinstance(element,tuple):</code>换成<code>if isinstance(element,list):</code>即可。</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h4 id="元组的不可变性"><a href="#元组的不可变性" class="headerlink" title="元组的不可变性"></a>元组的不可变性</h4><p>在Python中，字典是一种键值对的集合，键用于标识对应的值。为了保证字典的性能和正确性，字典的键必须是不可变的，这意味着键的<code>哈希值</code>在整个生命周期中不能改变。下面是对这个概念的详细解释。</p><h5 id="哈希值与不可变性"><a href="#哈希值与不可变性" class="headerlink" title="哈希值与不可变性"></a>哈希值与不可变性</h5><ol><li><strong>哈希值(Hash)</strong>：哈希值是通过哈希函数对对象进行运算后得到的一个整数值。这个值用于在哈希表（如字典）中快速查找键对应的值。</li><li><strong>不可变性</strong>：为了确保哈希值不变，键必须是不可变对象。不可变对象在创建后其状态不能被修改，包括其值和哈希值。</li></ol><h5 id="为什么字典的键必须是不可变的"><a href="#为什么字典的键必须是不可变的" class="headerlink" title="为什么字典的键必须是不可变的"></a>为什么字典的键必须是不可变的</h5><ol><li><strong>哈希表工作原理</strong>：<ul><li>字典内部使用哈希表实现。哈希表使用哈希值来快速定位存储数据的位置。</li><li>当我们使用键查找值时，Python会对键调用哈希函数，得到哈希值，并根据这个值快速找到对应的存储位置。</li></ul></li><li><strong>哈希值不变的重要性</strong>：<ul><li>如果字典键的哈希值改变，哈希表将无法正确定位该键的位置，导致查找、插入和删除操作的错误。</li><li>为了保持哈希值的稳定性，字典键必须是不可变对象（例如元组、字符串、数字）。</li></ul></li></ol><h5 id="不可变对象的例子"><a href="#不可变对象的例子" class="headerlink" title="不可变对象的例子"></a>不可变对象的例子</h5><p>以下是一些不可变对象的例子，它们可以作为字典的键：</p><ul><li>数字（如整数、浮点数）</li><li>字符串</li><li>元组（包含不可变对象的元组）</li></ul><h5 id="可变对象的例子"><a href="#可变对象的例子" class="headerlink" title="可变对象的例子"></a>可变对象的例子</h5><p>可变对象在创建后可以改变其状态，因此不能作为字典的键：</p><ul><li>列表</li><li>字典</li><li>集合</li></ul><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>使用不可变对象作为字典键</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用整数作为键</span></span><br><span class="line">my_dict = &#123;<span class="number">1</span>: <span class="string">&quot;one&quot;</span>, <span class="number">2</span>: <span class="string">&quot;two&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字符串作为键</span></span><br><span class="line">my_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用元组作为键</span></span><br><span class="line">my_dict = &#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="string">&quot;point1&quot;</span>, (<span class="number">3</span>, <span class="number">4</span>): <span class="string">&quot;point2&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>尝试使用可变对象作为字典键</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尝试使用列表作为键会抛出TypeError</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    my_dict = &#123;[<span class="number">1</span>, <span class="number">2</span>]: <span class="string">&quot;point1&quot;</span>&#125;</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-字符串（str）是不可变序列（见上）"><a href="#3-字符串（str）是不可变序列（见上）" class="headerlink" title="3. 字符串（str）是不可变序列（见上）"></a>3. 字符串（<code>str</code>）是不可变序列（见上）</h3><h3 id="4-range（range-start-stop-step-）"><a href="#4-range（range-start-stop-step-）" class="headerlink" title="4. range（range(start, stop[, step])）"></a>4. range（<code>range(start, stop[, step])</code>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(r)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;range&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(r,<span class="built_in">range</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="五、集合类型（set、frozenset）"><a href="#五、集合类型（set、frozenset）" class="headerlink" title="五、集合类型（set、frozenset）"></a>五、集合类型（<code>set</code>、<code>frozenset</code>）</h2><h3 id="1-集合（set）：无序、唯一元素，可变"><a href="#1-集合（set）：无序、唯一元素，可变" class="headerlink" title="1. 集合（set）：无序、唯一元素，可变"></a>1. 集合（<code>set</code>）：无序、唯一元素，可变</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s.add(<span class="number">2</span>)      <span class="comment"># 不变</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)      <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="什么是-set（集合）？"><a href="#什么是-set（集合）？" class="headerlink" title="什么是 set（集合）？"></a>什么是 <code>set</code>（集合）？</h4><p>在 Python 中，<strong>集合（set）是一种无序、不可重复的元素集合</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个集合</span></span><br><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_set)  <span class="comment"># 输出: &#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure><h4 id="特性总结："><a href="#特性总结：" class="headerlink" title="特性总结："></a>特性总结：</h4><ul><li>✅ 元素唯一，不允许重复。</li><li>❌ 无序，不能通过索引访问。</li><li>🔁 支持集合运算（交集、并集、差集等）。</li><li>📌 可变（可以添加、删除元素）。</li></ul><hr><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用花括号</span></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 set() 函数</span></span><br><span class="line">s2 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">s3 = <span class="built_in">set</span>(<span class="string">&quot;hello&quot;</span>)  <span class="comment"># &#123;&#x27;e&#x27;, &#x27;h&#x27;, &#x27;l&#x27;, &#x27;o&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>注意：空集合要用 <code>set()</code>，不能用 <code>&#123;&#125;</code>，后者是空字典。</p><hr><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">B = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th>语法</th><th>示例</th></tr></thead><tbody><tr><td>并集</td><td>&#96;A</td><td>B<code>或</code>A.union(B)&#96;</td></tr><tr><td>交集</td><td><code>A &amp; B</code> 或 <code>A.intersection(B)</code></td><td><code>&#123;3, 4&#125;</code></td></tr><tr><td>差集</td><td><code>A - B</code> 或 <code>A.difference(B)</code></td><td><code>&#123;1, 2&#125;</code></td></tr><tr><td>对称差集</td><td><code>A ^ B</code> 或 <code>A.symmetric_difference(B)</code></td><td><code>&#123;1, 2, 5, 6&#125;</code></td></tr></tbody></table><hr><h4 id="判断子集-超集-相交"><a href="#判断子集-超集-相交" class="headerlink" title="判断子集&#x2F;超集&#x2F;相交"></a>判断子集&#x2F;超集&#x2F;相交</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A.issubset(B)         <span class="comment"># A 是否是 B 的子集</span></span><br><span class="line">A.issuperset(B)       <span class="comment"># A 是否是 B 的超集</span></span><br><span class="line">A.isdisjoint(B)       <span class="comment"># A 与 B 是否没有交集</span></span><br></pre></td></tr></table></figure><hr><h4 id="集合不能包含可变元素（如列表、字典）"><a href="#集合不能包含可变元素（如列表、字典）" class="headerlink" title="集合不能包含可变元素（如列表、字典）"></a>集合不能包含可变元素（如列表、字典）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># s.add([1, 2, 3])  # ❌ 报错：unhashable type: &#x27;list&#x27;</span></span><br></pre></td></tr></table></figure><hr><h4 id="常用方法与操作"><a href="#常用方法与操作" class="headerlink" title="常用方法与操作"></a>常用方法与操作</h4><table><thead><tr><th>方法</th><th>含义与示例</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td><td>向集合中添加一个元素。<br /><code>s = &#123;1, 2&#125;; s.add(3); print(s)  # &#123;1, 2, 3&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td><td>清空集合中所有元素。<br /><code>s = &#123;1, 2&#125;; s.clear(); print(s)  # set()</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td><td>返回集合的浅拷贝。<br /><code>s1 = &#123;1, 2&#125;; s2 = s1.copy(); print(s2)  # &#123;1, 2&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td><td>返回当前集合与其他集合的差集。<br /><code>s1 = &#123;1, 2, 3&#125;; s2 = &#123;2, 3&#125;; print(s1.difference(s2))  # &#123;1&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td><td>从当前集合中移除同时在指定集合出现的元素。<br /><code>s1 = &#123;1, 2, 3&#125;; s1.difference_update(&#123;2&#125;); print(s1)  # &#123;1, 3&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td><td>删除指定元素，如果不存在不报错。<br /><code>s = &#123;1, 2&#125;; s.discard(2); print(s)  # &#123;1&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td><td>返回两个集合的交集。<br /><code>s1 = &#123;1, 2&#125;; s2 = &#123;2, 3&#125;; print(s1.intersection(s2))  # &#123;2&#125;</code></td></tr><tr><td><strong><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></strong></td><td>保留集合中与指定集合交集的部分。<br /><code>s1 = &#123;1, 2, 3&#125;; s1.intersection_update(&#123;2, 3, 4&#125;); print(s1)  # &#123;2, 3&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td><td>判断两个集合是否没有交集。<br /><code>&#123;1, 2&#125;.isdisjoint(&#123;3, 4&#125;)  # True</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td><td>判断当前集合是否为指定集合的子集。<br /><code>&#123;1, 2&#125;.issubset(&#123;1, 2, 3&#125;)  # True</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td><td>判断当前集合是否为指定集合的超集。<br /><code>&#123;1, 2, 3&#125;.issuperset(&#123;1, 2&#125;)  # True</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td><td>随机删除并返回一个元素。<br /><code>s = &#123;1, 2, 3&#125;; s.pop()  # 返回某个元素，并将其移除</code></td></tr><tr><td><strong><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></strong></td><td>移除指定元素，若不存在则抛出异常。<br /><code>s = &#123;1, 2&#125;; s.remove(1); print(s)  # &#123;2&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td><td>返回两个集合的对称差集（不重复部分。<br /><code>&#123;1, 2, 3&#125;.symmetric_difference(&#123;3, 4&#125;)  # &#123;1, 2, 4&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td><td>用两个集合的对称差集更新当前集合。<br /><code>s = &#123;1, 2, 3&#125;; s.symmetric_difference_update(&#123;2, 4&#125;); print(s)  # &#123;1, 3, 4&#125;</code></td></tr><tr><td><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td><td>返回两个集合的并集。<br /><code>&#123;1, 2&#125;.union(&#123;2, 3&#125;)  # &#123;1, 2, 3&#125;</code></td></tr><tr><td><strong><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></strong></td><td>向集合添加多个元素。<br /><code>s = &#123;1&#125;; s.update([2, 3]); print(s)  # &#123;1, 2, 3&#125;</code></td></tr><tr><td><strong><a href="https://www.runoob.com/python3/python3-string-len.html">len()</a></strong></td><td>返回集合中元素的个数。<br /><code>len(&#123;1, 2, 3&#125;)  # 3</code></td></tr></tbody></table><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ol><li><p><strong>去除字符串中重复字符：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;helloooworld&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(s))  <span class="comment"># &#123;&#x27;e&#x27;, &#x27;d&#x27;, &#x27;h&#x27;, &#x27;o&#x27;, &#x27;l&#x27;, &#x27;r&#x27;, &#x27;w&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>两个列表的交集：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(a) &amp; <span class="built_in">set</span>(b))  <span class="comment"># &#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>示例：去除重复元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">unique = <span class="built_in">set</span>(nums)</span><br><span class="line"><span class="built_in">print</span>(unique)  <span class="comment"># 输出: &#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-冻结集合（frozenset）：不可变集合"><a href="#2-冻结集合（frozenset）：不可变集合" class="headerlink" title="2. 冻结集合（frozenset）：不可变集合"></a>2. 冻结集合（<code>frozenset</code>）：不可变集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs = <span class="built_in">frozenset</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment"># fs.add(4)  # ❌ 会报错</span></span><br></pre></td></tr></table></figure><p>集合支持交并差等集合操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a | b)  <span class="comment"># 并集 &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)  <span class="comment"># 交集 &#123;3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="六、映射类型：字典（dict）"><a href="#六、映射类型：字典（dict）" class="headerlink" title="六、映射类型：字典（dict）"></a>六、映射类型：字典（<code>dict</code>）</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><table><thead><tr><th>数据类型</th><th>内容</th></tr></thead><tbody><tr><td>可变数据类型</td><td>List（列表）、Dictionary（字典）、Set（集合）</td></tr><tr><td>不可变数据类型</td><td>Number（数字）、String（字符串）、Tuple（元组）</td></tr></tbody></table><p>字典是一种<strong>可变数据类型</strong>，是通过<strong>哈希表</strong>实现的，所以具有以下性质</p><p><strong>字典的键</strong>： </p><ul><li><strong>不可变性</strong>：索引，必须为不可变数据类型（哈希值不变）。可以用数字，字符串或元组充当，而用列表就不行.</li><li><strong>唯一性</strong>：不允许同一个键出现两次</li><li><strong>实时性</strong>：创建时如果同一个键被赋值两次，后一个值会被记住</li></ul><p><strong>字典的值</strong>：可以为任意数据类型</p><p>格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2, key3 : value3 &#125;</span><br></pre></td></tr></table></figure><p>键值对结构（key-value）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;name&#x27;</span>])     <span class="comment"># &#x27;Alice&#x27;</span></span><br><span class="line">d[<span class="string">&#x27;age&#x27;</span>] += <span class="number">1</span></span><br><span class="line">d[<span class="string">&#x27;city&#x27;</span>] = <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d)             <span class="comment"># &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 21, &#x27;city&#x27;: &#x27;Beijing&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><ol><li>直接创建</li></ol><p><code>dic = &#123;&#125;</code></p><ol start="2"><li>内建函数 <code>dict() </code>创建</li></ol><p><code>emptydic = dict()</code></p><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><table><thead><tr><th>内置函数</th><th>作用</th><th>实例</th></tr></thead><tbody><tr><td><code>len(dict)</code></td><td>计算字典元素个数，即键的总数。</td><td>&gt;&gt;&gt; tinydict &#x3D; {‘Name’: ‘Runoob’, ‘Age’: 7, ‘Class’: ‘First’}<br/>&gt;&gt;&gt; len(tinydict)<br/>3</td></tr><tr><td><code>str(dict)</code></td><td>输出字典，可以打印的字符串表示。</td><td>&gt;&gt;&gt; tinydict &#x3D; {‘Name’: ‘Runoob’, ‘Age’: 7, ‘Class’: ‘First’}<br/>&gt;&gt;&gt; str(tinydict)<br/>“{‘Name’: ‘Runoob’, ‘Class’: ‘First’, ‘Age’: 7}”</td></tr></tbody></table><h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><blockquote><p>tips:</p><ul><li>如果需要详细了解每个方法，请访问点击链接进行跳转。</li><li>我对自认为比较重要的方法进行了加粗，请重点关注。请先掌握加粗的部分！</li></ul></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th><th>返回值</th></tr></thead><tbody><tr><td align="left"><strong><a href="https://www.runoob.com/python3/python3-att-dictionary-in.html"><code>key in dict</code></a></strong></td><td align="left">如果键在字典dict里返回true，否则返回false</td><td>bool</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python3/python3-att-dictionary-update.html"><code>dict.update(dict2)</code></a></strong></td><td align="left">把字典dict2的键&#x2F;值对更新到dict里</td><td></td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python3/python3-att-dictionary-get.html"><code>dict.get(key, default=None)</code></a></strong></td><td align="left">返回指定键的值，如果键不在字典中返回 default 设置的默认值</td><td>指定键的值</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python3/python3-att-dictionary-setdefault.html"><code>dict.setdefault(key, default=None)</code></a></strong></td><td align="left">和get()类似, 但如果键不存在于字典中，将会<strong>添加键并将值设为default</strong></td><td></td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html"><code>dict.fromkeys(seq[, value])</code></a></strong></td><td align="left">创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td><td>dic</td></tr><tr><td align="left"><code>dic.clear()</code></td><td align="left">删除字典内所有元素</td><td>无</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-copy.html"><code>dict.copy()</code></a></td><td align="left">返回一个字典的<strong>深浅复制</strong></td><td>dic</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-items.html"><code>dict.items()</code></a></td><td align="left">以<strong>列表</strong>返回一个视图对象</td><td>list</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-keys.html"><code>dict.keys()</code></a></td><td align="left">返回一个<strong>视图对象(可迭代对象)</strong></td><td>可迭代对象</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python3/python3-att-dictionary-values.html"><code>dict.values()</code></a></strong></td><td align="left">返回一个<strong>视图对象(可迭代对象)</strong></td><td>可迭代对象</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-pop.html">pop(key,default])</a></td><td align="left">删除字典 key（键）所对应的值，返回被删除的值。</td><td>被删除的值</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-popitem.html"><code>popitem()</code></a></td><td align="left">返回<strong>并删除</strong>字典中的最后一对键和值。</td><td></td></tr></tbody></table><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a><strong>示例</strong></h3><p>数据压缩，要求返回字符串中的字母的数量并按照<code>a-z</code>排序。</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hkahjgjkghksjf</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1f1g2h3j3k3s1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">S</span>) :</span><br><span class="line">    counts = &#123;c: S.count(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">set</span>(S)&#125;</span><br><span class="line">    <span class="built_in">print</span>(counts)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span><span class="subst">&#123;counts[c]&#125;</span>&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">sorted</span>(counts.keys()))<span class="comment">#对键进行排序</span></span><br><span class="line">            </span><br><span class="line">S = <span class="string">&quot;ddaabbccddd&quot;</span></span><br><span class="line">result = count_sort(S)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;d&#x27;: 5, &#x27;c&#x27;: 2, &#x27;a&#x27;: 2, &#x27;b&#x27;: 2&#125;</span><br><span class="line">a2b2c2d5</span><br></pre></td></tr></table></figure><h2 id="七、None-类型（空值）"><a href="#七、None-类型（空值）" class="headerlink" title="七、None 类型（空值）"></a>七、None 类型（空值）</h2><ul><li>表示“没有值”的特殊对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;变量没有值&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="八、类型转换（常用转换函数）"><a href="#八、类型转换（常用转换函数）" class="headerlink" title="八、类型转换（常用转换函数）"></a>八、类型转换（常用转换函数）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&quot;42&quot;</span>)         <span class="comment"># 转换为整数 42</span></span><br><span class="line"><span class="built_in">float</span>(<span class="string">&quot;3.14&quot;</span>)     <span class="comment"># 转换为浮点数 3.14</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">123</span>)          <span class="comment"># 转换为字符串 &#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>)       <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>])    <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"><span class="built_in">dict</span>([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)])  <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="类型判断与检查"><a href="#类型判断与检查" class="headerlink" title="类型判断与检查"></a>类型判断与检查</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">42</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))             <span class="comment"># &lt;class &#x27;int&#x27;&gt; 判断类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(x, <span class="built_in">int</span>))  <span class="comment"># True 是否为某个类型的实例</span></span><br></pre></td></tr></table></figure><h2 id="总结表格："><a href="#总结表格：" class="headerlink" title="总结表格："></a>总结表格：</h2><table><thead><tr><th>类型名称</th><th>类名</th><th>是否可变</th><th>示例</th></tr></thead><tbody><tr><td>整数</td><td><code>int</code></td><td>❌</td><td><code>42</code></td></tr><tr><td>浮点数</td><td><code>float</code></td><td>❌</td><td><code>3.14</code></td></tr><tr><td>复数</td><td><code>complex</code></td><td>❌</td><td><code>2 + 3j</code></td></tr><tr><td>布尔值</td><td><code>bool</code></td><td>❌</td><td><code>True</code>, <code>False</code></td></tr><tr><td>字符串</td><td><code>str</code></td><td>❌</td><td><code>&quot;hello&quot;</code></td></tr><tr><td>列表</td><td><code>list</code></td><td>✅</td><td><code>[1, 2, 3]</code></td></tr><tr><td>元组</td><td><code>tuple</code></td><td>❌</td><td><code>(1, 2, 3)</code></td></tr><tr><td>集合</td><td><code>set</code></td><td>✅</td><td><code>&#123;1, 2, 3&#125;</code></td></tr><tr><td>冻结集合</td><td><code>frozenset</code></td><td>❌</td><td><code>frozenset([1, 2, 3])</code></td></tr><tr><td>字典</td><td><code>dict</code></td><td>✅</td><td><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</code></td></tr><tr><td>None 类型</td><td><code>NoneType</code></td><td>❌</td><td><code>None</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 一些实用的模块</title>
      <link href="/2025/06/02/Python3%20%E5%AE%9E%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
      <url>/2025/06/02/Python3%20%E5%AE%9E%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-一些实用的模块"><a href="#Python3-一些实用的模块" class="headerlink" title="Python3 一些实用的模块"></a>Python3 一些实用的模块</h1><blockquote><p><strong>本文中交替出现 Python 的编译模式和交互模式代码块，为便于区分，带有 <code>&gt;&gt;&gt;</code> 的 Python 代码块为交互模式，其余 Python 代码块为编译模式。</strong></p></blockquote><h2 id="掌握一些实用的库"><a href="#掌握一些实用的库" class="headerlink" title="掌握一些实用的库"></a><strong>掌握一些实用的库</strong></h2><p><strong>学会使用一些库，可以避免理论计算，直接得出答案。这里举两个例子：</strong></p><h3 id="例子1：lcm-gcd"><a href="#例子1：lcm-gcd" class="headerlink" title="例子1：lcm gcd"></a><strong>例子1：<code>lcm</code> <code>gcd</code></strong></h3><p><strong>要求计算两个数<code>a</code>和<code>b</code>的最大公约数、最小公倍数。</strong></p><p><strong>这里底层是使用欧几里得的辗转相除法，不断递归实现的，大二的数据结构和算法会讲解。但是主播说了大一考语法，所以可以直接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算最大公约数</span></span><br><span class="line">gcd_value = math.gcd(<span class="number">24</span>, <span class="number">36</span>)<span class="comment"># 结果：12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算最小公倍数（需自定义函数）</span></span><br><span class="line">lcm_value = math.lcm(<span class="number">24</span>, <span class="number">36</span>)<span class="comment"># 结果：72 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大公约数: <span class="subst">&#123;gcd_value&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最小公倍数: <span class="subst">&#123;lcm_value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>从而避免了如下抽象难以理解的底层算法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用欧几里得算法计算最大公约数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于GCD计算最小公倍数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">or</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a * b) // gcd(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">num1 = <span class="number">24</span></span><br><span class="line">num2 = <span class="number">36</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大公约数: <span class="subst">&#123;gcd(num1, num2)&#125;</span>&quot;</span>)  <span class="comment"># 输出: 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最小公倍数: <span class="subst">&#123;lcm(num1, num2)&#125;</span>&quot;</span>)  <span class="comment"># 输出: 72</span></span><br></pre></td></tr></table></figure><p><strong>所以大一学python语法暂时不需要理解，会使用即可，想学算法的可以私下下功夫。</strong></p><h3 id="例子2：计算闰年"><a href="#例子2：计算闰年" class="headerlink" title="例子2：计算闰年"></a><strong>例子2：计算闰年</strong></h3><p><strong>在 Python 中，计算闰年可以使用标准库中的 <code>calendar.isleap()</code> 函数，或者通过自定义算法实现。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">year = <span class="number">2024</span></span><br><span class="line">is_leap = calendar.isleap(year)  <span class="comment"># True 或 False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span> 是闰年吗？<span class="subst">&#123;is_leap&#125;</span>&quot;</span>)  <span class="comment"># 输出: 2024 是闰年吗？True</span></span><br></pre></td></tr></table></figure><p><strong>可以避免写繁琐的如下代码：</strong></p><p><strong>闰年判断规则：</strong></p><ul><li><strong>年份能被 4 整除；</strong></li><li><strong>但如果年份能被 100 整除，则不是闰年；</strong></li><li><strong>然而，如果年份能被 400 整除，则仍是闰年</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断给定年份是否为闰年&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> year % <span class="number">100</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> year % <span class="number">400</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line">year = <span class="number">2024</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span> 是闰年吗？<span class="subst">&#123;is_leap_year(year)&#125;</span>&quot;</span>)  <span class="comment"># 输出: 2024 是闰年吗？True</span></span><br></pre></td></tr></table></figure><p><strong>所以不需要理解闰年是什么，只需要会使用<code>calendar.isleap()</code>方法即可。是不是省去了很多麻烦？</strong></p><h3 id="如何掌握更多的库？"><a href="#如何掌握更多的库？" class="headerlink" title="如何掌握更多的库？"></a><strong>如何掌握更多的库？</strong></h3><p><strong>屏幕前可爱的你可能要问了，“主播主播，我不知道这些巧妙的库怎么办呢？🥺🥺🥺<img src="/assets/445b2de139718f2fa76d6715aad6c26b.gif" alt="img">？”</strong></p><p><strong>别慌，授人以鱼不如授人以渔：</strong></p><ol><li><strong>打卡豆包</strong></li><li><strong>输入：举出一些方便的库，比如判断质数的库什么的，你将会得到完美的解答。：<img src="/assets/image-20250519223947097.png" alt="image-20250519223947097"></strong></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在编写 Python 程序时，合理使用标准库（内置库）和第三方库（外部库）可以极大地提升开发效率。但需要特别注意以下几点，<strong>尤其是在断网考试或评测环境中</strong>：</p><h4 id="Python-的库分为两类"><a href="#Python-的库分为两类" class="headerlink" title="Python 的库分为两类"></a>Python 的库分为两类</h4><ul><li>✅ <strong>内置库（标准库）</strong>：安装 Python 时自带，<strong>无需额外安装</strong>，可以直接导入使用。</li><li>❌ <strong>外部库（第三方库）</strong>：需要通过 <code>pip install &lt;module_name&gt;</code> 命令进行安装，<strong>考试环境通常无法联网安装，因此无法使用</strong>。</li></ul><hr><h4 id="考试环境常见误区："><a href="#考试环境常见误区：" class="headerlink" title="考试环境常见误区："></a>考试环境常见误区：</h4><ul><li>很多同学习惯在平时使用 <code>sympy</code>、<code>numpy</code>、<code>pandas</code> 等强大库，但这些库默认并不包含在 Python 安装包中。</li><li>在断网的考试环境下，如果代码中 <code>import sympy</code> 或其他外部库，将会导致运行时报错：<code>ModuleNotFoundError: No module named &#39;sympy&#39;</code>。</li><li><strong>尤其是 CTF、蓝桥杯、期末考试、机试中，避免使用非标准库是基本原则！</strong></li></ul><hr><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ul><li>学会使用 <strong>功能强大的标准库</strong> 处理大部分常见任务，比如数学计算、文件操作、时间处理、随机数生成、数据统计等。</li><li>对于需要外部库才能完成的任务，要学会用纯 Python 或标准库<strong>手动实现</strong>替代算法。</li><li>如果你特别依赖某个外部库的功能，可以事先查阅其底层原理，在考试中手动实现核心部分（比如素因数分解、判素数、排列组合等）。</li></ul><hr><h4 id="建议学习以下几个常用标准库"><a href="#建议学习以下几个常用标准库" class="headerlink" title="建议学习以下几个常用标准库"></a>建议学习以下几个常用标准库</h4><ul><li><code>math</code>：数学函数（阶乘、排列组合、对数、三角函数等）</li><li><code>datetime</code>：时间与日期操作</li><li><code>statistics</code>：均值、方差等统计函数</li><li><code>itertools</code>：排列、组合、累积等高级迭代工具</li><li><code>random</code>：生成随机数、抽样</li><li><code>os.path</code> &#x2F; <code>pathlib</code>：处理路径与文件结构</li><li><code>collections</code>：高效的数据结构（如 <code>deque</code>、<code>Counter</code>、<code>defaultdict</code>）</li></ul><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><h4 id="1️⃣-阶乘计算（math-factorial）"><a href="#1️⃣-阶乘计算（math-factorial）" class="headerlink" title="1️⃣ 阶乘计算（math.factorial）"></a>1️⃣ 阶乘计算（<code>math.factorial</code>）</h4><p>用于计算 <code>n!</code>（即 1×2×…×n）。相比递归或循环，调用函数更高效且无栈溢出风险。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.factorial(<span class="number">5</span>))   <span class="comment"># 120</span></span><br><span class="line"><span class="built_in">print</span>(math.factorial(<span class="number">0</span>))   <span class="comment"># 1（定义上 0! = 1）</span></span><br><span class="line"><span class="built_in">print</span>(math.factorial(<span class="number">10</span>))  <span class="comment"># 3628800</span></span><br></pre></td></tr></table></figure><hr><h4 id="2️⃣-排列与组合（math-perm-math-comb）"><a href="#2️⃣-排列与组合（math-perm-math-comb）" class="headerlink" title="2️⃣ 排列与组合（math.perm, math.comb）"></a>2️⃣ 排列与组合（<code>math.perm</code>, <code>math.comb</code>）</h4><p>用于计算从 n 个元素中选出 k 个元素的排列数和组合数：</p><ul><li>排列：顺序有关 <code>P(n, k) = n! / (n-k)!</code></li><li>组合：顺序无关 <code>C(n, k) = n! / (k!(n-k)!)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.perm(<span class="number">5</span>, <span class="number">2</span>))  <span class="comment"># 20 = 5×4</span></span><br><span class="line"><span class="built_in">print</span>(math.comb(<span class="number">5</span>, <span class="number">2</span>))  <span class="comment"># 10 = 5×4 / 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.perm(<span class="number">7</span>, <span class="number">3</span>))  <span class="comment"># 210 = 7×6×5</span></span><br><span class="line"><span class="built_in">print</span>(math.comb(<span class="number">7</span>, <span class="number">3</span>))  <span class="comment"># 35  = 7×6×5 / (3×2×1)</span></span><br></pre></td></tr></table></figure><hr><h4 id="3️⃣-数学计算与函数（math-模块）"><a href="#3️⃣-数学计算与函数（math-模块）" class="headerlink" title="3️⃣ 数学计算与函数（math 模块）"></a>3️⃣ 数学计算与函数（<code>math</code> 模块）</h4><p>包括三角函数、对数、指数、常数等，避免重复造轮子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三角函数（单位：弧度）</span></span><br><span class="line"><span class="built_in">print</span>(math.sin(math.pi / <span class="number">2</span>))  <span class="comment"># 1.0</span></span><br><span class="line"><span class="built_in">print</span>(math.cos(math.pi))      <span class="comment"># -1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数与指数</span></span><br><span class="line"><span class="built_in">print</span>(math.log(<span class="number">100</span>, <span class="number">10</span>))      <span class="comment"># 2.0（以10为底）</span></span><br><span class="line"><span class="built_in">print</span>(math.log2(<span class="number">8</span>))           <span class="comment"># 3.0（以2为底）</span></span><br><span class="line"><span class="built_in">print</span>(math.exp(<span class="number">1</span>))            <span class="comment"># 自然对数e的幂 ≈ 2.718</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line"><span class="built_in">print</span>(math.pi)    <span class="comment"># 3.141592653...</span></span><br><span class="line"><span class="built_in">print</span>(math.e)     <span class="comment"># 2.718281828...</span></span><br></pre></td></tr></table></figure><hr><h4 id="4️⃣-日期与时间处理（datetime）"><a href="#4️⃣-日期与时间处理（datetime）" class="headerlink" title="4️⃣ 日期与时间处理（datetime）"></a>4️⃣ 日期与时间处理（<code>datetime</code>）</h4><p>轻松完成日期差、星期判断、格式转换等任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期差</span></span><br><span class="line">d1 = date(<span class="number">2024</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">d2 = date(<span class="number">2024</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line"><span class="built_in">print</span>((d2 - d1).days)  <span class="comment"># 365（闰年）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断星期几（0=周一，6=周日）</span></span><br><span class="line"><span class="built_in">print</span>(d1.weekday())    <span class="comment"># 0 -&gt; 星期一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期加减</span></span><br><span class="line"><span class="built_in">print</span>(d1 + timedelta(days=<span class="number">30</span>))  <span class="comment"># 2024-01-31</span></span><br></pre></td></tr></table></figure><p><strong>常见用途</strong>：倒计时、日历工具、考试周计算、工期估算等。</p><hr><h4 id="5️⃣-统计计算（statistics）"><a href="#5️⃣-统计计算（statistics）" class="headerlink" title="5️⃣ 统计计算（statistics）"></a>5️⃣ 统计计算（<code>statistics</code>）</h4><p>直接进行常见统计分析，适用于考试题或数据分析初步。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(statistics.mean(data))    <span class="comment"># 平均数：3.2857...</span></span><br><span class="line"><span class="built_in">print</span>(statistics.median(data))  <span class="comment"># 中位数：3</span></span><br><span class="line"><span class="built_in">print</span>(statistics.mode(data))    <span class="comment"># 众数：2</span></span><br><span class="line"><span class="built_in">print</span>(statistics.stdev(data))   <span class="comment"># 标准差</span></span><br><span class="line"><span class="built_in">print</span>(statistics.variance(data))<span class="comment"># 方差</span></span><br></pre></td></tr></table></figure><p>📌 <strong>典型应用</strong>：成绩分析、概率期望、竞赛数据处理。</p><hr><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><blockquote><p>考试环境若为断网，请避免使用下列外部库！</p></blockquote><h4 id="1️⃣-判断质数（sympy-isprime）"><a href="#1️⃣-判断质数（sympy-isprime）" class="headerlink" title="1️⃣ 判断质数（sympy.isprime）"></a>1️⃣ 判断质数（<code>sympy.isprime</code>）</h4><p>判断一个数是否为质数，适用于大数判断，无需编写复杂算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(isprime(<span class="number">29</span>))              <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(isprime(<span class="number">1234567891</span>))      <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(isprime(<span class="number">1001</span>))            <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>📌 <strong>原理</strong>：底层采用 Miller-Rabin 等快速算法。</p><hr><h4 id="2️⃣-生成质数列表（sympy-primerange）"><a href="#2️⃣-生成质数列表（sympy-primerange）" class="headerlink" title="2️⃣ 生成质数列表（sympy.primerange）"></a>2️⃣ 生成质数列表（<code>sympy.primerange</code>）</h4><p>快速获取一段范围内所有质数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> primerange</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(primerange(<span class="number">1</span>, <span class="number">20</span>)))     <span class="comment"># [2, 3, 5, 7, 11, 13, 17, 19]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(primerange(<span class="number">100</span>, <span class="number">121</span>)))  <span class="comment"># [101, 103, 107, 109, 113]</span></span><br></pre></td></tr></table></figure><p>📌 <strong>用途</strong>：编程题筛选质数、构造题干数据、密码学入门等。</p><hr><h4 id="3️⃣-素因数分解（sympy-factorint）"><a href="#3️⃣-素因数分解（sympy-factorint）" class="headerlink" title="3️⃣ 素因数分解（sympy.factorint）"></a>3️⃣ 素因数分解（<code>sympy.factorint</code>）</h4><p>自动将整数分解成素因子及其幂次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorint</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorint(<span class="number">60</span>))   <span class="comment"># &#123;2: 2, 3: 1, 5: 1&#125; → 60 = 2²×3×5</span></span><br><span class="line"><span class="built_in">print</span>(factorint(<span class="number">101</span>))  <span class="comment"># &#123;101: 1&#125;（本身为质数）</span></span><br></pre></td></tr></table></figure><p>📌 <strong>实战用途</strong>：最大公约数求法优化、分数约分、欧拉函数等数学题。</p><hr><h3 id="✅-小结"><a href="#✅-小结" class="headerlink" title="✅ 小结"></a>✅ 小结</h3><table><thead><tr><th>功能</th><th>推荐库</th><th>是否内置</th></tr></thead><tbody><tr><td>阶乘、排列组合</td><td><code>math</code></td><td>✅</td></tr><tr><td>对数、三角函数</td><td><code>math</code></td><td>✅</td></tr><tr><td>时间与日期计算</td><td><code>datetime</code></td><td>✅</td></tr><tr><td>均值&#x2F;方差</td><td><code>statistics</code></td><td>✅</td></tr><tr><td>随机抽样</td><td><code>random</code></td><td>✅</td></tr><tr><td>文件路径</td><td><code>os.path</code> &#x2F; <code>pathlib</code></td><td>✅</td></tr><tr><td>判断质数</td><td><code>sympy</code></td><td>❌</td></tr><tr><td>素因数分解</td><td><code>sympy</code></td><td>❌</td></tr><tr><td>生成质数表</td><td><code>sympy</code></td><td>❌</td></tr></tbody></table><blockquote><p>✅ 建议熟练掌握标准库，提高代码效率<br> ❌ 第三方库如 <code>sympy</code>，虽强大但需联网安装，<strong>考试断网环境慎用！</strong></p></blockquote><hr><p><strong>屏幕前的你需要对他们进行记忆，再进行运用，必然能有所大成。</strong></p><blockquote><p><strong>学会使用这些库可以大幅提升编程效率，尤其是在处理数学、日期、统计等常见任务时。对于大一学生来说，先掌握库的用法，再深入理解底层算法，是更高效的学习路径！                                                                                                                                           ——豆包</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 学习指南</title>
      <link href="/2025/05/19/Python3%20%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
      <url>/2025/05/19/Python3%20%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="学习指南-授人以鱼不如授人以渔"><a href="#学习指南-授人以鱼不如授人以渔" class="headerlink" title="学习指南__授人以鱼不如授人以渔"></a>学习指南__授人以鱼不如授人以渔</h1><p>前言：一些事实</p><blockquote><ul><li>奥林大一的python考试不考察<strong>算法</strong>（即不关心这些方法底层是怎么实现的），只关注语法(会使用这些方法和库即可)，彻底掌握语法，熟练使用python内置一些方法和库才可以快速解题。</li><li><strong>满分&#x3D;把题全写出来</strong>。把题全写出来不仅需要会写这道题，更需要掌握一些技巧，学会使用更简单有效的方法，从而能够避免冗余代码少走弯路，大幅度提高代码书写速度。</li><li>即使部分人使用AI作弊，但是等到大二存在一部分算法题目单纯使用AI是跑不出来的，需要<strong>人脑 + AI</strong>，但是大一的语法题使用AI是很容易跑出来的。使用AI必然不能带来能力的提升。无非就是考试的一个分数，额，不说了，无能的林业大学，令人失望。不妨关注自己的提升。</li><li>有极少数人只凭借自己的能力不使用歪门斜道满分的。当然那种人一个年级应该只有一两个（反正主播年级是的）。主播离他们其实很近了当然主播不是满分主播很欣赏他们的才华。</li><li><code>python</code>其实是相当重要的一编程语言，人工智能的许多许多框架，比如机器学习、自然语言处理、计算机视觉都是使用python实现的。学好<code>python</code>可以上天入地🥰😊。</li></ul></blockquote><p>在本部分文章中，使用<code>&gt;&gt;&gt;</code>标注的是python的交互式窗口。在本部分将总结计算机学科编程语言的学习方法，以及python代码简单化的一些实用的方法，包括<strong>一些实用库的使用</strong>和<strong>函数式编程</strong>。</p><hr><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><h3 id="学会使用Markdown做笔记"><a href="#学会使用Markdown做笔记" class="headerlink" title="学会使用Markdown做笔记"></a>学会使用<strong>Markdown</strong>做笔记</h3><p>每一个程序员都需要学会使用<strong>Markdown</strong>做笔记，千万不要使用纸笔或者word记录🥺🥲。如果问为什么就是存在更好用的工具叫<strong>Markdown</strong>。而且<strong>而且Markdown书写起来又简单又优美</strong>本部分分为两部分，一是如何安装免费版Typora，二是如何在Typora中优美地写markdown。</p><h4 id="如何安装免费版Typora"><a href="#如何安装免费版Typora" class="headerlink" title="如何安装免费版Typora"></a>如何安装免费版Typora</h4><ol><li><p>解压<code>Typoa.zip</code>和<code>pandoc.zip</code>文件至合适目录下,建议选择<code>C:\Program Files</code>或<code>D:\Program Files</code></p></li><li><p>在解压后的Typora文件夹下找到<code>Typora.exe</code>文件，右键创建快捷方式，把这个快捷方式放在桌面上。</p><p><img src="/assets/image-20250531174712835.png" alt="image-20250531174712835"></p></li><li><p>打开菜单 -&gt; 偏好设置 -&gt; 导出 ，选择正确的Pandoc.exe文件路径。就是刚才解压Pandoc.zip的文件夹路径，应该是<code>D:\Program Files\Pandoc\pandoc.exe</code>或者<code>C:\Program Files\Pandoc\pandoc.exe</code>。</p><p><img src="/assets/image-20250118185956645.png" alt="image-20250118185956645"></p></li></ol><p>tips:平常不要更新。否则免费版会失效。</p><h4 id="如何书写markdown"><a href="#如何书写markdown" class="headerlink" title="如何书写markdown"></a>如何书写markdown</h4><p>语法教学超链接如下：</p><p><a href="https://blog.csdn.net/qq_44866153/article/details/116068672">Typora的基本使用（Markdown语法）_typora取消倾斜-CSDN博客</a></p><p><a href="https://www.typora.net/1129.html">Markdown For Typora 中文版使用指南 | typora中文网</a></p><h4 id="Typora内置功能"><a href="#Typora内置功能" class="headerlink" title="Typora内置功能"></a>Typora内置功能</h4><h5 id="markdown文件直接转pdf-word功能"><a href="#markdown文件直接转pdf-word功能" class="headerlink" title="markdown文件直接转pdf,word功能"></a>markdown文件直接转<code>pdf</code>,<code>word</code>功能</h5><p>菜单 -&gt; 导出 ，即可选择想要的的导出文件类型</p><p><img src="/assets/image-20250118190512424.png" alt="image-20250118190512424"></p><p>之前的PDF就是用这个功能导出的。</p><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p><strong>markdown渲染效果</strong></p><p><img src="/assets/image-20250531174637322.png" alt="image-20250531174637322"></p><p><strong>导出后的pdf效果</strong></p><p><img src="/assets/image-20250118190355636.png" alt="image-20250118190355636"></p><h3 id="python语法学习方法"><a href="#python语法学习方法" class="headerlink" title="python语法学习方法"></a>python语法学习方法</h3><h4 id="使用学习网站进行学习"><a href="#使用学习网站进行学习" class="headerlink" title="使用学习网站进行学习"></a>使用学习网站进行学习</h4><p>建议使用使用网站进行学习</p><p>强推网站：<a href="https://www.runoob.com/python3/python3-tutorial.html">Python3 教程 | 菜鸟教程</a></p><p><strong>多参考简便方法 多练习 多思考多理解</strong>  不会的就上网站查询，其实上课就可以自己在网上学，学校的课不听也罢，其实考的高的都不是听课听的而是自己练习的。</p><p>这个网站上有许多实用的部分，比如：</p><ol><li><p>python所有的内置函数：<a href="https://www.runoob.com/python3/python3-built-in-functions.html">Python3 内置函数 | 菜鸟教程</a><br><img src="/assets/image-20250519225015659.png" alt="image-20250519225015659"></p></li><li><p>python某数据类型所有的方法，均需要掌握：<a href="https://www.runoob.com/python3/python3-list.html">Python3 列表 | 菜鸟教程</a></p><p><img src="/assets/image-20250519224945827.png" alt="image-20250519224945827"></p></li></ol><p><a href="https://www.runoob.com/python3/python3-tutorial.html">Python3 教程 | 菜鸟教程</a> 很详细的涵盖了python几乎所有的知识，不会的都可以上这里面来查询进行学习。</p><h4 id="使用人工智能进行学习"><a href="#使用人工智能进行学习" class="headerlink" title="使用人工智能进行学习"></a>使用人工智能进行学习</h4><p>其实人工智能不仅可以用来作弊和偷懒，它特别适合适合用来学习，它搜索得到的知识面很广很详细。</p><p>一些常用的 好用的 大模型 表格汇总</p><table><thead><tr><th><strong>模型</strong></th><th><strong>网址</strong></th><th><strong>优势</strong></th><th><strong>是否需要使用VPN</strong></th></tr></thead><tbody><tr><td><strong>ChatGPT</strong></td><td><strong><a href="https://chatgpt.com/">https://chatgpt.com/</a></strong></td><td><strong>OpenAI 官方网站，支持 GPT-3.5 和 GPT-4，回答准确、上下文理解强</strong></td><td><strong>是</strong></td></tr><tr><td><strong>DeepSeek</strong></td><td><a href="https://chat.deepseek.com/">https://chat.deepseek.com/</a></td><td>国内可用，支持中英文输入，具有一定推理和编程能力</td><td>否</td></tr><tr><td><strong>元宝</strong></td><td><a href="https://yuanbao.aliyun.com/">https://yuanbao.aliyun.com/</a></td><td>内置 DeepSeek-R1 接口，响应快，不会提示“服务器繁忙”</td><td>否</td></tr><tr><td><strong>豆包</strong></td><td><a href="https://www.doubao.com/">https://www.doubao.com/</a></td><td>字节跳动推出，响应迅速，中文处理能力优秀，接入豆包大模型</td><td>否</td></tr><tr><td><strong>theb.ai</strong></td><td><a href="https://beta.theb.ai/">https://beta.theb.ai/</a></td><td>可自由切换多个大模型（如 Claude、GPT、Gemini 等），聚合式平台</td><td>是</td></tr><tr><td>通义千问</td><td><a href="https://tongyi.aliyun.com/qianwen/">https://tongyi.aliyun.com/qianwen/</a></td><td>阿里出品，中文理解能力强，支持代码生成、问答等</td><td>否</td></tr><tr><td>Kimi</td><td><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></td><td>支持 20 万字长文本输入，适合写作和文档总结，中文表现出色</td><td>否</td></tr><tr><td>Claude</td><td><a href="https://claude.ai/">https://claude.ai/</a></td><td>Anthropic 出品，上下文理解强，擅长多轮对话和代码解释</td><td>是</td></tr><tr><td>Gemini</td><td><a href="https://gemini.google.com/">https://gemini.google.com/</a></td><td>Google 出品，原名 Bard，集成搜索结果，信息更新快</td><td>是</td></tr></tbody></table><h5 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h5><p>可以询问大语言模型任何东西，比如不理解<code>python map()</code>函数怎么使用，就可以直接问<code>ChatGpt</code>：</p><blockquote><p>python map（）函数详细教学，带示例代码和解释</p></blockquote><p>可以很快得到详细的教学，就可以掌握它的基本用法了。</p><p><strong>效果图</strong></p><p>提问：给出Java中FileWriter FileReader BufferedWriter工具类的详细教学</p><p><img src="/assets/image-20250531182428192.png" alt="image-20250531182428192"></p><p>提问：给出Python 3 中返回迭代器的内置函数及其应用示例</p><p><img src="/assets/image-20250602185903026.png" alt="image-20250602185903026"></p><h4 id="使用B站进行学习"><a href="#使用B站进行学习" class="headerlink" title="使用B站进行学习"></a>使用B站进行学习</h4><p>B站优势是它是视频，方便初学者一点一点理解，缺点是有些视频太冗长，学习效率不高，不如直接搜索看文字来的快。</p><h2 id="Python进阶学习目录"><a href="#Python进阶学习目录" class="headerlink" title="Python进阶学习目录"></a>Python进阶学习目录</h2><p>在本部分，我总结了我认为想要<code>python</code>进阶，需要学习的一些重要的知识，这些知识将分块在其它文章中展示，在以下部分将附带他们的链接，作为学习的目录，方便学习者检索。<strong>点击即可跳转</strong></p><h3 id="1-Python3-学习指南"><a href="#1-Python3-学习指南" class="headerlink" title="1. Python3 学习指南:"></a>1. Python3 学习指南:</h3><p><a href="https://edwardgaming.github.io/2025/05/19/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/">https://edwardgaming.github.io/2025/05/19/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</a></p><h3 id="2-Python3-实用的模块"><a href="#2-Python3-实用的模块" class="headerlink" title="2. Python3 实用的模块:"></a>2. Python3 实用的模块:</h3><p><a href="https://edwardgaming.github.io/2025/06/02/Python3%20%E5%AE%9E%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97/">https://edwardgaming.github.io/2025/06/02/Python3%20%E5%AE%9E%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97/</a></p><h3 id="3-Python3-基本数据类型"><a href="#3-Python3-基本数据类型" class="headerlink" title="3. Python3 基本数据类型"></a>3. Python3 基本数据类型</h3><p><a href="https://edwardgaming.github.io/2025/06/02/Python3%20%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">https://edwardgaming.github.io/2025/06/02/Python3%20%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</a></p><h3 id="4-Python3-可迭代对象-Iterable-、序列（Sequence）、迭代器（Iterator）、生成器（generator）"><a href="#4-Python3-可迭代对象-Iterable-、序列（Sequence）、迭代器（Iterator）、生成器（generator）" class="headerlink" title="4. Python3 可迭代对象(Iterable)、序列（Sequence）、迭代器（Iterator）、生成器（generator）:"></a>4. Python3 可迭代对象(Iterable)、序列（Sequence）、迭代器（Iterator）、生成器（generator）:</h3><p><a href="https://edwardgaming.github.io/2025/06/02/Python3%20%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/">https://edwardgaming.github.io/2025/06/02/Python3%20%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1/</a></p><h3 id="5-Python3-函数式编程-lambda表达式、三元表达式、map-、filter-、推导式-："><a href="#5-Python3-函数式编程-lambda表达式、三元表达式、map-、filter-、推导式-：" class="headerlink" title="5. Python3 函数式编程 (lambda表达式、三元表达式、map()、filter()、推导式)："></a>5. Python3 函数式编程 (lambda表达式、三元表达式、map()、filter()、推导式)：</h3><p><a href="https://edwardgaming.github.io/2025/06/02/Python3%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/">https://edwardgaming.github.io/2025/06/02/Python3%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</a></p><h3 id="6-Python3内存机制："><a href="#6-Python3内存机制：" class="headerlink" title="6. Python3内存机制："></a>6. Python3内存机制：</h3><p><a href="https://edwardgaming.github.io/2025/06/02/Python3%20%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/">https://edwardgaming.github.io/2025/06/02/Python3%20%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/</a></p><h3 id="7-Python3-比较实用的内置函数："><a href="#7-Python3-比较实用的内置函数：" class="headerlink" title="7. Python3 比较实用的内置函数："></a>7. Python3 比较实用的内置函数：</h3><p><a href="https://edwardgaming.github.io/2025/06/02/Python3%20%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/">https://edwardgaming.github.io/2025/06/02/Python3%20%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</a></p><h3 id="8-NEFU实验题"><a href="#8-NEFU实验题" class="headerlink" title="8.NEFU实验题"></a>8.<strong>NEFU实验题</strong></h3>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Electra + CNN 的法律罪名预测系统</title>
      <link href="/2025/05/15/%E5%9F%BA%E4%BA%8E%20Electra%20+%20CNN%20%E7%9A%84%E6%B3%95%E5%BE%8B%E7%BD%AA%E5%90%8D%E9%A2%84%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/05/15/%E5%9F%BA%E4%BA%8E%20Electra%20+%20CNN%20%E7%9A%84%E6%B3%95%E5%BE%8B%E7%BD%AA%E5%90%8D%E9%A2%84%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-Electra-CNN-的法律罪名预测系统"><a href="#基于-Electra-CNN-的法律罪名预测系统" class="headerlink" title="基于 Electra + CNN 的法律罪名预测系统"></a>基于 Electra + CNN 的法律罪名预测系统</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>针对中文法律文本罪名分类的复杂性，本研究提出了一种基于ELECTRA预训练模型与卷积神经网络（CNN）融合的法律罪名预测系统。</p><p>本系统采用哈尔滨工业大学开源的预训练模型作为语义编码器，通过动态滑动窗口机制提取局部语义特征，构建包含全局最大池化与正则化技术的多级分类架构。</p><p>实验采用真实司法文书数据集，通过双重数据清洗策略（多罪名样本剔除、特殊字符过滤）和动态罪名加载机制，在50万条训练样本上实现单轮训练效率优化。</p><p>测试集评估显示，系统在盗窃、危险驾驶等高频罪名中达到98.45%的F1值，宏观准确率达88.47%，但在样本量低于10的68个低频罪名中出现严重识别失效。值得注意的是，模型通过犯罪事实文本特征学习，在毒品犯罪（F1&#x3D;97.23%）和盗窃案件（Recall&#x3D;98.27%）中展现出类法律专家水平的判别能力，但对复杂经济犯罪（如合同诈骗Precision&#x3D;66.76%）和新型网络犯罪（如帮助信息网络犯罪活动罪F1&#x3D;0）的泛化能力有限。</p><p>本研究证实了预训练模型在法律文本表征中的有效性，同时揭示了司法人工智能面临的长尾分布困境，为后续研究提供了数据增强与迁移学习结合的改进方向。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><h3 id="GPU环境"><a href="#GPU环境" class="headerlink" title="GPU环境"></a>GPU环境</h3><p>本项目使用<code>conda</code>创建python虚拟环境，使用GPU进行训练，CUDA和cuDNN版本<a href="https://tensorflow.google.cn/install/source_windows?hl=en#gpu">参考此网址</a></p><table><thead><tr><th align="left">Version</th><th align="left">Python version</th><th align="left">cuDNN</th><th align="left">CUDA</th></tr></thead><tbody><tr><td align="left">tensorflow_gpu-2.10.0</td><td align="left">3.8</td><td align="left">8.1</td><td align="left">11.2</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NVIDIA GeForce RTX 4060 Laptop GPU</span><br><span class="line"></span><br><span class="line">驱动程序版本:32.0.15.7270</span><br><span class="line">驱动程序日期:2025/3/3</span><br><span class="line">DirectX 版本:12 (FL 12.1)</span><br><span class="line">物理位置：PCI 总线 1、设备 0、功能 0</span><br><span class="line"></span><br><span class="line">专用 GPU 内存8.0 GB</span><br><span class="line">共享 GPU 内存7.6 GB</span><br><span class="line">GPU 内存15.6 GB</span><br></pre></td></tr></table></figure><h3 id="软件包依赖"><a href="#软件包依赖" class="headerlink" title="软件包依赖"></a>软件包依赖</h3><p><code>requirements.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tensorflow-gpu==2.10.0</span><br><span class="line">numpy==1.23.5</span><br><span class="line">transformers==4.30.0</span><br><span class="line">scikit-learn==1.0.2</span><br><span class="line">tqdm==4.65.0</span><br><span class="line">jieba==0.42.1</span><br><span class="line">Keras==2.10.0</span><br></pre></td></tr></table></figure><h2 id="项目实现原理"><a href="#项目实现原理" class="headerlink" title="项目实现原理"></a>项目实现原理</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">【输入犯罪事实】</span><br><span class="line">      ↓</span><br><span class="line">预训练模型编码：把词变成向量</span><br><span class="line">      ↓</span><br><span class="line">CNN：滑动窗口提取词组特征</span><br><span class="line">      ↓</span><br><span class="line">GlobalMaxPooling：挑出最明显的特征</span><br><span class="line">      ↓</span><br><span class="line">Dense：映射成不同罪名的分数</span><br><span class="line">      ↓</span><br><span class="line">Softmax：转成概率，选出预测结果</span><br><span class="line">      ↓</span><br><span class="line">【输出罪名 】</span><br></pre></td></tr></table></figure><h3 id="一、数据清洗"><a href="#一、数据清洗" class="headerlink" title="一、数据清洗"></a>一、数据清洗</h3><ol><li><p>清洗多重罪名数据</p><p>由于部分数据集中的accusation字段含有多个罪名，需要删除在json中对应的行，减小杂数据对模型的干扰。代码实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_json_files</span>(<span class="params">folder_path</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(folder_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.json&#x27;</span>):</span><br><span class="line">                file_path = os.path.join(root, file)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        lines = f.readlines()  <span class="comment"># 读取所有行（每行一个 JSON 对象）</span></span><br><span class="line"></span><br><span class="line">                    valid_lines = []</span><br><span class="line">                    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                        line = line.strip()  <span class="comment"># 去除行首尾空格和换行符</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                            <span class="keyword">continue</span>  <span class="comment"># 跳过空行</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            data = json.loads(line)  <span class="comment"># 解析 JSON 数据</span></span><br><span class="line">                            accusation = data.get(<span class="string">&#x27;meta&#x27;</span>, &#123;&#125;).get(<span class="string">&#x27;accusation&#x27;</span>, [])</span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">len</span>(accusation) == <span class="number">1</span>:  <span class="comment"># 仅保留 accusation 列表长度为 1 的行</span></span><br><span class="line">                                valid_lines.append(line + <span class="string">&#x27;\n&#x27;</span>)  <span class="comment"># 恢复换行符（原文件可能每行末尾有换行）</span></span><br><span class="line">                            </span><br><span class="line">                        <span class="keyword">except</span> json.JSONDecodeError <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&quot;解析 JSON 行时出错（文件: <span class="subst">&#123;file_path&#125;</span>, 行: <span class="subst">&#123;line[:<span class="number">50</span>]&#125;</span>...）: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                            <span class="keyword">continue</span>  <span class="comment"># 跳过解析失败的行</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 写回文件（覆盖原文件）</span></span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.writelines(valid_lines)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;文件 <span class="subst">&#123;file_path&#125;</span> 处理完成，保留 <span class="subst">&#123;<span class="built_in">len</span>(valid_lines)&#125;</span> 条有效数据&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;处理文件 <span class="subst">&#123;file_path&#125;</span> 时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 请将此处替换为实际文件夹路径（例如：&quot;D:/json_files&quot;）</span></span><br><span class="line">    target_folder = <span class="string">&quot;temp/trainset&quot;</span></span><br><span class="line">    clean_json_files(target_folder)</span><br></pre></td></tr></table></figure></li><li><p>对应accusation字段还含有形如“<a href=""></a>”样式的文字，可在训练时去除。</p><p><code>accu_clean = accu.translate(str.maketrans(&#39;&#39;, &#39;&#39;, &#39;[]（）【】&#39;))</code></p></li><li><p>网上给出的accu.txt有202个罪名，实际数据集可能不包含这些罪名，可在实际训练时候进行动态加载罪名。(见train.py的主函数)</p></li></ol><h3 id="二、生成词向量"><a href="#二、生成词向量" class="headerlink" title="二、生成词向量"></a>二、生成词向量</h3><p>选择开源的预训练模型，由<a href="https://huggingface.co/hfl/chinese-legal-electra-base-discriminator/tree/main">哈尔滨工业大学专门为中文法律文本训练的词向量生成模型</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git lfs install</span><br><span class="line">git clone https://huggingface.co/hfl/chinese<span class="literal">-legal-electra-base-discriminator</span></span><br></pre></td></tr></table></figure><h3 id="三、神经网络层构建"><a href="#三、神经网络层构建" class="headerlink" title="三、神经网络层构建"></a>三、神经网络层构建</h3><p>基本原理是使用卷积神经网络提取文本特征，然后使用GlobalMaxPooling聚合最显著的特征交给全连接层，全连接层把刚刚 CNN 提取到的“最显著特征”当作输入，交给神经网络里的决策层，最终全连接层把这些特征映射成不同罪名的可能性，交给Softmax层。Softmax层把所有罪名的分数，变成 <strong>概率分布</strong>，最后选出概率最大的罪名。</p><h3 id="四、训练模型"><a href="#四、训练模型" class="headerlink" title="四、训练模型"></a>四、训练模型</h3><p>考虑到时间紧迫和算力问题，最终只从200多万条数据集中选择了50万条，进行了1轮训练，小样本训练测试发现如果进行多轮训练模型发生了过拟合问题，精确率不断下降，不清楚为什么会发生这样的问题，最终决定进行一轮训练，平均精度达到80%，或许深入了解模型性能下降的原因后可以更高的提升精度。训练代码如下：</p><p><code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_GPU_THREAD_MODE&#x27;</span>] = <span class="string">&#x27;gpu_private&#x27;</span></span><br><span class="line">os.environ[<span class="string">&#x27;TF_ENABLE_CUBLAS_TENSOR_OP_MATH_FP32&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">os.environ[<span class="string">&#x27;TF_ENABLE_CUDNN_TENSOR_OP_MATH_FP32&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> ElectraTokenizer, TFElectraModel</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers, Model</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> callbacks <span class="keyword">as</span> keras_callbacks</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> tqdm.auto <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数 </span></span><br><span class="line">MAX_LENGTH = <span class="number">256</span></span><br><span class="line">BATCH_SIZE = <span class="number">10</span></span><br><span class="line">EPOCHS = <span class="number">1</span></span><br><span class="line">LEARNING_RATE = <span class="number">2e-5</span></span><br><span class="line">MODEL_SAVE_PATH = <span class="string">&quot;electra_cnn_legal&quot;</span></span><br><span class="line">DROPOUT_RATE = <span class="number">0.3</span></span><br><span class="line">CLASSIFIER_UNITS = <span class="number">384</span></span><br><span class="line">LOCAL_MODEL_PATH = <span class="string">&quot;./hfl/chinese-legal-electra-base-disc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GPU配置 </span></span><br><span class="line">gpus = tf.config.list_physical_devices(<span class="string">&#x27;GPU&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> gpus:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tf.config.set_logical_device_configuration(</span><br><span class="line">            gpus[<span class="number">0</span>],</span><br><span class="line">            [tf.config.LogicalDeviceConfiguration(memory_limit=<span class="number">7</span> * <span class="number">1024</span>)]</span><br><span class="line">        )</span><br><span class="line">        tf.config.experimental.set_memory_growth(gpus[<span class="number">0</span>], <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">        logging.warning(<span class="string">f&quot;GPU配置提示: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ELECTRA模型</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    tokenizer = ElectraTokenizer.from_pretrained(LOCAL_MODEL_PATH)</span><br><span class="line">    electra_model = TFElectraModel.from_pretrained(LOCAL_MODEL_PATH)</span><br><span class="line">    logging.info(<span class="string">&quot;ELECTRA模型加载成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logging.error(<span class="string">f&quot;模型加载失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LegalDataGenerator</span>(tf.keras.utils.<span class="type">Sequence</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, texts, labels, label_map, batch_size=BATCH_SIZE</span>):</span><br><span class="line">        <span class="variable language_">self</span>.texts = texts</span><br><span class="line">        <span class="variable language_">self</span>.labels = np.array([label_map[l] <span class="keyword">for</span> l <span class="keyword">in</span> labels], dtype=np.int32)</span><br><span class="line">        <span class="variable language_">self</span>.batch_size = batch_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(np.ceil(<span class="built_in">len</span>(<span class="variable language_">self</span>.texts) / <span class="variable language_">self</span>.batch_size))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        batch_texts = <span class="variable language_">self</span>.texts[idx * <span class="variable language_">self</span>.batch_size:(idx + <span class="number">1</span>) * <span class="variable language_">self</span>.batch_size]</span><br><span class="line">        tokenized = tokenizer(</span><br><span class="line">            batch_texts,</span><br><span class="line">            max_length=MAX_LENGTH,</span><br><span class="line">            padding=<span class="string">&quot;max_length&quot;</span>,</span><br><span class="line">            truncation=<span class="literal">True</span>,</span><br><span class="line">            return_tensors=<span class="string">&quot;tf&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> (tokenized[<span class="string">&quot;input_ids&quot;</span>], tokenized[<span class="string">&quot;attention_mask&quot;</span>]), <span class="variable language_">self</span>.labels[idx * <span class="variable language_">self</span>.batch_size:(idx + <span class="number">1</span>) * <span class="variable language_">self</span>.batch_size]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义模型 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LegalClassifier</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(**kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.electra = electra_model</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = layers.Conv1D(<span class="number">128</span>, <span class="number">3</span>, activation=<span class="string">&#x27;gelu&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2(<span class="number">1e-4</span>))</span><br><span class="line">        <span class="variable language_">self</span>.bn = layers.BatchNormalization()</span><br><span class="line">        <span class="variable language_">self</span>.pool = layers.GlobalMaxPooling1D()</span><br><span class="line">        <span class="variable language_">self</span>.classifier = layers.Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, inputs</span>):</span><br><span class="line">        input_ids, attention_mask = inputs</span><br><span class="line">        outputs = <span class="variable language_">self</span>.electra(input_ids, attention_mask=attention_mask)</span><br><span class="line">        x = outputs.last_hidden_state</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.bn(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.classifier(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_config</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;num_classes&quot;</span>: <span class="variable language_">self</span>.classifier.units&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_config</span>(<span class="params">cls, config</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(**config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_dataset</span>(<span class="params">data_dirs, label_map, min_samples_per_class=<span class="number">2</span></span>):</span><br><span class="line">    texts, labels = [], []</span><br><span class="line">    label_counts = &#123;label: <span class="number">0</span> <span class="keyword">for</span> label <span class="keyword">in</span> label_map&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data_dir <span class="keyword">in</span> data_dirs:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_dir):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(data_dir):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> file.endswith(<span class="string">&#x27;.json&#x27;</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root, file), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                            data = json.loads(line)</span><br><span class="line">                            accu = data[<span class="string">&#x27;meta&#x27;</span>][<span class="string">&#x27;accusation&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                            accu_clean = accu.translate(<span class="built_in">str</span>.maketrans(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;[]（）【】&#x27;</span>))</span><br><span class="line">                            <span class="keyword">if</span> accu_clean <span class="keyword">in</span> label_map <span class="keyword">and</span> <span class="number">10</span> &lt; <span class="built_in">len</span>(data[<span class="string">&#x27;fact&#x27;</span>]) &lt; <span class="number">1500</span>:</span><br><span class="line">                                texts.append(data[<span class="string">&#x27;fact&#x27;</span>].strip())</span><br><span class="line">                                labels.append(accu_clean)</span><br><span class="line">                                label_counts[accu_clean] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logging.error(<span class="string">f&quot;文件处理错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤掉样本数不足的类别</span></span><br><span class="line">    texts = [text <span class="keyword">for</span> i, text <span class="keyword">in</span> <span class="built_in">enumerate</span>(texts) <span class="keyword">if</span> label_counts[labels[i]] &gt;= min_samples_per_class]</span><br><span class="line">    labels = [label <span class="keyword">for</span> label <span class="keyword">in</span> labels <span class="keyword">if</span> label_counts[label] &gt;= min_samples_per_class]</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;过滤后数据 - 总样本数: <span class="subst">&#123;<span class="built_in">len</span>(texts)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> texts, labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主流程 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>,</span><br><span class="line">        handlers=[logging.FileHandler(<span class="string">&#x27;training.log&#x27;</span>), logging.StreamHandler()]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    data_dirs = [<span class="string">&quot;trainset&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 第一步：初步读取全部罪名，构建计数器</span></span><br><span class="line">        all_texts, all_labels = [], []</span><br><span class="line">        label_counter = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> data_dir <span class="keyword">in</span> data_dirs:</span><br><span class="line">            <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(data_dir):</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> file.endswith(<span class="string">&#x27;.json&#x27;</span>):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root, file), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                                data = json.loads(line)</span><br><span class="line">                                fact = data.get(<span class="string">&quot;fact&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">                                <span class="keyword">if</span> <span class="keyword">not</span> fact <span class="keyword">or</span> <span class="keyword">not</span> (<span class="number">10</span> &lt; <span class="built_in">len</span>(fact) &lt; <span class="number">1500</span>):</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                accu_list = data[<span class="string">&quot;meta&quot;</span>].get(<span class="string">&quot;accusation&quot;</span>, [])</span><br><span class="line">                                <span class="keyword">if</span> <span class="keyword">not</span> accu_list:</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                accu = accu_list[<span class="number">0</span>]</span><br><span class="line">                                accu_clean = accu.translate(<span class="built_in">str</span>.maketrans(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;[]（）【】&#x27;</span>))</span><br><span class="line">                                all_texts.append(fact)</span><br><span class="line">                                all_labels.append(accu_clean)</span><br><span class="line">                                label_counter[accu_clean] = label_counter.get(accu_clean, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        logging.error(<span class="string">f&quot;数据读取错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二步：筛选出现次数 &gt;= 2 的罪名，构建新的 label_to_id 映射</span></span><br><span class="line">        valid_labels = &#123;label <span class="keyword">for</span> label, count <span class="keyword">in</span> label_counter.items() <span class="keyword">if</span> count &gt;= <span class="number">2</span>&#125;</span><br><span class="line">        label_to_id = &#123;label: idx <span class="keyword">for</span> idx, label <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(valid_labels))&#125;</span><br><span class="line">        id_to_label = &#123;idx: label <span class="keyword">for</span> label, idx <span class="keyword">in</span> label_to_id.items()&#125;</span><br><span class="line">        logging.info(<span class="string">f&quot;有效罪名共计: <span class="subst">&#123;<span class="built_in">len</span>(label_to_id)&#125;</span> 类&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存实际加载的罪名映射标签，方便模型预测时调用。</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;accu_indeed.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> label_to_id:</span><br><span class="line">                f.write(key + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第三步：再次过滤数据，只保留有效罪名的样本</span></span><br><span class="line">        texts = [t <span class="keyword">for</span> i, t <span class="keyword">in</span> <span class="built_in">enumerate</span>(all_texts) <span class="keyword">if</span> all_labels[i] <span class="keyword">in</span> valid_labels]</span><br><span class="line">        labels = [l <span class="keyword">for</span> l <span class="keyword">in</span> all_labels <span class="keyword">if</span> l <span class="keyword">in</span> valid_labels]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第一层划分：train+val 与 test（测试集不参与任何训练过程）</span></span><br><span class="line">        train_val_texts, test_texts, train_val_labels, test_labels = train_test_split(</span><br><span class="line">            texts, labels, test_size=<span class="number">0.10</span>, stratify=labels, random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二层划分：从 train_val 中再划分出验证集</span></span><br><span class="line">        train_texts, val_texts, train_labels, val_labels = train_test_split(</span><br><span class="line">            train_val_texts, train_val_labels, test_size=<span class="number">0.15</span>, stratify=train_val_labels, random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">f&quot;训练样本: <span class="subst">&#123;<span class="built_in">len</span>(train_texts)&#125;</span>, 验证样本: <span class="subst">&#123;<span class="built_in">len</span>(val_texts)&#125;</span>, 测试样本: <span class="subst">&#123;<span class="built_in">len</span>(test_texts)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;数据预处理失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型构建和训练不变</span></span><br><span class="line">    model = LegalClassifier(<span class="built_in">len</span>(label_to_id))</span><br><span class="line">    model.<span class="built_in">compile</span>(</span><br><span class="line">        optimizer=tf.keras.optimizers.Adam(LEARNING_RATE),</span><br><span class="line">        loss=<span class="string">&quot;sparse_categorical_crossentropy&quot;</span>,</span><br><span class="line">        metrics=[<span class="string">&quot;accuracy&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    callbacks = [</span><br><span class="line">        keras_callbacks.EarlyStopping(patience=<span class="number">3</span>, monitor=<span class="string">&#x27;val_accuracy&#x27;</span>),</span><br><span class="line">        keras_callbacks.ModelCheckpoint(MODEL_SAVE_PATH, save_best_only=<span class="literal">True</span>, save_format=<span class="string">&#x27;tf&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model.fit(</span><br><span class="line">            LegalDataGenerator(train_texts, train_labels, label_to_id),</span><br><span class="line">            validation_data=LegalDataGenerator(val_texts, val_labels, label_to_id),</span><br><span class="line">            epochs=EPOCHS,</span><br><span class="line">            callbacks=callbacks,</span><br><span class="line">            verbose=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        tf.keras.models.save_model(model, MODEL_SAVE_PATH)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;训练失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型评估部分</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model = tf.keras.models.load_model(</span><br><span class="line">            MODEL_SAVE_PATH,</span><br><span class="line">            custom_objects=&#123;<span class="string">&quot;LegalClassifier&quot;</span>: LegalClassifier&#125;</span><br><span class="line">        )</span><br><span class="line">        y_true, y_pred = [], []</span><br><span class="line">        test_gen = LegalDataGenerator(test_texts, test_labels, label_to_id)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (inputs, labels) <span class="keyword">in</span> test_gen:</span><br><span class="line">            preds = model.predict(inputs)</span><br><span class="line">            y_true.extend(labels)</span><br><span class="line">            y_pred.extend(np.argmax(preds, axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(classification_report(</span><br><span class="line">            y_true, y_pred,</span><br><span class="line">            target_names=[id_to_label[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">set</span>(y_true))],  <span class="comment"># ✅ 只评估实际出现过的类别</span></span><br><span class="line">            digits=<span class="number">4</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;评估失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="训练结果评估报告"><a href="#训练结果评估报告" class="headerlink" title="训练结果评估报告"></a>训练结果评估报告</h2><h3 id="法律罪名分类模型测试集评估报告"><a href="#法律罪名分类模型测试集评估报告" class="headerlink" title="法律罪名分类模型测试集评估报告"></a>法律罪名分类模型测试集评估报告</h3><p><strong>一、整体性能概览</strong></p><table><thead><tr><th>指标</th><th>数值</th><th>解释说明</th></tr></thead><tbody><tr><td>测试集准确率</td><td>88.47%</td><td>模型对大部分样本的罪名分类正确，但受高频类别主导</td></tr><tr><td>加权平均F1</td><td>0.8772</td><td>高频类别（如盗窃、危险驾驶）的优秀表现拉高整体评分</td></tr><tr><td>宏观平均F1</td><td>0.5890</td><td>反映小样本类别的预测能力严重不足，存在显著的类别不平衡问题</td></tr></tbody></table><hr><p><strong>二、类别分布特征分析</strong></p><ol><li><p><strong>极端长尾分布</strong></p><ul><li><strong>头部类别</strong>：前5%的罪名（如<code>盗窃</code>、<code>危险驾驶</code>）占据总样本量的42.3%  </li><li><strong>尾部类别</strong>：68个罪名（占类别总数的39.5%）样本量 ≤ 10，其中23个类别样本量&#x3D;1</li></ul></li><li><p><strong>高频与低频类别对比</strong></p><table><thead><tr><th>类别类型</th><th>平均样本量</th><th>平均F1</th><th>典型罪名案例</th></tr></thead><tbody><tr><td>高频类别</td><td>1,892</td><td>0.913</td><td>盗窃（5436）、危险驾驶（4876）</td></tr><tr><td>中频类别</td><td>127</td><td>0.721</td><td>合同诈骗（318）、受贿（346）</td></tr><tr><td>低频类别</td><td>5.2</td><td>0.107</td><td>传授犯罪方法（5）、伪造货币（4）</td></tr></tbody></table></li></ol><hr><p><strong>三、关键罪名表现详析</strong></p><ol><li><p><strong>高频罪名优秀案例</strong></p><table><thead><tr><th>罪名</th><th>样本量</th><th>Precision</th><th>Recall</th><th>F1</th></tr></thead><tbody><tr><td>盗窃</td><td>5436</td><td>0.9589</td><td>0.9827</td><td>0.9707</td></tr><tr><td>危险驾驶</td><td>4876</td><td>0.9751</td><td>0.9941</td><td>0.9845</td></tr><tr><td>故意伤害</td><td>2897</td><td>0.8902</td><td>0.9203</td><td>0.9050</td></tr></tbody></table><p><strong>成功特征</strong>：文本模式明确（如”盗窃”常含”财物丢失”等关键词），样本充足</p></li><li><p><strong>低频罪名失效案例</strong></p><table><thead><tr><th>罪名</th><th>样本量</th><th>Precision</th><th>Recall</th><th>F1</th></tr></thead><tbody><tr><td>传授犯罪方法</td><td>5</td><td>0.0000</td><td>0.0000</td><td>0.0000</td></tr><tr><td>伪造货币</td><td>4</td><td>0.0000</td><td>0.0000</td><td>0.0000</td></tr><tr><td>组织、领导、参加黑社会性质组织</td><td>1</td><td>0.0000</td><td>0.0000</td><td>0.0000</td></tr></tbody></table><p><strong>失效原因</strong>：样本量过少导致模型无法学习有效特征，预测结果全为负类</p></li><li><p><strong>中等样本量但表现异常的罪名</strong></p><table><thead><tr><th>罪名</th><th>样本量</th><th>Precision</th><th>Recall</th><th>F1</th><th>异常原因分析</th></tr></thead><tbody><tr><td>出售、购买、运输假币</td><td>32</td><td>0.4638</td><td>1.0000</td><td>0.6337</td><td>高召回率伴随低精确率，存在误判扩散</td></tr><tr><td>投放危险物质</td><td>59</td><td>0.6374</td><td>0.9831</td><td>0.7733</td><td>召回率接近完美但精确率一般</td></tr></tbody></table></li></ol><hr><p><strong>四、数据质量风险提示</strong></p><ol><li><p><strong>样本过滤缺陷</strong>  </p><ul><li>测试集中包含<strong>41个罪名</strong>的样本量 ≤ 3，违反机器学习最小样本原则  </li><li>例如<code>组织、领导、参加黑社会性质组织</code>（1样本）在测试集出现，导致评估指标失真</li></ul></li><li><p><strong>标签噪声风险</strong>  </p><ul><li>罪名<code>伪造、倒卖伪造的有价票证</code>（5样本）与<code>伪造货币</code>（4样本）特征高度相似但被划分为不同类别，可能造成模型混淆</li></ul></li><li><p><strong>文本长度偏差</strong>  </p><ul><li>过滤条件<code>10 &lt; len(fact) &lt; 1500</code>排除超短&#x2F;超长文本，但实际业务中需验证该长度范围是否覆盖所有法律场景</li></ul></li></ol><hr><p><strong>五、法律场景关键缺陷</strong></p><ol><li><p><strong>重大罪名漏检风险</strong>  </p><ul><li><code>故意杀人</code>（325样本）F1仅0.7457，对量刑关键罪名需更高召回率  </li><li><code>受贿</code>（346样本）精确率0.8116，存在将其他经济犯罪误判为受贿的风险</li></ul></li><li><p><strong>程序性罪名识别不足</strong>  </p><ul><li><code>妨害作证</code>（22样本）F1仅0.5098，影响案件侦破中关键证据链的构建  </li><li><code>帮助毁灭、伪造证据</code>（9样本）完全无法识别，存在法律程序漏洞</li></ul></li></ol><hr><p><strong>六、评估结论</strong></p><ol><li><p><strong>优势领域</strong>  </p><ul><li>高频罪名（样本量 &gt; 500）分类准确率稳定在90%以上  </li><li>特定罪名（如<code>盗窃</code>、<code>危险驾驶</code>）达到准生产环境可用水平</li></ul></li><li><p><strong>核心瓶颈</strong>  </p><ul><li>类别极度不平衡导致38.2%的罪名无法有效识别  </li><li>关键法律罪名（样本量50~300区间）存在精确率-召回率失衡问题</li></ul></li><li><p><strong>业务影响</strong>  </p><ul><li>当前模型适用于高频罪名的批量处理，但<strong>不满足司法裁判场景的全面性要求</strong>  </li><li>对新型犯罪（低频罪名）和复合型犯罪（特征交叉罪名）识别能力有限</li></ul></li></ol><h3 id="日后改进措施"><a href="#日后改进措施" class="headerlink" title="日后改进措施"></a>日后改进措施</h3><ol><li>把剩下的150多万条数据集也使用上，增强小样本的学习能力</li><li>进行多轮训练，考虑在后几轮训练时冻结一些参数保证模型稳定。</li></ol><h2 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h2><p>使用代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> ElectraTokenizer, TFElectraModel</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers, Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">MAX_LENGTH = <span class="number">256</span></span><br><span class="line">MODEL_SAVE_PATH = <span class="string">&quot;electra_cnn_legal&quot;</span></span><br><span class="line">LOCAL_MODEL_PATH = <span class="string">&quot;./hfl/chinese-legal-electra-base-disc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 tokenizer 和 electra 模型</span></span><br><span class="line">tokenizer = ElectraTokenizer.from_pretrained(LOCAL_MODEL_PATH)</span><br><span class="line">electra_model = TFElectraModel.from_pretrained(LOCAL_MODEL_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LegalClassifier</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(**kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.electra = electra_model</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = layers.Conv1D(<span class="number">128</span>, <span class="number">3</span>, activation=<span class="string">&#x27;gelu&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2(<span class="number">1e-4</span>))</span><br><span class="line">        <span class="variable language_">self</span>.bn = layers.BatchNormalization()</span><br><span class="line">        <span class="variable language_">self</span>.pool = layers.GlobalMaxPooling1D()</span><br><span class="line">        <span class="variable language_">self</span>.classifier = layers.Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, inputs</span>):</span><br><span class="line">        input_ids, attention_mask = inputs</span><br><span class="line">        outputs = <span class="variable language_">self</span>.electra(input_ids, attention_mask=attention_mask)</span><br><span class="line">        x = outputs.last_hidden_state</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.bn(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.pool(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.classifier(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_config</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;num_classes&quot;</span>: <span class="variable language_">self</span>.classifier.units&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_config</span>(<span class="params">cls, config</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(**config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 label 映射字典</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;accu.txt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    labels = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</span><br><span class="line">label_to_id = &#123;label: i <span class="keyword">for</span> i, label <span class="keyword">in</span> <span class="built_in">enumerate</span>(labels)&#125;</span><br><span class="line">id_to_label = &#123;i: label <span class="keyword">for</span> label, i <span class="keyword">in</span> label_to_id.items()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = tf.keras.models.load_model(</span><br><span class="line">    MODEL_SAVE_PATH,</span><br><span class="line">    custom_objects=&#123;<span class="string">&quot;LegalClassifier&quot;</span>: LegalClassifier&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict_accusation</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text.strip():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;❗️输入文本为空&quot;</span></span><br><span class="line"></span><br><span class="line">    tokens = tokenizer(</span><br><span class="line">        text,</span><br><span class="line">        max_length=MAX_LENGTH,</span><br><span class="line">        truncation=<span class="literal">True</span>,</span><br><span class="line">        padding=<span class="string">&#x27;max_length&#x27;</span>,</span><br><span class="line">        return_tensors=<span class="string">&#x27;tf&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    input_ids = tokens[<span class="string">&quot;input_ids&quot;</span>]</span><br><span class="line">    attention_mask = tokens[<span class="string">&quot;attention_mask&quot;</span>]</span><br><span class="line"></span><br><span class="line">    preds = model.predict((input_ids, attention_mask))</span><br><span class="line">    pred_id = np.argmax(preds, axis=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> id_to_label[pred_id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无限循环预测</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;🔍 犯罪事实罪名预测系统&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入犯罪事实文本，输入 &#x27;Stop&#x27; 可退出。&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        fact = <span class="built_in">input</span>(<span class="string">&quot;\n请输入犯罪事实：\n&gt;&gt;&gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> fact.strip().lower() == <span class="string">&quot;stop&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;👋 已退出预测系统。&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        result = predict_accusation(fact)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;✅ 预测罪名：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250413144050.png" alt="在·"></p><p><img src="/assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250413144235.png" alt="微信图片_20250413144235"></p><p><img src="/assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250413144242.png" alt="微信图片_20250413144242"></p><p>自己瞎写的一个罪名🤣</p><p><img src="/assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250413145119.png" alt="微信图片_20250413145119"></p><h2 id="附：模型在测试集上的表现表格汇总"><a href="#附：模型在测试集上的表现表格汇总" class="headerlink" title="附：模型在测试集上的表现表格汇总"></a>附：模型在测试集上的表现表格汇总</h2><table><thead><tr><th>类别</th><th>precision</th><th>recall</th><th>f1-score</th><th>support</th></tr></thead><tbody><tr><td>串通投标</td><td>0.7500</td><td>0.9000</td><td>0.8182</td><td>20</td></tr><tr><td>交通肇事</td><td>0.9486</td><td>0.9728</td><td>0.9606</td><td>2392</td></tr><tr><td>介绍贿赂</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>22</td></tr><tr><td>以危险方法危害公共安全</td><td>0.7679</td><td>0.3116</td><td>0.4433</td><td>138</td></tr><tr><td>传授犯罪方法</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>5</td></tr><tr><td>传播性病</td><td>1.0000</td><td>0.8333</td><td>0.9091</td><td>12</td></tr><tr><td>伪证</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>20</td></tr><tr><td>伪造、倒卖伪造的有价票证</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>5</td></tr><tr><td>伪造、变造、买卖国家机关公文、证件、印章</td><td>0.8089</td><td>0.8728</td><td>0.8397</td><td>228</td></tr><tr><td>伪造、变造、买卖武装部队公文、证件、印章</td><td>1.0000</td><td>0.5714</td><td>0.7273</td><td>7</td></tr><tr><td>伪造、变造居民身份证</td><td>0.8485</td><td>0.7778</td><td>0.8116</td><td>36</td></tr><tr><td>伪造、变造金融票证</td><td>0.8947</td><td>0.6296</td><td>0.7391</td><td>27</td></tr><tr><td>伪造公司、企业、事业单位、人民团体印章</td><td>0.9108</td><td>0.8291</td><td>0.8680</td><td>234</td></tr><tr><td>伪造货币</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>4</td></tr><tr><td>侮辱</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>8</td></tr><tr><td>侵占</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>13</td></tr><tr><td>侵犯著作权</td><td>0.9636</td><td>0.8833</td><td>0.9217</td><td>60</td></tr><tr><td>保险诈骗</td><td>0.8889</td><td>0.8696</td><td>0.8791</td><td>46</td></tr><tr><td>信用卡诈骗</td><td>0.8546</td><td>0.9158</td><td>0.8841</td><td>475</td></tr><tr><td>倒卖文物</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>倒卖车票、船票</td><td>1.0000</td><td>1.0000</td><td>1.0000</td><td>4</td></tr><tr><td>假冒注册商标</td><td>0.7831</td><td>0.9205</td><td>0.8463</td><td>302</td></tr><tr><td>冒充军人招摇撞骗</td><td>0.8000</td><td>0.9697</td><td>0.8767</td><td>33</td></tr><tr><td>出售、购买、运输假币</td><td>0.4638</td><td>1.0000</td><td>0.6337</td><td>32</td></tr><tr><td>利用影响力受贿</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>11</td></tr><tr><td>制作、复制、出版、贩卖、传播淫秽物品牟利</td><td>0.9583</td><td>0.9583</td><td>0.9583</td><td>24</td></tr><tr><td>制造、贩卖、传播淫秽物品</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>1</td></tr><tr><td>动植物检疫徇私舞弊</td><td>0.9231</td><td>0.8000</td><td>0.8571</td><td>15</td></tr><tr><td>劫持船只、汽车</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>单位受贿</td><td>0.2500</td><td>0.0476</td><td>0.0800</td><td>21</td></tr><tr><td>单位行贿</td><td>0.7068</td><td>0.7627</td><td>0.7337</td><td>177</td></tr><tr><td>危险物品肇事</td><td>1.0000</td><td>0.1250</td><td>0.2222</td><td>8</td></tr><tr><td>危险驾驶</td><td>0.9751</td><td>0.9941</td><td>0.9845</td><td>4876</td></tr><tr><td>受贿</td><td>0.8116</td><td>0.6850</td><td>0.7429</td><td>346</td></tr><tr><td>合同诈骗</td><td>0.6676</td><td>0.7201</td><td>0.6929</td><td>318</td></tr><tr><td>失火</td><td>0.9717</td><td>0.9778</td><td>0.9748</td><td>316</td></tr><tr><td>妨害作证</td><td>0.4483</td><td>0.5909</td><td>0.5098</td><td>22</td></tr><tr><td>妨害信用卡管理</td><td>0.9058</td><td>0.8929</td><td>0.8993</td><td>140</td></tr><tr><td>妨害公务</td><td>0.8929</td><td>0.9646</td><td>0.9274</td><td>311</td></tr><tr><td>容留他人吸毒</td><td>0.9646</td><td>0.9745</td><td>0.9695</td><td>392</td></tr><tr><td>对单位行贿</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>20</td></tr><tr><td>对非国家工作人员行贿</td><td>0.7500</td><td>0.1579</td><td>0.2609</td><td>38</td></tr><tr><td>寻衅滋事</td><td>0.7706</td><td>0.5091</td><td>0.6131</td><td>607</td></tr><tr><td>帮助毁灭、伪造证据</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>9</td></tr><tr><td>帮助犯罪分子逃避处罚</td><td>0.5600</td><td>0.7778</td><td>0.6512</td><td>18</td></tr><tr><td>开设赌场</td><td>0.8465</td><td>0.9259</td><td>0.8844</td><td>405</td></tr><tr><td>引诱、教唆、欺骗他人吸毒</td><td>1.0000</td><td>0.6000</td><td>0.7500</td><td>15</td></tr><tr><td>强制猥亵、侮辱妇女</td><td>0.7436</td><td>0.5686</td><td>0.6444</td><td>51</td></tr><tr><td>强奸</td><td>0.8846</td><td>0.9485</td><td>0.9154</td><td>291</td></tr><tr><td>强迫交易</td><td>0.5625</td><td>0.6429</td><td>0.6000</td><td>28</td></tr><tr><td>强迫他人吸毒</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>2</td></tr><tr><td>强迫劳动</td><td>0.6667</td><td>0.4000</td><td>0.5000</td><td>5</td></tr><tr><td>徇私枉法</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>14</td></tr><tr><td>徇私舞弊不移交刑事案件</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>5</td></tr><tr><td>打击报复证人</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>扰乱无线电通讯管理秩序</td><td>1.0000</td><td>0.0159</td><td>0.0312</td><td>63</td></tr><tr><td>投放危险物质</td><td>0.6374</td><td>0.9831</td><td>0.7733</td><td>59</td></tr><tr><td>抢劫</td><td>0.8310</td><td>0.7804</td><td>0.8049</td><td>378</td></tr><tr><td>抢夺</td><td>0.7442</td><td>0.9195</td><td>0.8226</td><td>174</td></tr><tr><td>拐卖妇女、儿童</td><td>0.8205</td><td>0.9600</td><td>0.8848</td><td>100</td></tr><tr><td>拐骗儿童</td><td>0.7647</td><td>0.6190</td><td>0.6842</td><td>21</td></tr><tr><td>拒不执行判决、裁定</td><td>0.8609</td><td>0.9636</td><td>0.9094</td><td>302</td></tr><tr><td>拒不支付劳动报酬</td><td>0.9601</td><td>0.9779</td><td>0.9689</td><td>271</td></tr><tr><td>招摇撞骗</td><td>0.7975</td><td>0.8690</td><td>0.8317</td><td>145</td></tr><tr><td>招收公务员、学生徇私舞弊</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>7</td></tr><tr><td>持有、使用假币</td><td>1.0000</td><td>0.2778</td><td>0.4348</td><td>54</td></tr><tr><td>持有伪造的发票</td><td>0.8276</td><td>0.8780</td><td>0.8521</td><td>82</td></tr><tr><td>挪用公款</td><td>0.8529</td><td>0.7500</td><td>0.7982</td><td>232</td></tr><tr><td>挪用特定款物</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>4</td></tr><tr><td>挪用资金</td><td>0.7773</td><td>0.7500</td><td>0.7634</td><td>256</td></tr><tr><td>掩饰、隐瞒犯罪所得、犯罪所得收益</td><td>0.9096</td><td>0.7295</td><td>0.8097</td><td>207</td></tr><tr><td>提供侵入、非法控制计算机信息系统程序、工具</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>4</td></tr><tr><td>收买被拐卖的妇女、儿童</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>6</td></tr><tr><td>放火</td><td>0.7898</td><td>0.9288</td><td>0.8537</td><td>267</td></tr><tr><td>故意伤害</td><td>0.8902</td><td>0.9203</td><td>0.9050</td><td>2897</td></tr><tr><td>故意杀人</td><td>0.7563</td><td>0.7354</td><td>0.7457</td><td>325</td></tr><tr><td>故意毁坏财物</td><td>0.7109</td><td>0.7085</td><td>0.7097</td><td>295</td></tr><tr><td>敲诈勒索</td><td>0.8550</td><td>0.6867</td><td>0.7617</td><td>249</td></tr><tr><td>污染环境</td><td>0.9933</td><td>0.9801</td><td>0.9867</td><td>302</td></tr><tr><td>洗钱</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>滥伐林木</td><td>0.8348</td><td>0.9697</td><td>0.8972</td><td>396</td></tr><tr><td>滥用职权</td><td>0.6190</td><td>0.5306</td><td>0.5714</td><td>147</td></tr><tr><td>爆炸</td><td>0.4583</td><td>0.2200</td><td>0.2973</td><td>50</td></tr><tr><td>猥亵儿童</td><td>0.8167</td><td>0.8909</td><td>0.8522</td><td>110</td></tr><tr><td>玩忽职守</td><td>0.8174</td><td>0.8107</td><td>0.8140</td><td>243</td></tr><tr><td>生产、销售不符合安全标准的食品</td><td>0.9091</td><td>0.8874</td><td>0.8981</td><td>293</td></tr><tr><td>生产、销售伪劣产品</td><td>0.7568</td><td>0.4719</td><td>0.5813</td><td>178</td></tr><tr><td>生产、销售伪劣农药、兽药、化肥、种子</td><td>1.0000</td><td>0.2857</td><td>0.4444</td><td>7</td></tr><tr><td>生产、销售假药</td><td>0.9734</td><td>0.9792</td><td>0.9763</td><td>336</td></tr><tr><td>生产、销售有毒、有害食品</td><td>0.9118</td><td>0.9058</td><td>0.9088</td><td>308</td></tr><tr><td>盗伐林木</td><td>0.9119</td><td>0.7500</td><td>0.8231</td><td>276</td></tr><tr><td>盗掘古文化遗址、古墓葬</td><td>1.0000</td><td>0.9804</td><td>0.9901</td><td>51</td></tr><tr><td>盗窃</td><td>0.9589</td><td>0.9827</td><td>0.9707</td><td>5436</td></tr><tr><td>盗窃、侮辱尸体</td><td>1.0000</td><td>0.4286</td><td>0.6000</td><td>7</td></tr><tr><td>破坏交通工具</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>破坏交通设施</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>8</td></tr><tr><td>破坏广播电视设施、公用电信设施</td><td>0.5542</td><td>0.9200</td><td>0.6917</td><td>100</td></tr><tr><td>破坏易燃易爆设备</td><td>0.9706</td><td>0.8462</td><td>0.9041</td><td>39</td></tr><tr><td>破坏生产经营</td><td>0.7071</td><td>0.6731</td><td>0.6897</td><td>104</td></tr><tr><td>破坏电力设备</td><td>0.9180</td><td>0.7778</td><td>0.8421</td><td>72</td></tr><tr><td>破坏监管秩序</td><td>0.6000</td><td>0.9000</td><td>0.7200</td><td>10</td></tr><tr><td>破坏计算机信息系统</td><td>0.4000</td><td>0.1429</td><td>0.2105</td><td>14</td></tr><tr><td>票据诈骗</td><td>0.6316</td><td>0.7742</td><td>0.6957</td><td>31</td></tr><tr><td>私分国有资产</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>12</td></tr><tr><td>窃取、收买、非法提供信用卡信息</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>9</td></tr><tr><td>窝藏、包庇</td><td>0.8432</td><td>0.8361</td><td>0.8397</td><td>238</td></tr><tr><td>窝藏、转移、收购、销售赃物</td><td>0.2222</td><td>0.5000</td><td>0.3077</td><td>8</td></tr><tr><td>窝藏、转移、隐瞒毒品、毒赃</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>组织、领导、参加黑社会性质组织</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>1</td></tr><tr><td>组织、领导传销活动</td><td>0.9888</td><td>0.9565</td><td>0.9724</td><td>184</td></tr><tr><td>绑架</td><td>0.8364</td><td>0.5679</td><td>0.6765</td><td>81</td></tr><tr><td>编造、故意传播虚假恐怖信息</td><td>0.6897</td><td>1.0000</td><td>0.8163</td><td>20</td></tr><tr><td>职务侵占</td><td>0.7276</td><td>0.8423</td><td>0.7807</td><td>279</td></tr><tr><td>聚众冲击国家机关</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>8</td></tr><tr><td>聚众哄抢</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>聚众扰乱公共场所秩序、交通秩序</td><td>0.8889</td><td>0.3077</td><td>0.4571</td><td>26</td></tr><tr><td>聚众扰乱社会秩序</td><td>0.4421</td><td>0.9333</td><td>0.6000</td><td>45</td></tr><tr><td>聚众斗殴</td><td>0.6192</td><td>0.7352</td><td>0.6722</td><td>219</td></tr><tr><td>脱逃</td><td>0.7647</td><td>0.8125</td><td>0.7879</td><td>16</td></tr><tr><td>虐待</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>5</td></tr><tr><td>虐待被监管人</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>虚开发票</td><td>0.8835</td><td>0.9010</td><td>0.8922</td><td>101</td></tr><tr><td>虚开增值税专用发票、用于骗取出口退税、抵扣税款发票</td><td>0.9771</td><td>0.9739</td><td>0.9755</td><td>307</td></tr><tr><td>虚报注册资本</td><td>0.6957</td><td>1.0000</td><td>0.8205</td><td>16</td></tr><tr><td>行贿</td><td>0.6677</td><td>0.8621</td><td>0.7525</td><td>261</td></tr><tr><td>诈骗</td><td>0.8444</td><td>0.7830</td><td>0.8125</td><td>977</td></tr><tr><td>诬告陷害</td><td>0.6667</td><td>0.3571</td><td>0.4651</td><td>28</td></tr><tr><td>诽谤</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>2</td></tr><tr><td>贪污</td><td>0.7799</td><td>0.7977</td><td>0.7887</td><td>262</td></tr><tr><td>贷款诈骗</td><td>0.3333</td><td>0.0323</td><td>0.0588</td><td>31</td></tr><tr><td>赌博</td><td>0.8092</td><td>0.7653</td><td>0.7866</td><td>277</td></tr><tr><td>走私</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>2</td></tr><tr><td>走私、贩卖、运输、制造毒品</td><td>0.9704</td><td>0.9743</td><td>0.9723</td><td>2255</td></tr><tr><td>走私国家禁止进出口的货物、物品</td><td>0.8750</td><td>0.8750</td><td>0.8750</td><td>16</td></tr><tr><td>走私废物</td><td>1.0000</td><td>0.1667</td><td>0.2857</td><td>6</td></tr><tr><td>走私普通货物、物品</td><td>0.9184</td><td>0.9926</td><td>0.9541</td><td>136</td></tr><tr><td>走私武器、弹药</td><td>0.7692</td><td>1.0000</td><td>0.8696</td><td>10</td></tr><tr><td>走私珍贵动物、珍贵动物制品</td><td>0.7368</td><td>0.8750</td><td>0.8000</td><td>16</td></tr><tr><td>过失以危险方法危害公共安全</td><td>0.5143</td><td>0.8182</td><td>0.6316</td><td>22</td></tr><tr><td>过失投放危险物质</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>6</td></tr><tr><td>过失损坏广播电视设施、公用电信设施</td><td>0.5000</td><td>0.8571</td><td>0.6316</td><td>7</td></tr><tr><td>过失损坏武器装备、军事设施、军事通信</td><td>0.6000</td><td>0.7500</td><td>0.6667</td><td>4</td></tr><tr><td>过失致人死亡</td><td>0.7908</td><td>0.4874</td><td>0.6031</td><td>318</td></tr><tr><td>过失致人重伤</td><td>0.6150</td><td>0.8092</td><td>0.6989</td><td>152</td></tr><tr><td>违法发放贷款</td><td>0.7778</td><td>0.9032</td><td>0.8358</td><td>31</td></tr><tr><td>逃税</td><td>0.8636</td><td>0.8636</td><td>0.8636</td><td>22</td></tr><tr><td>遗弃</td><td>0.9231</td><td>0.6000</td><td>0.7273</td><td>20</td></tr><tr><td>重大劳动安全事故</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>60</td></tr><tr><td>重大责任事故</td><td>0.6422</td><td>0.9091</td><td>0.7527</td><td>308</td></tr><tr><td>重婚</td><td>0.9255</td><td>0.9886</td><td>0.9560</td><td>88</td></tr><tr><td>金融凭证诈骗</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>销售假冒注册商标的商品</td><td>0.8147</td><td>0.9410</td><td>0.8733</td><td>271</td></tr><tr><td>隐匿、故意销毁会计凭证、会计帐簿、财务会计报告</td><td>0.7692</td><td>0.8333</td><td>0.8000</td><td>12</td></tr><tr><td>集资诈骗</td><td>0.6774</td><td>0.5060</td><td>0.5793</td><td>83</td></tr><tr><td>非国家工作人员受贿</td><td>0.6550</td><td>0.8008</td><td>0.7206</td><td>256</td></tr><tr><td>非法买卖、运输、携带、持有毒品原植物种子、幼苗</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>1</td></tr><tr><td>非法买卖制毒物品</td><td>0.9200</td><td>0.7931</td><td>0.8519</td><td>29</td></tr><tr><td>非法侵入住宅</td><td>0.7486</td><td>0.6782</td><td>0.7117</td><td>202</td></tr><tr><td>非法出售发票</td><td>0.8000</td><td>0.7619</td><td>0.7805</td><td>21</td></tr><tr><td>非法制造、买卖、运输、储存危险物质</td><td>0.5714</td><td>0.5000</td><td>0.5333</td><td>8</td></tr><tr><td>非法制造、买卖、运输、邮寄、储存枪支、弹药、爆炸物</td><td>0.8310</td><td>0.8806</td><td>0.8551</td><td>268</td></tr><tr><td>非法制造、出售非法制造的发票</td><td>0.2500</td><td>0.0769</td><td>0.1176</td><td>13</td></tr><tr><td>非法制造、销售非法制造的注册商标标识</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>10</td></tr><tr><td>非法占用农用地</td><td>0.9253</td><td>0.9670</td><td>0.9457</td><td>333</td></tr><tr><td>非法吸收公众存款</td><td>0.8423</td><td>0.9570</td><td>0.8960</td><td>279</td></tr><tr><td>非法处置查封、扣押、冻结的财产</td><td>0.8276</td><td>0.3934</td><td>0.5333</td><td>61</td></tr><tr><td>非法拘禁</td><td>0.8144</td><td>0.8556</td><td>0.8345</td><td>277</td></tr><tr><td>非法持有、私藏枪支、弹药</td><td>0.9185</td><td>0.9397</td><td>0.9290</td><td>348</td></tr><tr><td>非法持有毒品</td><td>0.8125</td><td>0.8206</td><td>0.8165</td><td>301</td></tr><tr><td>非法捕捞水产品</td><td>0.9852</td><td>0.9925</td><td>0.9888</td><td>134</td></tr><tr><td>非法携带枪支、弹药、管制刀具、危险物品危及公共安全</td><td>0.3333</td><td>0.0833</td><td>0.1333</td><td>12</td></tr><tr><td>非法收购、运输、出售珍贵、濒危野生动物、珍贵、濒危野生动物制品</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>3</td></tr><tr><td>非法收购、运输、加工、出售国家重点保护植物、国家重点保护植物制品</td><td>0.8636</td><td>0.7451</td><td>0.8000</td><td>51</td></tr><tr><td>非法收购、运输盗伐、滥伐的林木</td><td>0.8000</td><td>0.8276</td><td>0.8136</td><td>29</td></tr><tr><td>非法狩猎</td><td>0.9560</td><td>0.9016</td><td>0.9280</td><td>193</td></tr><tr><td>非法猎捕、杀害珍贵、濒危野生动物</td><td>0.7234</td><td>0.7907</td><td>0.7556</td><td>43</td></tr><tr><td>非法生产、买卖警用装备</td><td>1.0000</td><td>0.8571</td><td>0.9231</td><td>7</td></tr><tr><td>非法生产、销售间谍专用器材</td><td>0.7222</td><td>1.0000</td><td>0.8387</td><td>13</td></tr><tr><td>非法种植毒品原植物</td><td>1.0000</td><td>0.9941</td><td>0.9970</td><td>337</td></tr><tr><td>非法组织卖血</td><td>0.9091</td><td>1.0000</td><td>0.9524</td><td>10</td></tr><tr><td>非法经营</td><td>0.8908</td><td>0.7361</td><td>0.8061</td><td>288</td></tr><tr><td>非法获取公民个人信息</td><td>0.9394</td><td>0.8378</td><td>0.8857</td><td>37</td></tr><tr><td>非法获取国家秘密</td><td>0.5000</td><td>0.1667</td><td>0.2500</td><td>6</td></tr><tr><td>非法行医</td><td>0.9755</td><td>0.9789</td><td>0.9772</td><td>285</td></tr><tr><td>非法转让、倒卖土地使用权</td><td>0.8864</td><td>0.7647</td><td>0.8211</td><td>51</td></tr><tr><td>非法进行节育手术</td><td>1.0000</td><td>0.8182</td><td>0.9000</td><td>22</td></tr><tr><td>非法采伐、毁坏国家重点保护植物</td><td>0.9077</td><td>0.9031</td><td>0.9054</td><td>196</td></tr><tr><td>非法采矿</td><td>0.9739</td><td>0.9106</td><td>0.9412</td><td>123</td></tr><tr><td>骗取贷款、票据承兑、金融票证</td><td>0.8188</td><td>0.9457</td><td>8777</td><td>258</td></tr><tr><td>高利转贷</td><td>0.0000</td><td>0.0000</td><td>0.0000</td><td>2</td></tr><tr><td><strong>accuracy</strong>​</td><td></td><td></td><td><strong>0.8847</strong></td><td>39317</td></tr><tr><td><strong>macro avg</strong>​</td><td>0.6260</td><td>0.5928</td><td>0.5890</td><td>39317</td></tr><tr><td><strong>weighted avg</strong></td><td>0.8798</td><td>0.8847</td><td>0.8772</td><td>39317</td></tr></tbody></table><h2 id="附：参考文献"><a href="#附：参考文献" class="headerlink" title="附：参考文献"></a>附：参考文献</h2><p><a href="https://d.wanfangdata.com.cn/thesis/D01697595">基于BERT词向量和Attention-CNN的智能司法研究-学位-万方数据知识服务平台</a></p><p><a href="https://blog.csdn.net/m0_71417856/article/details/136298172">使用GPU运行TensorFlow模型的教程_tensorflow gpu-CSDN博客</a></p><p><a href="https://tensorflow.google.cn/install/source_windows?hl=en#gpu">Build from source on Windows  | TensorFlow</a></p><h2 id="附：大文件上传问题"><a href="#附：大文件上传问题" class="headerlink" title="附：大文件上传问题"></a>附：大文件上传问题</h2><p>由于100MB文件限制，删除以下文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> <span class="string">&quot;E:\education\ML\realProject\SelectionFromJingYunSUn\classcreme\hfl\chinese-legal-electra-base-disc\pytorch_model.bin&quot;</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> <span class="string">&quot;E:\education\ML\realProject\SelectionFromJingYunSUn\classcreme\hfl\chinese-legal-electra-base-disc\tf_model.h5&quot;</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> <span class="string">&quot;E:\education\ML\realProject\SelectionFromJingYunSUn\classcreme\trainset\train.json&quot;</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> <span class="string">&quot;E:\education\ML\realProject\SelectionFromJingYunSUn\classcreme\trainset\test.json&quot;</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> <span class="string">&quot;E:\education\ML\realProject\SelectionFromJingYunSUn\classcreme\trainset\data_train.json&quot;</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> <span class="string">&quot;E:\education\ML\realProject\SelectionFromJingYunSUn\classcreme\electra_cnn_legal\variables\variables.data-00000-of-00001&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 自然语言处理 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈林俊杰最喜欢的和弦</title>
      <link href="/2025/05/15/%E6%B5%85%E8%B0%88%E6%9E%97%E4%BF%8A%E6%9D%B0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E5%92%8C%E5%BC%A6/"/>
      <url>/2025/05/15/%E6%B5%85%E8%B0%88%E6%9E%97%E4%BF%8A%E6%9D%B0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E5%92%8C%E5%BC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="浅谈林俊杰最喜欢的和弦"><a href="#浅谈林俊杰最喜欢的和弦" class="headerlink" title="浅谈林俊杰最喜欢的和弦"></a>浅谈林俊杰最喜欢的和弦</h2><h2 id="4536251和弦组合"><a href="#4536251和弦组合" class="headerlink" title="4536251和弦组合"></a><code>4536251</code>和弦组合</h2><p>他最喜欢<code>4536251</code>和弦组合😊🥰，也就是：</p><ul><li>F</li><li>G</li><li>Em</li><li>Am</li><li>Dm7 </li><li>G</li><li>C</li><li>C7</li></ul><p>每一个和弦两拍子，一小节四拍。一次和弦循环总共四小节或者八小节。</p><h3 id="四小节示例"><a href="#四小节示例" class="headerlink" title="四小节示例"></a>四小节示例</h3><table><thead><tr><th>小节数</th><th>和弦</th></tr></thead><tbody><tr><td>1</td><td>F    G</td></tr><tr><td>2</td><td>Em    Am</td></tr><tr><td>3</td><td>Dm7    G</td></tr><tr><td>4</td><td>C    C7</td></tr></tbody></table><p>代表歌曲：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">《背对背拥抱》：我们背对背拥抱</span><br><span class="line">《always online》:准备好了three two one ~</span><br><span class="line">《那些你很冒险的梦》：那些你很冒险的梦</span><br><span class="line">《关键词》 ：落叶的位置</span><br><span class="line">《修炼爱情》：修炼爱情的心酸</span><br><span class="line">《最长的电源》：别融化了眼泪~ (jay zhou的歌哈哈)：</span><br><span class="line">《心墙》：你的心有一道墙</span><br><span class="line">《一百天》</span><br><span class="line">《醉赤壁》：确认过眼神~</span><br><span class="line">《爱笑的眼睛》：这爱的城市虽然拥挤</span><br><span class="line">《裹着心的光》：心里裹着光的人 世界 很宽 ~</span><br></pre></td></tr></table></figure><h3 id="八小节示例"><a href="#八小节示例" class="headerlink" title="八小节示例"></a>八小节示例</h3><table><thead><tr><th>小节数</th><th>和弦</th></tr></thead><tbody><tr><td>1</td><td>F</td></tr><tr><td>2</td><td>G</td></tr><tr><td>3</td><td>Em</td></tr><tr><td>4</td><td>Am</td></tr><tr><td>5</td><td>Dm7</td></tr><tr><td>6</td><td>G</td></tr><tr><td>7</td><td>C</td></tr><tr><td>8</td><td>C7</td></tr></tbody></table><p>代表歌曲：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">《她说》：等不到天黑，烟火不会太完美~</span><br><span class="line">《期待爱》</span><br><span class="line">《手心的蔷薇》</span><br></pre></td></tr></table></figure><h2 id="我设计的《串烧》歌曲"><a href="#我设计的《串烧》歌曲" class="headerlink" title="我设计的《串烧》歌曲"></a>我设计的《串烧》歌曲</h2><p>先唱四拍的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">和弦走向</span><br><span class="line">F    G    Em    Am    Dm7    G    C    C7</span><br><span class="line">我们背对背拥抱 滥用沉默在咆哮 爱情来不及变老 葬送在烽火的玩笑</span><br><span class="line">准备好了 three two one I&#x27;m always online 和你 one to one 爱开始扩散 我们连结了 穿越 天空 银河 oh oh~</span><br><span class="line">开始倒数 three two one 删除我的孤单 more and more 尽是深刻 爱亮了 爱笑了 I&#x27;m always online~</span><br><span class="line">那些你很冒险的梦 我陪你去疯 折纸飞机碰到雨天 终究会坠落</span><br><span class="line">落叶的位置 谱出一首诗 时间在消逝 我们的故事开始</span><br><span class="line">修炼爱情的悲欢 我们这些努力不简单 别融化了眼泪 你妆都花了 要我怎么记得</span><br><span class="line">几年前的幻想 几年后的原谅 为一张脸去养一身伤 你说你会哭 不是因为在乎</span><br><span class="line">你的心有一道墙 但我发现一扇窗 偶尔透出一丝暖暖的微光</span><br><span class="line">心里裹着光 的人 世界 很宽 出发就走得到 来时路不会被 剪断</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">停！</span><br><span class="line">再唱八拍子的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们爱的没有错~ 只是美丽的独秀 太折磨 她说无所谓 只要能在夜里翻来覆去的时候有寄托~ </span><br><span class="line">等不到天黑 烟火不会太完美 回忆烧成灰 还是等不到结尾 他曾说的无所谓 我怕一天一天被摧毁~</span><br><span class="line">手心的蔷薇 刺伤而不自觉 你值得被疼爱 你懂我的期待 绚烂后枯萎 经过几个圆缺 有我在~</span><br></pre></td></tr></table></figure><p><video id="video" controls src="/assets/0b2f4184a0e1f693e58d1c94541fcd05.mp4" preload="none"></video></p><p><video id="video" controls src="assets/08dd0cd37e618a240a23087e060973a9.mp4" preload="none"></video></p>]]></content>
      
      
      <categories>
          
          <category> 林俊杰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 林俊杰 </tag>
            
            <tag> 乐理知识 </tag>
            
            <tag> 吉他弹唱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Scaner</title>
      <link href="/2025/04/21/Java%20Scaner/"/>
      <url>/2025/04/21/Java%20Scaner/</url>
      
        <content type="html"><![CDATA[<h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><p><code>Scanner</code> 类是 Java 中一个非常常用的工具类，用于获取用户输入、读取文件、解析字符串等。让我们系统地学习一下它的用法吧！🌟</p><hr><h2 id="🌱-1-导入-Scanner-类"><a href="#🌱-1-导入-Scanner-类" class="headerlink" title="🌱 1. 导入 Scanner 类"></a><strong>🌱 1. 导入 Scanner 类</strong></h2><p><code>Scanner</code> 类属于 <code>java.util</code> 包，需要先导入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><hr><h2 id="📝-2-创建-Scanner-对象"><a href="#📝-2-创建-Scanner-对象" class="headerlink" title="📝 2. 创建 Scanner 对象"></a><strong>📝 2. 创建 Scanner 对象</strong></h2><p>使用 <code>System.in</code> 创建一个 <code>Scanner</code> 对象，从控制台获取输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><hr><h2 id="💬-3-常用方法"><a href="#💬-3-常用方法" class="headerlink" title="💬 3. 常用方法"></a><strong>💬 3. 常用方法</strong></h2><h3 id="📌-3-1-接收不同类型输入"><a href="#📌-3-1-接收不同类型输入" class="headerlink" title="📌 3.1 接收不同类型输入"></a><strong>📌 3.1 接收不同类型输入</strong></h3><table><thead><tr><th>方法</th><th>数据类型</th><th>示例</th></tr></thead><tbody><tr><td><code>nextLine()</code></td><td><code>String</code></td><td><code>scanner.nextLine()</code></td></tr><tr><td><code>next()</code></td><td><code>String</code>（无空格）</td><td><code>scanner.next()</code></td></tr><tr><td><code>nextInt()</code></td><td><code>int</code></td><td><code>scanner.nextInt()</code></td></tr><tr><td><code>nextDouble()</code></td><td><code>double</code></td><td><code>scanner.nextDouble()</code></td></tr><tr><td><code>nextFloat()</code></td><td><code>float</code></td><td><code>scanner.nextFloat()</code></td></tr><tr><td><code>nextLong()</code></td><td><code>long</code></td><td><code>scanner.nextLong()</code></td></tr><tr><td><code>nextBoolean()</code></td><td><code>boolean</code></td><td><code>scanner.nextBoolean()</code></td></tr></tbody></table><p><strong>🌰 示例：读取不同类型的数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你的名字: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();  <span class="comment">// 接收字符串</span></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你的年龄: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();  <span class="comment">// 接收整数</span></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你的身高 (米): &quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> scanner.nextDouble();  <span class="comment">// 接收小数</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;你好, &quot;</span> + name + <span class="string">&quot;，年龄: &quot;</span> + age + <span class="string">&quot;，身高: &quot;</span> + height + <span class="string">&quot;米&quot;</span>);</span><br><span class="line"></span><br><span class="line">        scanner.close();  <span class="comment">// 关闭 Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🖥️ <strong>运行示例输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入你的名字: Alice</span><br><span class="line">请输入你的年龄: 22</span><br><span class="line">请输入你的身高 (米): 1.65</span><br><span class="line">你好, Alice，年龄: 22，身高: 1.65米</span><br></pre></td></tr></table></figure><hr><h2 id="🔍-4-判断输入（检测是否有下一个）"><a href="#🔍-4-判断输入（检测是否有下一个）" class="headerlink" title="🔍 4. 判断输入（检测是否有下一个）"></a><strong>🔍 4. 判断输入（检测是否有下一个）</strong></h2><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>hasNext()</code></td><td>判断是否有下一个 <code>String</code></td></tr><tr><td><code>hasNextInt()</code></td><td>判断是否有下一个 <code>int</code></td></tr><tr><td><code>hasNextDouble()</code></td><td>判断是否有下一个 <code>double</code></td></tr><tr><td><code>hasNextBoolean()</code></td><td>判断是否有下一个 <code>boolean</code></td></tr></tbody></table><p><strong>🌰 示例：判断输入类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入一个整数: &quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;你输入了整数: &quot;</span> + num);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这不是一个有效的整数！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure><hr><h2 id="🔄-5-循环输入"><a href="#🔄-5-循环输入" class="headerlink" title="🔄 5. 循环输入"></a><strong>🔄 5. 循环输入</strong></h2><p><strong>🌰 示例：不断读取直到输入 <code>exit</code> 为止</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入文字 (输入 &#x27;exit&#x27; 退出):&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;exit&quot;</span>.equalsIgnoreCase(input)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序已退出！&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;你输入的是: &quot;</span> + input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure><hr><h2 id="⚠️-6-注意事项"><a href="#⚠️-6-注意事项" class="headerlink" title="⚠️ 6. 注意事项"></a><strong>⚠️ 6. 注意事项</strong></h2><h3 id="❌-nextLine-与其他-next-方法混用问题"><a href="#❌-nextLine-与其他-next-方法混用问题" class="headerlink" title="❌ nextLine() 与其他 next() 方法混用问题"></a><strong>❌ nextLine() 与其他 next() 方法混用问题</strong></h3><p><code>nextLine()</code> 会读取换行符，如果前面用 <code>nextInt()</code>、<code>nextDouble()</code> 等方法，换行符未消费，<code>nextLine()</code> 会直接读取这个换行符。</p><p>在<code>Java</code>中，<code>Scanner</code>类的<code>nextLine()</code>方法用于读取一行文本，它会消费到行末的换行符。而<code>next()</code>方法用于读取下一个单词，它会在遇到空格、制表符、换行符等空白字符时停止读取，但不会消费空格，只是将其作为分隔符来确定单词的边界。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">word1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">String</span> <span class="variable">word2</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">        System.out.println(word1);  </span><br><span class="line">        System.out.println(word2);  </span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure><p><strong>❌ 错误示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入年龄: &quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">System.out.print(<span class="string">&quot;请输入名字: &quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();  <span class="comment">// 会直接跳过！</span></span><br><span class="line">System.out.println(<span class="string">&quot;年龄: &quot;</span> + age + <span class="string">&quot;，名字: &quot;</span> + name);</span><br></pre></td></tr></table></figure><p><strong>✅ 解决方法：在 <code>nextLine()</code> 前加一个空的 <code>nextLine()</code> 来消费换行符：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入年龄: &quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">scanner.nextLine();  <span class="comment">// 消费换行符</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输入名字: &quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;年龄: &quot;</span> + age + <span class="string">&quot;，名字: &quot;</span> + name);</span><br></pre></td></tr></table></figure><hr><h2 id="✅-7-小练习"><a href="#✅-7-小练习" class="headerlink" title="✅ 7. 小练习"></a><strong>✅ 7. 小练习</strong></h2><p>1️⃣ 编写一个程序，要求用户输入姓名、年龄、成绩（浮点数），并输出这些信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JudegeScore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">Name</span> <span class="operator">=</span> sca.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">Age</span> <span class="operator">=</span> sca.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">        <span class="type">float</span> <span class="variable">Score</span> <span class="operator">=</span> sca.nextFloat();</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + Name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + Age); </span><br><span class="line">        System.out.println(<span class="string">&quot;成绩：&quot;</span> + Score);</span><br><span class="line">        sca.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2️⃣ 使用 <code>hasNextInt()</code> 检测用户是否输入一个整数，直到输入有效数字为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//使用 hasNextInt检测用户是否输入一个整数，直到输入有效数字为止。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasIntt</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!sca.hasNextInt())&#123;</span><br><span class="line">            sca.next();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的整数是：&quot;</span> + sca.nextInt());</span><br><span class="line">        sca.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3️⃣ 编写一个简单的计算器，支持加、减、乘、除操作。</p><hr><p><code>Scanner</code> 类非常强大，适用于用户交互、文件读取和数据解析。练习起来吧！💪💻 如果有问题或者需要更多例题，告诉我！🚀✨</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Character</title>
      <link href="/2025/04/21/Java%20Character/"/>
      <url>/2025/04/21/Java%20Character/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Character-类"><a href="#Java-Character-类" class="headerlink" title="Java Character 类"></a>Java Character 类</h1><p>在 Java 中，<code>Character</code> 类是 <code>java.lang</code> 包的一部分，它是<strong>基本数据类型 <code>char</code> 的包装类</strong>。<code>Character</code> 类提供了一系列<strong>实用方法</strong>，用于操作、判断和转换字符。今天我们就来系统学习这个类！🚀</p><hr><h2 id="1️⃣-基本概述"><a href="#1️⃣-基本概述" class="headerlink" title="1️⃣ 基本概述"></a><strong>1️⃣ 基本概述</strong></h2><ul><li><strong><code>char</code> 是基本数据类型</strong>，表示一个 16 位的 Unicode 字符（如 <code>&#39;A&#39;</code>、<code>&#39;中&#39;</code>、<code>&#39;9&#39;</code> 等）。</li><li><strong><code>Character</code> 是包装类</strong>，用于将 <code>char</code> 封装为一个对象，并提供丰富的方法操作字符。</li></ul><p><strong>声明示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;                     <span class="comment">// 基本类型</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">character</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;         <span class="comment">// 自动装箱为 Character 对象</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">character2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;B&#x27;</span>); <span class="comment">// 显式创建对象（已过时，不推荐）</span></span><br></pre></td></tr></table></figure><hr><h2 id="2️⃣-常用方法"><a href="#2️⃣-常用方法" class="headerlink" title="2️⃣ 常用方法"></a><strong>2️⃣ 常用方法</strong></h2><h3 id="🔹-判断字符类型的方法"><a href="#🔹-判断字符类型的方法" class="headerlink" title="🔹 判断字符类型的方法"></a><strong>🔹 判断字符类型的方法</strong></h3><p>这些方法会返回一个布尔值，告诉你这个字符属于哪种类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterCheckExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(Character.isLetter(ch));       <span class="comment">// 判断是否是字母 -&gt; true</span></span><br><span class="line">        System.out.println(Character.isDigit(ch));        <span class="comment">// 判断是否是数字 -&gt; false</span></span><br><span class="line">        System.out.println(Character.isUpperCase(ch));    <span class="comment">// 判断是否是大写字母 -&gt; true</span></span><br><span class="line">        System.out.println(Character.isLowerCase(ch));    <span class="comment">// 判断是否是小写字母 -&gt; false</span></span><br><span class="line">        System.out.println(Character.isWhitespace(<span class="string">&#x27; &#x27;</span>));  <span class="comment">// 判断是否是空白字符 -&gt; true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符转换的方法"><a href="#🔹-字符转换的方法" class="headerlink" title="🔹 字符转换的方法"></a><strong>🔹 字符转换的方法</strong></h3><p>这些方法用于对字符进行大小写、数字等转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterConversionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(Character.toUpperCase(ch));    <span class="comment">// 转大写 -&gt; &#x27;A&#x27;</span></span><br><span class="line">        System.out.println(Character.toLowerCase(<span class="string">&#x27;Z&#x27;</span>));   <span class="comment">// 转小写 -&gt; &#x27;z&#x27;</span></span><br><span class="line">        System.out.println(Character.forDigit(<span class="number">9</span>, <span class="number">10</span>));    <span class="comment">// 数字转字符 -&gt; &#x27;9&#x27;</span></span><br><span class="line">        System.out.println(Character.digit(<span class="string">&#x27;8&#x27;</span>, <span class="number">10</span>));     <span class="comment">// 字符转数字 -&gt; 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="🔹-判断字符-Unicode-编码范围"><a href="#🔹-判断字符-Unicode-编码范围" class="headerlink" title="🔹 判断字符 Unicode 编码范围"></a><strong>🔹 判断字符 Unicode 编码范围</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnicodeCheckExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(Character.UnicodeBlock.of(ch));       <span class="comment">// 判断字符所属的 Unicode 区块 -&gt; CJK Unified Ideographs</span></span><br><span class="line">        System.out.println(Character.isSurrogate(ch));           <span class="comment">// 判断是否是代理字符 -&gt; false</span></span><br><span class="line">        System.out.println(Character.charCount(ch));             <span class="comment">// 判断字符占几个代码单元 -&gt; 1（普通字符是 1，特殊符号可能是 2）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3️⃣-Character-类的静态常量"><a href="#3️⃣-Character-类的静态常量" class="headerlink" title="3️⃣ Character 类的静态常量"></a><strong>3️⃣ Character 类的静态常量</strong></h2><p><code>Character</code> 类中定义了一些有用的字符类型常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Character.MIN_VALUE);      <span class="comment">// 最小字符 -&gt; &#x27;\u0000&#x27;</span></span><br><span class="line">System.out.println(Character.MAX_VALUE);      <span class="comment">// 最大字符 -&gt; &#x27;\uffff&#x27;</span></span><br><span class="line">System.out.println(Character.MIN_RADIX);      <span class="comment">// 最小进制 -&gt; 2</span></span><br><span class="line">System.out.println(Character.MAX_RADIX);      <span class="comment">// 最大进制 -&gt; 36</span></span><br></pre></td></tr></table></figure><hr><h2 id="4️⃣-自动装箱与拆箱"><a href="#4️⃣-自动装箱与拆箱" class="headerlink" title="4️⃣ 自动装箱与拆箱"></a><strong>4️⃣ 自动装箱与拆箱</strong></h2><p>Java 提供了<strong>自动装箱（autoboxing）和自动拆箱（unboxing）</strong>，可以让基本类型 <code>char</code> 和包装类 <code>Character</code> 相互转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoboxingExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动装箱</span></span><br><span class="line">        <span class="type">Character</span> <span class="variable">character</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动拆箱</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> character;</span><br><span class="line"></span><br><span class="line">        System.out.println(character);  <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line">        System.out.println(ch);         <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5️⃣-字符比较"><a href="#5️⃣-字符比较" class="headerlink" title="5️⃣ 字符比较"></a><strong>5️⃣ 字符比较</strong></h2><h3 id="🔹-使用-equals-方法比较对象"><a href="#🔹-使用-equals-方法比较对象" class="headerlink" title="🔹 使用 equals() 方法比较对象"></a><strong>🔹 使用 <code>equals()</code> 方法比较对象</strong></h3><p>包装类比较不能直接用 <code>==</code>，要用 <code>.equals()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Character</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">Character</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(ch1.equals(ch2));  <span class="comment">// true</span></span><br><span class="line">System.out.println(ch1 == ch2);       <span class="comment">// true（由于字符范围小，Java 对字符池进行了缓存，超出范围会返回 false）</span></span><br></pre></td></tr></table></figure><hr><h2 id="6️⃣-综合例子"><a href="#6️⃣-综合例子" class="headerlink" title="6️⃣ 综合例子"></a><strong>6️⃣ 综合例子</strong></h2><p><strong>需求：判断一个字符是数字、字母还是其他，并将字母统一转换为大写。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个字符：&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">input</span> <span class="operator">=</span> scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(input)) &#123;</span><br><span class="line">            System.out.println(input + <span class="string">&quot; 是一个数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLetter(input)) &#123;</span><br><span class="line">            System.out.println(input + <span class="string">&quot; 是一个字母，转换为大写：&quot;</span> + Character.toUpperCase(input));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(input + <span class="string">&quot; 是一个其他字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入一个字符：a</span><br><span class="line">a 是一个字母，转换为大写：A</span><br></pre></td></tr></table></figure><hr><h2 id="7️⃣-小技巧-注意事项"><a href="#7️⃣-小技巧-注意事项" class="headerlink" title="7️⃣ 小技巧 &amp; 注意事项"></a><strong>7️⃣ 小技巧 &amp; 注意事项</strong></h2><ul><li><strong><code>Character</code> 类的对象是不可变的</strong>。一旦创建，就不能更改其值。</li><li><strong>字符比较推荐用 <code>equals()</code>，不要直接用 <code>==</code>，避免对象引用问题。</strong></li><li><strong><code>Character</code> 类非常适合字符校验、转换、处理 Unicode 字符。</strong></li></ul><hr><h2 id="方法表格"><a href="#方法表格" class="headerlink" title="方法表格"></a>方法表格</h2><p><code>Character</code> 类是 Java 中用于处理单个字符的包装类，提供了许多实用方法来判断、转换和操作字符。我们来总结一下它的重要方法！💡</p><hr><h3 id="🔍-判断类方法（返回布尔值）"><a href="#🔍-判断类方法（返回布尔值）" class="headerlink" title="🔍 判断类方法（返回布尔值）"></a><strong>🔍 判断类方法（返回布尔值）</strong></h3><table><thead><tr><th>方法</th><th>功能说明</th><th>示例</th></tr></thead><tbody><tr><td><code>isLetter(char ch)</code></td><td>判断是否为字母</td><td><code>Character.isLetter(&#39;A&#39;)</code> → <code>true</code></td></tr><tr><td><code>isDigit(char ch)</code></td><td>判断是否为数字</td><td><code>Character.isDigit(&#39;8&#39;)</code> → <code>true</code></td></tr><tr><td><code>isLetterOrDigit(char ch)</code></td><td>判断是否为字母或数字</td><td><code>Character.isLetterOrDigit(&#39;$&#39;)</code> → <code>false</code></td></tr><tr><td><code>isWhitespace(char ch)</code></td><td>判断是否为空白字符</td><td><code>Character.isWhitespace(&#39; &#39;)</code> → <code>true</code></td></tr><tr><td><code>isUpperCase(char ch)</code></td><td>判断是否为大写字母</td><td><code>Character.isUpperCase(&#39;A&#39;)</code> → <code>true</code></td></tr><tr><td><code>isLowerCase(char ch)</code></td><td>判断是否为小写字母</td><td><code>Character.isLowerCase(&#39;a&#39;)</code> → <code>true</code></td></tr><tr><td><code>isJavaIdentifierStart(char ch)</code></td><td>判断字符是否可以作为 Java 标识符开头</td><td><code>Character.isJavaIdentifierStart(&#39;_&#39;)</code> → <code>true</code></td></tr><tr><td><code>isJavaIdentifierPart(char ch)</code></td><td>判断字符是否可以作为 Java 标识符的一部分</td><td><code>Character.isJavaIdentifierPart(&#39;1&#39;)</code> → <code>true</code></td></tr></tbody></table><hr><h3 id="🔄-转换类方法"><a href="#🔄-转换类方法" class="headerlink" title="🔄 转换类方法"></a><strong>🔄 转换类方法</strong></h3><table><thead><tr><th>方法</th><th>功能说明</th><th>示例</th></tr></thead><tbody><tr><td><code>toUpperCase(char ch)</code></td><td>转换为大写字母</td><td><code>Character.toUpperCase(&#39;a&#39;)</code> → <code>&#39;A&#39;</code></td></tr><tr><td><code>toLowerCase(char ch)</code></td><td>转换为小写字母</td><td><code>Character.toLowerCase(&#39;A&#39;)</code> → <code>&#39;a&#39;</code></td></tr><tr><td><code>toString(char ch)</code></td><td>将字符转换为字符串</td><td><code>Character.toString(&#39;J&#39;)</code> → <code>&quot;J&quot;</code></td></tr></tbody></table><hr><h3 id="💡-获取类方法"><a href="#💡-获取类方法" class="headerlink" title="💡 获取类方法"></a><strong>💡 获取类方法</strong></h3><table><thead><tr><th>方法</th><th>功能说明</th><th>示例</th></tr></thead><tbody><tr><td><code>getType(char ch)</code></td><td>获取字符的类型（如字母、数字等）</td><td><code>Character.getType(&#39;A&#39;)</code> → <code>1</code>（代表字母）</td></tr><tr><td><code>getNumericValue(char ch)</code></td><td>获取字符的数值（如数字字符的数值）</td><td><code>Character.getNumericValue(&#39;8&#39;)</code> → <code>8</code></td></tr><tr><td><code>charCount(int codePoint)</code></td><td>判断 Unicode 字符是否需要一个或两个 <code>char</code> 单元表示</td><td><code>Character.charCount(65)</code> → <code>1</code></td></tr><tr><td><code>toChars(int codePoint)</code></td><td>将 Unicode 代码点转换为字符数组</td><td><code>Character.toChars(65)</code> → <code>[&#39;A&#39;]</code></td></tr></tbody></table><hr><h3 id="🧠-特殊方法"><a href="#🧠-特殊方法" class="headerlink" title="🧠 特殊方法"></a><strong>🧠 特殊方法</strong></h3><table><thead><tr><th>方法</th><th>功能说明</th><th>示例</th></tr></thead><tbody><tr><td><code>compare(char x, char y)</code></td><td>比较两个字符大小</td><td><code>Character.compare(&#39;A&#39;, &#39;B&#39;)</code> → <code>-1</code></td></tr><tr><td><code>hashCode(char ch)</code></td><td>获取字符的哈希码</td><td><code>Character.hashCode(&#39;J&#39;)</code> → <code>74</code></td></tr><tr><td><code>valueOf(char ch)</code></td><td>将字符转换为 <code>Character</code> 对象</td><td><code>Character.valueOf(&#39;J&#39;)</code> → <code>&#39;J&#39;</code>（对象）</td></tr></tbody></table><hr><h2 id="8️⃣-练习题"><a href="#8️⃣-练习题" class="headerlink" title="8️⃣ 练习题"></a><strong>8️⃣ 练习题</strong></h2><p><strong>🧠 问题 1：判断一个输入字符是否是英文字母，并转换为相反大小写（大写转小写，小写转大写）。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Charrr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个字符：&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">input</span> <span class="operator">=</span> scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">result</span> <span class="operator">=</span> (Character.isLetter(input)) ? (Character.isUpperCase(input)) ? Character.toLowerCase(input) : Character.toUpperCase(input) : <span class="string">&#x27;否&#x27;</span>;</span><br><span class="line">        System.out.print(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>🧠 问题 2：编写一个方法，统计字符串中数字、字母和其他字符的个数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//编写一个方法，统计字符串中数字、字母和其他字符的个数。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Count</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">int</span> <span class="variable">number_</span> <span class="operator">=</span> <span class="number">0</span>, character_ = <span class="number">0</span>, space = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; input.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">CureentChar</span> <span class="operator">=</span> input.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(CureentChar))&#123;</span><br><span class="line">                number_++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLetter(CureentChar)) &#123;</span><br><span class="line">                character_++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isSpaceChar(CureentChar)) &#123;</span><br><span class="line">                space++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println( <span class="string">&quot;字符的数量是: &quot;</span> + character_ );</span><br><span class="line">        System.out.println(<span class="string">&quot;数字的数量是: &quot;</span> + number_);</span><br><span class="line">        System.out.println(<span class="string">&quot;空白字符的数量是: &quot;</span> + space);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入字符串：sdffffff 4444 <span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span> ;[</span><br><span class="line">字符的数量是: 8</span><br><span class="line">数字的数量是: 4</span><br><span class="line">空白字符的数量是: 3</span><br></pre></td></tr></table></figure><p><strong>🧠 问题 3：将一个字符数组中的所有小写字母转为大写字母。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReplaceUS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入字字符串&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(scan.nextLine());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; input.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLowerCase(input.charAt(i)))&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">rp</span> <span class="operator">=</span> Character.toUpperCase(input.charAt(i));</span><br><span class="line">                input.replace(i,i+<span class="number">1</span>,String.valueOf(rp));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;转换后的字符串是：&quot;</span> + input);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入字字符串</span><br><span class="line">fadsfsagFFFF;;;79779</span><br><span class="line">转换后的字符串是：FADSFSAGFFFF;;;79779</span><br></pre></td></tr></table></figure><p>注意，<code>replace(int start, int end, String str)</code>接受<code>String str</code>类，需要使用<code>String.valueOf(char)</code>进行类型转换后再传参。</p><hr><p>学会 <code>Character</code> 类，你就可以在字符处理、校验和转换中游刃有余啦！💡 有问题或练习需要解答，欢迎告诉我！💬🌱</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 抽象类</title>
      <link href="/2025/04/21/Java%20%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2025/04/21/Java%20%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-抽象类详细教学"><a href="#Java-抽象类详细教学" class="headerlink" title="Java 抽象类详细教学"></a><strong>Java 抽象类详细教学</strong></h1><h2 id="1-什么是抽象类？"><a href="#1-什么是抽象类？" class="headerlink" title="1. 什么是抽象类？"></a><strong>1. 什么是抽象类？</strong></h2><p>抽象类（Abstract Class）是 Java 面向对象编程中的一种特殊类，它不能被实例化，只能被继承。抽象类的主要作用是作为父类，为子类提供通用的属性和方法，同时规定某些必须由子类实现的方法。</p><p><strong>关键点：</strong></p><ul><li><strong>不能实例化</strong>（<code>new</code> 关键字不能用于抽象类）。</li><li><strong>可以包含抽象方法</strong>（没有方法体的方法）。</li><li><strong>可以包含普通方法</strong>（有方法体的方法）。</li><li><strong>子类必须实现抽象方法</strong>，否则子类也必须声明为抽象类。</li></ul><hr><h2 id="2-抽象类的定义"><a href="#2-抽象类的定义" class="headerlink" title="2. 抽象类的定义"></a><strong>2. 抽象类的定义</strong></h2><p>使用 <code>abstract</code> 关键字定义一个抽象类，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类 Animal</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法（没有方法体，子类必须实现）</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体方法（有方法体，子类可直接使用或重写）</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sleeping...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-抽象类的子类"><a href="#3-抽象类的子类" class="headerlink" title="3. 抽象类的子类"></a><strong>3. 抽象类的子类</strong></h2><p>如果一个类继承了抽象类，必须实现其所有抽象方法，否则该类也必须声明为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体子类 Dog 继承抽象类 Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 不能直接创建抽象类对象</span></span><br><span class="line">        <span class="comment">// Animal a = new Animal(); // 错误！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以使用多态创建子类对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        myDog.makeSound(); <span class="comment">// 输出：Dog barks</span></span><br><span class="line">        myDog.sleep(); <span class="comment">// 输出：Sleeping...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-抽象类的特点"><a href="#4-抽象类的特点" class="headerlink" title="4. 抽象类的特点"></a><strong>4. 抽象类的特点</strong></h2><ol><li><strong>抽象类可以包含普通方法</strong>，子类可以直接使用或选择重写。</li><li><strong>抽象类可以包含构造方法</strong>，子类可以调用父类的构造方法来初始化父类的成员变量。</li><li><strong>抽象类可以有成员变量</strong>，并且子类可以继承。</li><li><strong>抽象类可以包含 <code>static</code> 方法</strong>，但静态方法不能是抽象方法。</li><li><strong>一个类如果继承抽象类，必须实现所有抽象方法</strong>，否则该类也需要声明为抽象类。</li></ol><hr><h2 id="5-代码示例：抽象类与构造方法"><a href="#5-代码示例：抽象类与构造方法" class="headerlink" title="5. 代码示例：抽象类与构造方法"></a><strong>5. 代码示例：抽象类与构造方法</strong></h2><p>抽象类可以有构造方法，并且子类可以调用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal name: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name); <span class="comment">// 调用父类构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; meows&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAbstract</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;Kitty&quot;</span>);</span><br><span class="line">        myCat.showName(); <span class="comment">// 输出：Animal name: Kitty</span></span><br><span class="line">        myCat.makeSound(); <span class="comment">// 输出：Kitty meows</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-抽象类-vs-接口"><a href="#6-抽象类-vs-接口" class="headerlink" title="6. 抽象类 vs 接口"></a><strong>6. 抽象类 vs 接口</strong></h2><table><thead><tr><th>比较项</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>关键字</td><td><code>abstract class</code></td><td><code>interface</code></td></tr><tr><td>方法</td><td>既可以有抽象方法，也可以有具体方法。</td><td>只能有 <code>public</code> 默认的抽象方法（Java 8+ 允许 <code>default</code> 和 <code>static</code> 方法）</td></tr><tr><td>成员变量</td><td>可以有成员变量</td><td>只能有 <code>public static final</code> 常量</td></tr><tr><td>构造方法</td><td>可以有构造方法</td><td>不能有构造方法</td></tr><tr><td>继承</td><td>只能单继承</td><td>可以多实现多个接口</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承抽象类并实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bird chirps&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bird flies&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        b.makeSound(); <span class="comment">// 输出：Bird chirps</span></span><br><span class="line">        b.fly(); <span class="comment">// 输出：Bird flies</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-抽象类的应用场景"><a href="#7-抽象类的应用场景" class="headerlink" title="7. 抽象类的应用场景"></a><strong>7. 抽象类的应用场景</strong></h2><ol><li><strong>模板设计模式</strong>（Template Method Pattern）：父类提供基本结构，子类实现具体逻辑。</li><li><strong>代码复用</strong>：抽象类可以封装公共逻辑，提高代码复用性。</li><li><strong>限制子类必须实现某些方法</strong>：确保子类提供特定功能。</li></ol><p>示例：<strong>模板模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoffeeTemplate</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">prepareCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">boilWater</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boiling water...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pourInCup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pouring into cup...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlackCoffee</span> <span class="keyword">extends</span> <span class="title class_">CoffeeTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Brewing black coffee&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding sugar and milk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CoffeeTemplate</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlackCoffee</span>();</span><br><span class="line">        coffee.prepareCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Boiling water...</span><br><span class="line">Brewing black coffee</span><br><span class="line">Pouring into cup...</span><br><span class="line">Adding sugar and milk</span><br></pre></td></tr></table></figure><hr><h2 id="8-关键总结"><a href="#8-关键总结" class="headerlink" title="8. 关键总结"></a><strong>8. 关键总结</strong></h2><ul><li><strong>抽象类不能实例化</strong>，但可以包含构造方法和普通方法。</li><li><strong>子类必须实现抽象方法</strong>，否则子类也必须声明为抽象类。</li><li><strong>抽象类适用于具有共同行为但部分实现不同的情况</strong>（如动物类）。</li><li><strong>如果所有方法都是抽象的，建议使用接口代替抽象类</strong>。</li><li><strong>模板方法模式是抽象类的典型应用</strong>，它规定子类必须实现的逻辑。</li></ul><hr><p>掌握 Java <strong>抽象类</strong>，可以帮助你写出更加模块化、可扩展的代码，提高代码的复用性和可维护性！ 🎯</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 封装</title>
      <link href="/2025/04/21/Java%20%E5%B0%81%E8%A3%85/"/>
      <url>/2025/04/21/Java%20%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-封装（Encapsulation）详细教学"><a href="#Java-封装（Encapsulation）详细教学" class="headerlink" title="Java 封装（Encapsulation）详细教学"></a><strong>Java 封装（Encapsulation）详细教学</strong></h1><h2 id="1-什么是封装？"><a href="#1-什么是封装？" class="headerlink" title="1. 什么是封装？"></a><strong>1. 什么是封装？</strong></h2><p>封装（Encapsulation）是面向对象编程（OOP）的三大特性之一（另外两个是继承和多态）。它指的是<strong>将对象的状态（成员变量）私有化，同时提供公共的方法（getter 和 setter）来访问和修改这些变量</strong>，从而<strong>隐藏实现细节，保护数据安全</strong>。</p><p><strong>封装的核心思想：</strong></p><ol><li><strong>隐藏对象的内部实现</strong>，防止外部直接访问。</li><li><strong>通过方法提供受控访问</strong>，保证数据完整性和安全性。</li><li><strong>提高代码的可维护性和可扩展性</strong>，修改内部代码不会影响外部调用。</li></ol><hr><h2 id="2-如何实现封装？"><a href="#2-如何实现封装？" class="headerlink" title="2. 如何实现封装？"></a><strong>2. 如何实现封装？</strong></h2><p>Java 中实现封装主要有以下几个步骤：</p><ol><li><strong>将类的成员变量（字段）声明为 <code>private</code></strong>，使其无法被外部直接访问。</li><li><strong>提供 <code>public</code> 方法（getter 和 setter）来访问和修改 <code>private</code> 变量</strong>。</li><li><strong>可以在 <code>setter</code> 方法中添加逻辑检查</strong>，确保数据合法性。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a><strong>示例代码</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个封装的 Person 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 私有字段，不能被外部直接访问</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供公共 getter 方法获取 name</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供公共 setter 方法设置 name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供 getter 方法获取 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供 setter 方法设置 age，并添加合法性检查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>) &#123;  <span class="comment">// 确保年龄在合理范围</span></span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invalid age! Please enter a value between 0 and 150.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试封装</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEncapsulation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置值</span></span><br><span class="line">        p.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        p.setAge(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + p.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + p.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试设置非法年龄</span></span><br><span class="line">        p.setAge(-<span class="number">5</span>); <span class="comment">// 输出：Invalid age! Please enter a value between 0 and 150.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Name: Alice</span><br><span class="line">Age: 25</span><br><span class="line">Invalid age! Please enter a value between 0 and 150.</span><br></pre></td></tr></table></figure><hr><h2 id="3-封装的优点"><a href="#3-封装的优点" class="headerlink" title="3. 封装的优点"></a><strong>3. 封装的优点</strong></h2><h3 id="1-数据安全"><a href="#1-数据安全" class="headerlink" title="1. 数据安全"></a><strong>1. 数据安全</strong></h3><ul><li>通过 <code>private</code> 关键字隐藏数据，防止外部直接修改，避免错误或非法数据。</li><li>通过 <code>setter</code> 方法控制数据的合法性。</li></ul><h3 id="2-降低耦合性，提高代码可维护性"><a href="#2-降低耦合性，提高代码可维护性" class="headerlink" title="2. 降低耦合性，提高代码可维护性"></a><strong>2. 降低耦合性，提高代码可维护性</strong></h3><ul><li>代码逻辑可以随时修改，而不影响外部代码。例如，可以修改 <code>setAge()</code> 方法的验证逻辑，而不影响 <code>getAge()</code>。</li></ul><h3 id="3-代码更加灵活"><a href="#3-代码更加灵活" class="headerlink" title="3. 代码更加灵活"></a><strong>3. 代码更加灵活</strong></h3><ul><li>可以在 <code>getter</code> 和 <code>setter</code> 方法中添加逻辑，如转换格式、校验数据等。</li></ul><hr><h2 id="4-只读和只写属性"><a href="#4-只读和只写属性" class="headerlink" title="4. 只读和只写属性"></a><strong>4. 只读和只写属性</strong></h2><p>在某些情况下，我们可能希望：</p><ul><li><strong>属性只能读取，不能修改（只读）</strong>。</li><li><strong>属性只能修改，不能读取（只写）</strong>。</li></ul><h3 id="示例：只读属性"><a href="#示例：只读属性" class="headerlink" title="示例：只读属性"></a><strong>示例：只读属性</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String employeeId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只提供 getter 方法，不提供 setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmployeeId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> employeeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只能通过构造方法初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String employeeId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.employeeId = employeeId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReadOnly</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;E12345&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Employee ID: &quot;</span> + emp.getEmployeeId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// emp.setEmployeeId(&quot;E67890&quot;); // 错误：没有 setter 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee ID: E12345</span><br></pre></td></tr></table></figure><hr><h3 id="示例：只写属性"><a href="#示例：只写属性" class="headerlink" title="示例：只写属性"></a><strong>示例：只写属性</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只提供 setter 方法，不提供 getter 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (balance &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.balance = balance;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invalid balance!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅提供方法来增加余额，而不允许外部获取余额</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;Deposit successful!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invalid deposit amount!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWriteOnly</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BankAccount</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccount</span>();</span><br><span class="line">        acc.setBalance(<span class="number">1000</span>);</span><br><span class="line">        acc.deposit(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(acc.getBalance()); // 错误：没有 getter 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-this-关键字的作用"><a href="#5-this-关键字的作用" class="headerlink" title="5. this 关键字的作用"></a><strong>5. <code>this</code> 关键字的作用</strong></h2><p>在封装中，<code>this</code> 关键字通常用于区分成员变量和方法参数。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this.name 代表成员变量，而 name 代表参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么要用 <code>this</code>？</strong> 如果参数名称和成员变量名称相同，<code>this</code> 关键字可以消除歧义，保证操作的是当前对象的属性。</p><hr><h2 id="6-访问控制修饰符"><a href="#6-访问控制修饰符" class="headerlink" title="6. 访问控制修饰符"></a><strong>6. 访问控制修饰符</strong></h2><p>Java 提供 4 种访问控制修饰符，来控制类、变量和方法的访问权限：</p><table><thead><tr><th>修饰符</th><th>访问范围</th><th>适用场景</th></tr></thead><tbody><tr><td><code>private</code></td><td>仅限本类访问</td><td>成员变量，隐藏实现</td></tr><tr><td><code>default</code>（无修饰符）</td><td>同一包中的类可以访问</td><td>内部模块使用</td></tr><tr><td><code>protected</code></td><td>同一包中的类和子类可以访问</td><td>继承相关的封装</td></tr><tr><td><code>public</code></td><td>任何类都可以访问</td><td>对外提供的 API</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 仅本类可访问</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 包级访问（default）</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>; <span class="comment">// 子类和同包可访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">40</span>; <span class="comment">// 任何地方都可访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-封装与-JavaBean"><a href="#7-封装与-JavaBean" class="headerlink" title="7. 封装与 JavaBean"></a><strong>7. 封装与 JavaBean</strong></h2><p><strong>JavaBean</strong> 是一种符合 Java 规范的类，通常用于数据封装。其特点：</p><ol><li><strong>所有成员变量 <code>private</code></strong></li><li><strong>提供 <code>public</code> 的 <code>getter</code> 和 <code>setter</code></strong></li><li><strong>必须有无参构造方法</strong></li></ol><h3 id="JavaBean-示例"><a href="#JavaBean-示例" class="headerlink" title="JavaBean 示例"></a><strong>JavaBean 示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法（必须）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter 和 setter</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a><strong>8. 总结</strong></h2><ul><li><strong>封装通过 <code>private</code> 关键字隐藏数据</strong>，并提供 <code>getter</code> 和 <code>setter</code> 方法访问。</li><li><strong>封装可以提高数据安全性，防止数据被非法访问和修改</strong>。</li><li><strong>只读属性：提供 <code>getter</code>，不提供 <code>setter</code></strong>。</li><li><strong>只写属性：提供 <code>setter</code>，不提供 <code>getter</code></strong>。</li><li><strong>使用 <code>this</code> 关键字区分成员变量和参数</strong>。</li><li><strong>访问控制修饰符控制类、方法、变量的访问权限</strong>。</li></ul><p>封装是 Java <strong>面向对象编程（OOP）</strong> 的核心概念之一，掌握封装有助于写出<strong>更安全、更易维护、更模块化</strong>的代码！ 🚀</p><p>来源：</p><p>​ChatGpt-4o</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 接口</title>
      <link href="/2025/04/21/Java%20%E6%8E%A5%E5%8F%A3/"/>
      <url>/2025/04/21/Java%20%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-接口（Interface）详细教学"><a href="#Java-接口（Interface）详细教学" class="headerlink" title="Java 接口（Interface）详细教学"></a><strong>Java 接口（Interface）详细教学</strong></h1><h2 id="1-什么是接口（Interface）？"><a href="#1-什么是接口（Interface）？" class="headerlink" title="1. 什么是接口（Interface）？"></a><strong>1. 什么是接口（Interface）？</strong></h2><p><strong>接口（Interface）</strong> 是 Java 中的一种特殊类型，它定义了一组方法<strong>但不提供实现</strong>，供类来<strong>实现（implement）</strong>。接口用于定义行为规范，支持<strong>多态和解耦</strong>，增强代码的灵活性。</p><p><strong>接口的特点：</strong></p><ol><li><strong>只定义方法，不提供具体实现</strong>（Java 8 及以上可以有默认方法）。</li><li><strong>所有方法默认是 <code>public abstract</code></strong>（可以省略）。</li><li><strong>接口中的变量默认是 <code>public static final</code>（常量）</strong>。</li><li><strong>支持多实现</strong>（一个类可以实现多个接口）。</li><li><strong>不能实例化</strong>，只能被实现。</li></ol><hr><h2 id="2-如何定义接口？"><a href="#2-如何定义接口？" class="headerlink" title="2. 如何定义接口？"></a><strong>2. 如何定义接口？</strong></h2><h3 id="接口的语法"><a href="#接口的语法" class="headerlink" title="接口的语法"></a><strong>接口的语法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名 &#123;</span><br><span class="line">    <span class="comment">// 常量（默认 public static final）</span></span><br><span class="line">    类型 变量名 = 值;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法（默认 public abstract）</span></span><br><span class="line">    返回类型 方法名(参数列表);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例：定义一个接口"><a href="#示例：定义一个接口" class="headerlink" title="示例：定义一个接口"></a><strong>示例：定义一个接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 Animal 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">EYES</span> <span class="operator">=</span> <span class="number">2</span>;  <span class="comment">// 默认 public static final</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  <span class="comment">// 默认 public abstract</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-如何实现接口？"><a href="#3-如何实现接口？" class="headerlink" title="3. 如何实现接口？"></a><strong>3. 如何实现接口？</strong></h2><h3 id="implements-关键字"><a href="#implements-关键字" class="headerlink" title="implements 关键字"></a><strong><code>implements</code> 关键字</strong></h3><ul><li><strong>使用 <code>implements</code> 关键字</strong>，类必须<strong>实现接口中的所有方法</strong>，否则类必须声明为 <code>abstract</code>。</li><li><strong>一个类可以实现多个接口</strong>。</li></ul><h3 id="示例：实现接口"><a href="#示例：实现接口" class="headerlink" title="示例：实现接口"></a><strong>示例：实现接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 Dog 类，实现 Animal 接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is sleeping...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.sleep();</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog has &quot;</span> + Dog.EYES + <span class="string">&quot; eyes.&quot;</span>);  <span class="comment">// 访问接口常量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dog is eating...</span><br><span class="line">Dog is sleeping...</span><br><span class="line">Dog has 2 eyes.</span><br></pre></td></tr></table></figure><hr><h2 id="4-接口的默认方法和静态方法（Java-8-）"><a href="#4-接口的默认方法和静态方法（Java-8-）" class="headerlink" title="4. 接口的默认方法和静态方法（Java 8+）"></a><strong>4. 接口的默认方法和静态方法（Java 8+）</strong></h2><p>在 <strong>Java 8</strong> 之后，接口支持：</p><ol><li><strong>默认方法（default methods）</strong>：有具体实现的方法，子类可以直接使用或重写。</li><li><strong>静态方法（static methods）</strong>：只能通过接口名调用，不能被子类重写。</li></ol><h3 id="示例：默认方法"><a href="#示例：默认方法" class="headerlink" title="示例：默认方法"></a><strong>示例：默认方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is sleeping...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat is eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDefaultMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.eat();</span><br><span class="line">        cat.sleep();  <span class="comment">// 直接调用接口的默认方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat is eating...</span><br><span class="line">Animal is sleeping...</span><br></pre></td></tr></table></figure><hr><h3 id="示例：静态方法"><a href="#示例：静态方法" class="headerlink" title="示例：静态方法"></a><strong>示例：静态方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MathUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用接口的静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStaticMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> MathUtil.add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sum: 30</span><br></pre></td></tr></table></figure><hr><h2 id="5-接口的多实现"><a href="#5-接口的多实现" class="headerlink" title="5. 接口的多实现"></a><strong>5. 接口的多实现</strong></h2><p>一个类可以实现多个接口，这在 Java <strong>不支持多继承</strong> 的情况下非常有用。</p><h3 id="示例：一个类实现多个接口"><a href="#示例：一个类实现多个接口" class="headerlink" title="示例：一个类实现多个接口"></a><strong>示例：一个类实现多个接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Swimmer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Frog 同时实现两个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>, Swimmer &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Frog is eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Frog is swimming...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMultipleInterfaces</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frog</span> <span class="variable">frog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frog</span>();</span><br><span class="line">        frog.eat();</span><br><span class="line">        frog.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Frog is eating...</span><br><span class="line">Frog is swimming...</span><br></pre></td></tr></table></figure><hr><h2 id="6-接口的继承"><a href="#6-接口的继承" class="headerlink" title="6. 接口的继承"></a><strong>6. 接口的继承</strong></h2><p>接口也可以继承接口，一个接口可以继承多个接口。</p><h3 id="示例：接口继承接口"><a href="#示例：接口继承接口" class="headerlink" title="示例：接口继承接口"></a><strong>示例：接口继承接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C 继承 A 和 B</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>, B &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodC</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 C 的类必须实现 A 和 B 的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodC</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterfaceInheritance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        obj.methodA();</span><br><span class="line">        obj.methodB();</span><br><span class="line">        obj.methodC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method A</span><br><span class="line">Method B</span><br><span class="line">Method C</span><br></pre></td></tr></table></figure><hr><h2 id="7-instanceof-判断接口实现"><a href="#7-instanceof-判断接口实现" class="headerlink" title="7. instanceof 判断接口实现"></a><strong>7. <code>instanceof</code> 判断接口实现</strong></h2><p>如果一个对象实现了某个接口，我们可以使用 <code>instanceof</code> 进行判断。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInstanceOf</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frog</span> <span class="variable">frog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frog</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (frog <span class="keyword">instanceof</span> Animal) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Frog is an Animal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (frog <span class="keyword">instanceof</span> Swimmer) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Frog is a Swimmer.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Frog is an Animal.</span><br><span class="line">Frog is a Swimmer.</span><br></pre></td></tr></table></figure><hr><h2 id="8-抽象类-vs-接口"><a href="#8-抽象类-vs-接口" class="headerlink" title="8. 抽象类 vs. 接口"></a><strong>8. 抽象类 vs. 接口</strong></h2><table><thead><tr><th>特性</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td><strong>是否可以有方法实现</strong></td><td>可以</td><td>不能（Java 8+ 支持默认方法）</td></tr><tr><td><strong>是否可以有构造方法</strong></td><td>可以</td><td>不能</td></tr><tr><td><strong>是否可以有成员变量</strong></td><td>可以</td><td>只能有 <code>public static final</code> 常量</td></tr><tr><td><strong>是否支持多继承</strong></td><td>不能（单继承）</td><td>可以（多实现）</td></tr><tr><td><strong>适用场景</strong></td><td>具有共性行为的类（”是什么”）</td><td>定义行为规范（”能做什么”）</td></tr></tbody></table><hr><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a><strong>9. 总结</strong></h2><ul><li><strong>接口用于定义一组行为规范，类可以 <code>implements</code>（实现）接口</strong>。</li><li><strong>接口中的方法默认是 <code>public abstract</code>，变量是 <code>public static final</code></strong>。</li><li><strong>Java 8+ 支持 <code>default</code> 方法（有默认实现）和 <code>static</code> 方法</strong>。</li><li><strong>一个类可以实现多个接口，接口可以继承多个接口</strong>。</li><li><strong>使用 <code>instanceof</code> 可以判断对象是否实现了某个接口</strong>。</li><li><strong>接口提供了解耦和灵活性，适用于多态和规范约束</strong>。</li></ul><p><strong>接口是 Java 语言的重要特性，掌握它可以让你的代码更加模块化、可扩展和灵活！🚀</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 枚举</title>
      <link href="/2025/04/21/Java%20%E6%9E%9A%E4%B8%BE/"/>
      <url>/2025/04/21/Java%20%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-枚举（enum）详细教学"><a href="#Java-枚举（enum）详细教学" class="headerlink" title="Java 枚举（enum）详细教学"></a><strong>Java 枚举（enum）详细教学</strong></h1><h2 id="1-什么是枚举（enum）？"><a href="#1-什么是枚举（enum）？" class="headerlink" title="1. 什么是枚举（enum）？"></a><strong>1. 什么是枚举（enum）？</strong></h2><p><strong>枚举（enum）</strong> 是 Java 中一种<strong>特殊的类</strong>，用于表示一组<strong>固定的常量</strong>。它使代码更可读、更安全，并避免了魔法值（Magic Numbers）的问题。</p><p><strong>枚举的特点：</strong></p><ol><li><strong>固定的取值范围</strong>（不能动态添加）。</li><li><strong>默认继承 <code>java.lang.Enum</code>，不能继承其他类</strong>（但可以实现接口）。</li><li><strong>每个枚举值都是 <code>public static final</code> 类型的实例</strong>。</li><li><strong>可以添加构造方法、成员变量、方法</strong>。</li><li><strong>可以与 <code>switch</code> 语句一起使用</strong>。</li></ol><hr><h2 id="2-如何定义和使用枚举？"><a href="#2-如何定义和使用枚举？" class="headerlink" title="2. 如何定义和使用枚举？"></a><strong>2. 如何定义和使用枚举？</strong></h2><h3 id="基本枚举"><a href="#基本枚举" class="headerlink" title="基本枚举"></a><strong>基本枚举</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a><strong>使用枚举</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">c1</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">        System.out.println(c1);  <span class="comment">// 输出 RED</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-枚举的常用方法"><a href="#3-枚举的常用方法" class="headerlink" title="3. 枚举的常用方法"></a><strong>3. 枚举的常用方法</strong></h2><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a><strong>常见方法</strong></h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>values()</code></td><td>返回所有枚举值的数组</td></tr><tr><td><code>ordinal()</code></td><td>返回枚举值的索引（从 0 开始）</td></tr><tr><td><code>name()</code></td><td>返回枚举值的字符串名称</td></tr><tr><td><code>valueOf(String name)</code></td><td>通过字符串获取枚举值</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMethodsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取所有枚举值</span></span><br><span class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;</span><br><span class="line">            System.out.println(c + <span class="string">&quot; - 索引: &quot;</span> + c.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 name() 获取字符串名称</span></span><br><span class="line">        <span class="type">Color</span> <span class="variable">c1</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">        System.out.println(<span class="string">&quot;名称: &quot;</span> + c1.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 valueOf() 获取枚举值</span></span><br><span class="line">        <span class="type">Color</span> <span class="variable">c2</span> <span class="operator">=</span> Color.valueOf(<span class="string">&quot;GREEN&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举值: &quot;</span> + c2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RED - 索引: 0</span><br><span class="line">GREEN - 索引: 1</span><br><span class="line">BLUE - 索引: 2</span><br><span class="line">名称: RED</span><br><span class="line">枚举值: GREEN</span><br></pre></td></tr></table></figure><hr><h2 id="4-枚举可以添加构造方法和字段"><a href="#4-枚举可以添加构造方法和字段" class="headerlink" title="4. 枚举可以添加构造方法和字段"></a><strong>4. 枚举可以添加构造方法和字段</strong></h2><h3 id="示例：带属性的枚举"><a href="#示例：带属性的枚举" class="headerlink" title="示例：带属性的枚举"></a><strong>示例：带属性的枚举</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>), GREEN(<span class="string">&quot;绿色&quot;</span>), BLUE(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String chineseName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    Color(String chineseName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.chineseName = chineseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取颜色名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getChineseName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chineseName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumWithFields</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Color.RED + <span class="string">&quot; -&gt; &quot;</span> + Color.RED.getChineseName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RED -&gt; 红色</span><br></pre></td></tr></table></figure><hr><h2 id="5-枚举可以实现接口"><a href="#5-枚举可以实现接口" class="headerlink" title="5. 枚举可以实现接口"></a><strong>5. 枚举可以实现接口</strong></h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>), GREEN(<span class="string">&quot;绿色&quot;</span>), BLUE(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String chineseName;</span><br><span class="line"></span><br><span class="line">    Color(String chineseName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.chineseName = chineseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;颜色: &quot;</span> + chineseName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumWithInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Color.BLUE.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">颜色: 蓝色</span><br></pre></td></tr></table></figure><hr><h2 id="6-枚举与-switch-语句"><a href="#6-枚举与-switch-语句" class="headerlink" title="6. 枚举与 switch 语句"></a><strong>6. 枚举与 <code>switch</code> 语句</strong></h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumSwitchTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> Color.GREEN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                System.out.println(<span class="string">&quot;颜色是红色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                System.out.println(<span class="string">&quot;颜色是绿色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BLUE:</span><br><span class="line">                System.out.println(<span class="string">&quot;颜色是蓝色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">颜色是绿色</span><br></pre></td></tr></table></figure><hr><h2 id="7-枚举可以有抽象方法"><a href="#7-枚举可以有抽象方法" class="headerlink" title="7. 枚举可以有抽象方法"></a><strong>7. 枚举可以有抽象方法</strong></h2><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    ADD &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUBTRACT &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法，枚举值必须实现它</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumWithAbstractMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + Operation.ADD.apply(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + Operation.SUBTRACT.apply(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 + 5 = 15</span><br><span class="line">10 - 5 = 5</span><br></pre></td></tr></table></figure><hr><h2 id="8-枚举与泛型"><a href="#8-枚举与泛型" class="headerlink" title="8. 枚举与泛型"></a><strong>8. 枚举与泛型</strong></h2><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    SUCCESS, FAILURE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Response</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Status status;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Response</span><span class="params">(Status status, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态: &quot;</span> + status + <span class="string">&quot;, 数据: &quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumWithGenerics</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Response&lt;String&gt; response = <span class="keyword">new</span> <span class="title class_">Response</span>&lt;&gt;(Status.SUCCESS, <span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">        response.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">状态: SUCCESS, 数据: 操作成功</span><br></pre></td></tr></table></figure><hr><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a><strong>9. 总结</strong></h2><h3 id="✔-枚举的核心要点"><a href="#✔-枚举的核心要点" class="headerlink" title="✔ 枚举的核心要点"></a><strong>✔ 枚举的核心要点</strong></h3><p>✅ <strong>枚举用于定义一组固定常量</strong>（例如颜色、状态等）。<br> ✅ <strong>默认继承 <code>java.lang.Enum</code>，不能继承其他类，但可以实现接口</strong>。<br> ✅ <strong>支持 <code>values()</code>、<code>ordinal()</code>、<code>name()</code>、<code>valueOf()</code> 等方法</strong>。<br> ✅ <strong>可以添加字段、构造方法、普通方法，甚至是抽象方法</strong>。<br> ✅ <strong>支持 <code>switch</code> 语句，提高可读性</strong>。<br> ✅ <strong>可以结合泛型、接口等高级特性使用</strong>。</p><h3 id="🎯-枚举的适用场景"><a href="#🎯-枚举的适用场景" class="headerlink" title="🎯 枚举的适用场景"></a><strong>🎯 枚举的适用场景</strong></h3><ul><li>定义 <strong>颜色、状态、类型等固定值</strong></li><li>结合 <strong><code>switch</code></strong> 进行逻辑控制</li><li><strong>替代 <code>int</code> 常量</strong>，提高代码可读性和安全性</li><li><strong>单例模式</strong>（通过枚举实现单例）</li><li><strong>策略模式</strong>（每个枚举值表示不同的策略）</li></ul><hr><h3 id="🔥-枚举让代码更安全、清晰、可读！赶快在你的-Java-代码里使用它吧！🚀"><a href="#🔥-枚举让代码更安全、清晰、可读！赶快在你的-Java-代码里使用它吧！🚀" class="headerlink" title="🔥 枚举让代码更安全、清晰、可读！赶快在你的 Java 代码里使用它吧！🚀"></a><strong>🔥 枚举让代码更安全、清晰、可读！赶快在你的 Java 代码里使用它吧！🚀</strong></h3>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 继承</title>
      <link href="/2025/04/21/Java%20%E7%BB%A7%E6%89%BF/"/>
      <url>/2025/04/21/Java%20%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-继承（Inheritance）教学"><a href="#Java-继承（Inheritance）教学" class="headerlink" title="Java 继承（Inheritance）教学"></a><strong><code>Java</code> 继承（<code>Inheritance</code>）教学</strong></h1><h2 id="什么是继承？"><a href="#什么是继承？" class="headerlink" title="什么是继承？"></a><strong>什么是继承？</strong></h2><p><strong>继承（Inheritance）</strong> 是 Java 面向对象编程（OOP）中的一个重要特性。<strong>子类（Subclass）</strong> 可以继承 <strong>父类（Superclass）</strong> 的属性和方法，从而实现代码复用，减少重复代码，提高可维护性。</p><p><strong>🔹 继承的特点：</strong><br> ✅ <strong>子类</strong> 继承 <strong>父类</strong> 的所有<strong>非私有（private）</strong> 的属性和方法。<br> ✅ 子类可以 <strong>新增方法和属性</strong>，也可以<strong>重写父类方法（方法覆盖，Override）</strong>。<br> ✅ Java 只支持<strong>单继承</strong>，但可以通过<strong>接口（Interface）</strong> 实现多继承的效果。<br> ✅ <code>super</code> 关键字可以调用 <strong>父类的构造方法或方法</strong>。</p><p><img src="/assets/java-extends-2020-12-08.png" alt="img"></p><hr><h2 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a><strong>继承的基本语法</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">    <span class="comment">// 父类属性</span></span><br><span class="line">    <span class="comment">// 父类方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">    <span class="comment">// 子类特有的属性</span></span><br><span class="line">    <span class="comment">// 子类特有的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="继承的基本示例"><a href="#继承的基本示例" class="headerlink" title="继承的基本示例"></a><strong>继承的基本示例</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 在吃东西！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 在汪汪叫！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritanceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.name = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">        dog.eat();  <span class="comment">// 继承父类方法</span></span><br><span class="line">        dog.bark(); <span class="comment">// 子类特有方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">旺财 在吃东西！</span><br><span class="line">旺财 在汪汪叫！</span><br></pre></td></tr></table></figure><hr><h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a><strong>super 关键字</strong></h2><p><code>super</code> 关键字用于访问<strong>父类的构造方法或成员（变量 &amp; 方法）</strong>。</p><h3 id="4-1-使用-super-调用父类方法"><a href="#4-1-使用-super-调用父类方法" class="headerlink" title="4.1 使用 super 调用父类方法"></a><strong>4.1 使用 <code>super</code> 调用父类方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出声音！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.makeSound(); <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;狗在汪汪叫！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.makeSound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">动物发出声音！</span><br><span class="line">狗在汪汪叫！</span><br></pre></td></tr></table></figure><hr><h3 id="4-2-使用-super-调用父类构造方法"><a href="#4-2-使用-super-调用父类构造方法" class="headerlink" title="4.2 使用 super 调用父类构造方法"></a><strong>4.2 使用 <code>super</code> 调用父类构造方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父类构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal 构造方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name); <span class="comment">// 调用父类构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Dog 构造方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperConstructorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal 构造方法被调用</span><br><span class="line">Dog 构造方法被调用</span><br></pre></td></tr></table></figure><hr><h2 id="方法重写（Method-Overriding）"><a href="#方法重写（Method-Overriding）" class="headerlink" title="方法重写（Method Overriding）"></a><strong>方法重写（<code>Method Overriding</code>）</strong></h2><p>子类<strong>可以修改</strong>从父类继承的方法，这称为<strong>方法重写（<code>Override</code>）</strong>。</p><p><strong>📌 方法重写规则</strong>：</p><ul><li>方法名相同、参数列表相同、<strong>返回类型相同或是其子类</strong>。</li><li>访问权限不能<strong>比父类更严格</strong>（如：父类是 <code>public</code>，子类不能是 <code>private</code>）。</li><li>只能重写<strong>非 <code>private</code> 和 <code>static</code></strong> 的方法。</li><li><code>@Override</code> 注解用于<strong>检查是否正确重写</strong>方法，建议加上。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在发出声音！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在汪汪叫！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverrideDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.makeSound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">狗在汪汪叫！</span><br></pre></td></tr></table></figure><hr><h2 id="方法重载-Method-Overload"><a href="#方法重载-Method-Overload" class="headerlink" title="方法重载(Method Overload)"></a>方法重载(<code>Method Overload</code>)</h2><p>重载(overloading) 是在一个类里面，<strong>方法名字相同</strong>，<strong>而参数不同</strong>。返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p>最常用的地方就是构造器的重载。</p><p><strong>重载规则:</strong></p><ul><li>被重载的方法<strong>必须改变参数列表</strong>(参数个数或类型不一样)；</li><li>被重载的方法<strong>可以改变返回类型</strong>；</li><li>被重载的方法<strong>可以改变访问修饰符</strong>；</li><li>被重载的方法<strong>可以声明新的或更广的检查异常</strong>；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Overloading</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest3&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String s,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest4&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Overloading</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Overloading</span>();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">&quot;test3&quot;</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">&quot;test4&quot;</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写与重载之间的区别"><a href="#重写与重载之间的区别" class="headerlink" title="重写与重载之间的区别"></a>重写与重载之间的区别</h3><table><thead><tr><th align="left">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="left">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">返回类型</td><td align="left">可以修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">异常</td><td align="left">可以修改</td><td align="left">可以减少或删除，一定不能抛出新的或者更广的异常。</td></tr><tr><td align="left">访问</td><td align="left">可以修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p><ul><li>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul><p><img src="/assets/overloading-vs-overriding.png" alt="img"></p><p><img src="/assets/20171102-1.png" alt="img"></p><hr><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a><strong><code>final</code> 关键字</strong></h2><p>在继承中，<code>final</code> 关键字有以下作用：</p><ul><li><strong><code>final</code> 类</strong>：<strong>不能被继承</strong>（如 <code>String</code> 类）</li><li><strong><code>final</code> 方法</strong>：<strong>不能被子类重写</strong>，但可以被继承使用</li><li><strong><code>final</code> 变量</strong>：定义常量，值不能被修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在睡觉！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// ❌ 报错，不能重写 final 方法</span></span><br><span class="line">    <span class="comment">// public void sleep() &#123; System.out.println(&quot;狗在睡觉！&quot;); &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalMethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.sleep(); <span class="comment">// 继承但不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="继承与构造方法"><a href="#继承与构造方法" class="headerlink" title="继承与构造方法"></a><strong>继承与构造方法</strong></h2><h3 id="7-1-子类构造方法默认调用父类无参构造"><a href="#7-1-子类构造方法默认调用父类无参构造" class="headerlink" title="7.1 子类构造方法默认调用父类无参构造"></a><strong>7.1 子类构造方法默认调用父类无参构造</strong></h3><p>如果父类没有<strong>无参构造方法</strong>，子类必须<strong>手动调用 <code>super()</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal 构造方法：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name); <span class="comment">// 必须手动调用父类构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Dog 构造方法：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal 构造方法：旺财</span><br><span class="line">Dog 构造方法：旺财</span><br></pre></td></tr></table></figure><hr><h2 id="Object-类：所有类的父类"><a href="#Object-类：所有类的父类" class="headerlink" title="Object 类：所有类的父类"></a><strong>Object 类：所有类的父类</strong></h2><p>在 Java 中，所有类默认继承 <code>Object</code> 类，它提供了：</p><ul><li><code>toString()</code>：返回对象的字符串表示。（所以可以重写该方法）</li><li><code>equals(Object obj)</code>：比较两个对象是否相等。</li><li><code>hashCode()</code>：返回对象的哈希值。</li><li><code>getClass()</code>：返回对象的运行时类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Animal[name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        animal.name = <span class="string">&quot;小猫&quot;</span>;</span><br><span class="line">        System.out.println(animal.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal[name=小猫]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java.util.List</title>
      <link href="/2025/04/21/Java.util.List/"/>
      <url>/2025/04/21/Java.util.List/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-List-接口详细教学"><a href="#Java-List-接口详细教学" class="headerlink" title="Java List 接口详细教学"></a><strong>Java <code>List</code> 接口详细教学</strong></h1><p><code>java.util.List</code> 是 Java 集合框架中的一个接口，<strong>继承自 <code>Collection</code></strong>，表示一个有序、可重复的元素集合。</p><h2 id="1-List-特点"><a href="#1-List-特点" class="headerlink" title="1. List 特点"></a><strong>1. <code>List</code> 特点</strong></h2><ul><li><strong>有序（Ordered）</strong>：元素存储顺序与插入顺序一致。</li><li><strong>可重复（Duplicates Allowed）</strong>：允许存储重复元素。</li><li><strong>支持索引（Index-based）</strong>：可以通过索引访问和修改元素。</li><li><strong>支持任意位置插入&#x2F;删除（Insert&#x2F;Delete at any position）</strong>。</li><li><strong>允许存储 <code>null</code> 值</strong>。</li></ul><hr><h2 id="2-List-主要实现类"><a href="#2-List-主要实现类" class="headerlink" title="2. List 主要实现类"></a><strong>2. <code>List</code> 主要实现类</strong></h2><table><thead><tr><th><strong>实现类</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><code>ArrayList</code></td><td>基于动态数组，查询快（<code>O(1)</code>），增删慢（<code>O(n)</code>），线程不安全。</td></tr><tr><td><code>LinkedList</code></td><td>基于双向链表，增删快（<code>O(1)</code>），查询慢（<code>O(n)</code>），线程不安全。</td></tr><tr><td><code>Vector</code></td><td>线程安全的 <code>ArrayList</code>，但性能较低。</td></tr><tr><td><code>Stack</code></td><td>继承 <code>Vector</code>，实现 LIFO 结构（栈）。</td></tr></tbody></table><hr><h2 id="3-List-的常用方法"><a href="#3-List-的常用方法" class="headerlink" title="3. List 的常用方法"></a><strong>3. <code>List</code> 的常用方法</strong></h2><p><code>List</code> 继承自 <code>Collection</code>，所以它除了支持 <code>Collection</code> 的方法外，还有<strong>基于索引的额外方法</strong>。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>add(E e)</code></td><td>添加元素到末尾</td></tr><tr><td><code>add(int index, E e)</code></td><td>在指定索引插入元素</td></tr><tr><td><code>get(int index)</code></td><td>获取指定索引的元素</td></tr><tr><td><code>set(int index, E e)</code></td><td>修改指定索引的元素</td></tr><tr><td><code>remove(int index)</code></td><td>删除指定索引的元素</td></tr><tr><td><code>remove(Object o)</code></td><td>删除指定对象（如果存在多个，只删除第一个）</td></tr><tr><td><code>indexOf(Object o)</code></td><td>返回对象的<strong>首次</strong>出现索引</td></tr><tr><td><code>lastIndexOf(Object o)</code></td><td>返回对象的<strong>最后</strong>出现索引</td></tr><tr><td><code>contains(Object o)</code></td><td>是否包含指定元素</td></tr><tr><td><code>size()</code></td><td>返回列表大小</td></tr><tr><td><code>isEmpty()</code></td><td>是否为空</td></tr><tr><td><code>clear()</code></td><td>清空列表</td></tr><tr><td><code>subList(int fromIndex, int toIndex)</code></td><td>截取子列表</td></tr></tbody></table><hr><h2 id="4-ArrayList-示例"><a href="#4-ArrayList-示例" class="headerlink" title="4. ArrayList 示例"></a><strong>4. <code>ArrayList</code> 示例</strong></h2><p><code>ArrayList</code> 是 <code>List</code> 最常用的实现，基于动态数组，查询快，适合<strong>查询多、插入少</strong>的场景。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><strong>基本操作</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ArrayList</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;列表内容: &quot;</span> + list);  <span class="comment">// 输出: [Java, Python, C++, Java]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;索引 1 处的元素: &quot;</span> + list.get(<span class="number">1</span>));  <span class="comment">// 输出: Python</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改元素</span></span><br><span class="line">        list.set(<span class="number">2</span>, <span class="string">&quot;C#&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后: &quot;</span> + list);  <span class="comment">// 输出: [Java, Python, C#, Java]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        list.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素后: &quot;</span> + list);  <span class="comment">// 输出: [Java, Python, C#]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Java 的索引: &quot;</span> + list.indexOf(<span class="string">&quot;Java&quot;</span>));  <span class="comment">// 输出: 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否包含</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含 Python? &quot;</span> + list.contains(<span class="string">&quot;Python&quot;</span>));  <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列表</span></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历列表:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">列表内容: [Java, Python, C++, Java]</span><br><span class="line">索引 1 处的元素: Python</span><br><span class="line">修改后: [Java, Python, C#, Java]</span><br><span class="line">删除元素后: [Java, Python, C#]</span><br><span class="line">Java 的索引: 0</span><br><span class="line">是否包含 Python? true</span><br><span class="line">遍历列表:</span><br><span class="line">Java</span><br><span class="line">Python</span><br><span class="line">C#</span><br></pre></td></tr></table></figure><hr><h2 id="5-LinkedList-示例"><a href="#5-LinkedList-示例" class="headerlink" title="5. LinkedList 示例"></a><strong>5. <code>LinkedList</code> 示例</strong></h2><p><code>LinkedList</code> 是基于<strong>双向链表</strong>的 <code>List</code> 实现，适合<strong>增删多、查询少</strong>的场景。</p><h3 id="LinkedList-额外方法"><a href="#LinkedList-额外方法" class="headerlink" title="LinkedList 额外方法"></a><strong>LinkedList 额外方法</strong></h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>addFirst(E e)</code></td><td>在头部添加元素</td></tr><tr><td><code>addLast(E e)</code></td><td>在尾部添加元素</td></tr><tr><td><code>removeFirst()</code></td><td>删除并返回头部元素</td></tr><tr><td><code>removeLast()</code></td><td>删除并返回尾部元素</td></tr><tr><td><code>getFirst()</code></td><td>获取头部元素（不删除）</td></tr><tr><td><code>getLast()</code></td><td>获取尾部元素（不删除）</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList: &quot;</span> + list);  <span class="comment">// 输出: [A, B, C]</span></span><br><span class="line"></span><br><span class="line">        list.addFirst(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;添加首尾后: &quot;</span> + list);  <span class="comment">// 输出: [X, A, B, C, Y]</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;首元素: &quot;</span> + list.getFirst());  <span class="comment">// 输出: X</span></span><br><span class="line">        System.out.println(<span class="string">&quot;尾元素: &quot;</span> + list.getLast());  <span class="comment">// 输出: Y</span></span><br><span class="line"></span><br><span class="line">        list.removeFirst();</span><br><span class="line">        list.removeLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除首尾后: &quot;</span> + list);  <span class="comment">// 输出: [A, B, C]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-Vector-示例（线程安全但性能低）"><a href="#6-Vector-示例（线程安全但性能低）" class="headerlink" title="6. Vector 示例（线程安全但性能低）"></a><strong>6. <code>Vector</code> 示例（线程安全但性能低）</strong></h2><p><code>Vector</code> 是 <code>ArrayList</code> 的<strong>同步版本</strong>，每个方法都有 <code>synchronized</code> 保护，适合<strong>多线程场景</strong>但性能低。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VectorExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Vector&lt;Integer&gt; vector = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        vector.add(<span class="number">10</span>);</span><br><span class="line">        vector.add(<span class="number">20</span>);</span><br><span class="line">        vector.add(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Vector: &quot;</span> + vector);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-Stack-示例（LIFO-栈）"><a href="#7-Stack-示例（LIFO-栈）" class="headerlink" title="7. Stack 示例（LIFO 栈）"></a><strong>7. <code>Stack</code> 示例（LIFO 栈）</strong></h2><p><code>Stack</code> 继承自 <code>Vector</code>，是**后进先出（LIFO）**结构。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>push(E e)</code></td><td>入栈</td></tr><tr><td><code>pop()</code></td><td>出栈（删除并返回顶部元素）</td></tr><tr><td><code>peek()</code></td><td>获取顶部元素（不删除）</td></tr><tr><td><code>empty()</code></td><td>是否为空</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        stack.push(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;栈: &quot;</span> + stack);  <span class="comment">// 输出: [A, B, C]</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;栈顶元素: &quot;</span> + stack.peek());  <span class="comment">// 输出: C</span></span><br><span class="line">        System.out.println(<span class="string">&quot;弹出栈顶: &quot;</span> + stack.pop());  <span class="comment">// 输出: C</span></span><br><span class="line">        System.out.println(<span class="string">&quot;弹出后栈: &quot;</span> + stack);  <span class="comment">// 输出: [A, B]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-List-遍历"><a href="#8-List-遍历" class="headerlink" title="8. List 遍历"></a><strong>8. <code>List</code> 遍历</strong></h2><h3 id="方式-1：for-each"><a href="#方式-1：for-each" class="headerlink" title="方式 1：for-each"></a><strong>方式 1：for-each</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式-2：普通-for-循环"><a href="#方式-2：普通-for-循环" class="headerlink" title="方式 2：普通 for 循环"></a><strong>方式 2：普通 for 循环</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式-3：Lambda-表达式"><a href="#方式-3：Lambda-表达式" class="headerlink" title="方式 3：Lambda 表达式"></a><strong>方式 3：Lambda 表达式</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(item -&gt; System.out.println(item));</span><br></pre></td></tr></table></figure><hr><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a><strong>9. 总结</strong></h2><table><thead><tr><th>实现类</th><th>适用场景</th></tr></thead><tbody><tr><td><code>ArrayList</code></td><td>读多写少（查询快，增删慢）</td></tr><tr><td><code>LinkedList</code></td><td>插入&#x2F;删除多（增删快，查询慢）</td></tr><tr><td><code>Vector</code></td><td>线程安全，但性能低</td></tr><tr><td><code>Stack</code></td><td>LIFO 结构</td></tr></tbody></table><hr><p>🔥 <strong>掌握 <code>List</code>，你就掌握了 Java 集合的核心！</strong> 🚀</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2025/04/21/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2025/04/21/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反射（Reflection）详细教学"><a href="#Java-反射（Reflection）详细教学" class="headerlink" title="Java 反射（Reflection）详细教学"></a><strong>Java 反射（Reflection）详细教学</strong></h1><h2 id="1-什么是-Java-反射？"><a href="#1-什么是-Java-反射？" class="headerlink" title="1. 什么是 Java 反射？"></a><strong>1. 什么是 Java 反射？</strong></h2><p><strong>Java 反射（Reflection）</strong> 是 Java 语言中的一个重要机制，它允许程序在运行时<strong>动态获取类的信息</strong>，并<strong>创建对象、调用方法、访问和修改字段</strong>，即使在编译时类的具体类型未知。</p><p><strong>反射的作用：</strong></p><ul><li><strong>获取类的结构信息</strong>（类名、构造方法、字段、方法等）。</li><li><strong>动态创建对象</strong>（即使没有显式地写 <code>new</code>）。</li><li><strong>动态调用对象的方法</strong>。</li><li><strong>访问或修改对象的字段</strong>（包括私有字段）。</li><li><strong>用于开发通用框架，如 Spring、MyBatis、Hibernate 等</strong>。</li></ul><hr><h2 id="2-反射的核心类"><a href="#2-反射的核心类" class="headerlink" title="2. 反射的核心类"></a><strong>2. 反射的核心类</strong></h2><p>反射主要依赖 <code>java.lang.reflect</code> 包中的几个核心类：</p><table><thead><tr><th>类</th><th>作用</th></tr></thead><tbody><tr><td><code>Class&lt;?&gt;</code></td><td>代表 Java 中的类或接口（每个类都有一个 <code>Class</code> 对象）。</td></tr><tr><td><code>Constructor&lt;T&gt;</code></td><td>代表类的构造方法，可以用来创建对象。</td></tr><tr><td><code>Method</code></td><td>代表类的方法，可以用来调用方法。</td></tr><tr><td><code>Field</code></td><td>代表类的字段（成员变量），可以用来获取或修改字段的值。</td></tr></tbody></table><hr><h2 id="3-获取-Class-对象"><a href="#3-获取-Class-对象" class="headerlink" title="3. 获取 Class 对象"></a><strong>3. 获取 Class 对象</strong></h2><p>在 Java 反射机制中，所有的类都会有一个 <code>Class</code> 对象，我们可以通过以下三种方式获取它。</p><h3 id="方式-1：使用-Class-forName"><a href="#方式-1：使用-Class-forName" class="headerlink" title="方式 1：使用 Class.forName()"></a><strong>方式 1：使用 <code>Class.forName()</code></strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.util.ArrayList&quot;</span>);</span><br><span class="line">System.out.println(clazz.getName()); <span class="comment">// 输出 java.util.ArrayList</span></span><br></pre></td></tr></table></figure><p><strong>适用于：</strong> 知道类的全限定名（包名+类名），常用于<strong>动态加载类</strong>。</p><hr><h3 id="方式-2：使用-类名-class"><a href="#方式-2：使用-类名-class" class="headerlink" title="方式 2：使用 类名.class"></a><strong>方式 2：使用 <code>类名.class</code></strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = ArrayList.class;</span><br><span class="line">System.out.println(clazz.getName()); <span class="comment">// 输出 java.util.ArrayList</span></span><br></pre></td></tr></table></figure><p><strong>适用于：</strong> 已知类，但不需要创建实例。</p><hr><h3 id="方式-3：使用-对象-getClass"><a href="#方式-3：使用-对象-getClass" class="headerlink" title="方式 3：使用 对象.getClass()"></a><strong>方式 3：使用 <code>对象.getClass()</code></strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Class&lt;?&gt; clazz = list.getClass();</span><br><span class="line">System.out.println(clazz.getName()); <span class="comment">// 输出 java.util.ArrayList</span></span><br></pre></td></tr></table></figure><p><strong>适用于：</strong> 已有对象，想获取它的类信息。</p><hr><h2 id="4-获取类的信息"><a href="#4-获取类的信息" class="headerlink" title="4. 获取类的信息"></a><strong>4. 获取类的信息</strong></h2><p>反射可以获取类的基本信息，如<strong>类名、包名、父类、接口等</strong>。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.util.ArrayList&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;类名：&quot;</span> + clazz.getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">&quot;完整类名：&quot;</span> + clazz.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;包名：&quot;</span> + clazz.getPackage().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取父类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类：&quot;</span> + clazz.getSuperclass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取实现的接口</span></span><br><span class="line">        System.out.println(<span class="string">&quot;实现的接口：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; i : clazz.getInterfaces()) &#123;</span><br><span class="line">            System.out.println(i.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> clazz.getModifiers();</span><br><span class="line">        System.out.println(<span class="string">&quot;是否为 public：&quot;</span> + Modifier.isPublic(modifiers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">类名：ArrayList</span><br><span class="line">完整类名：java.util.ArrayList</span><br><span class="line">包名：java.util</span><br><span class="line">父类：java.util.AbstractList</span><br><span class="line">实现的接口：</span><br><span class="line">java.util.List</span><br><span class="line">java.util.RandomAccess</span><br><span class="line">java.lang.Cloneable</span><br><span class="line">java.io.Serializable</span><br><span class="line">是否为 public：true</span><br></pre></td></tr></table></figure><hr><h2 id="5-通过反射创建对象"><a href="#5-通过反射创建对象" class="headerlink" title="5. 通过反射创建对象"></a><strong>5. 通过反射创建对象</strong></h2><p>反射可以动态创建对象，使用 <code>newInstance()</code> 或 <code>Constructor</code> 类。</p><h3 id="方式-1：使用-Class-newInstance"><a href="#方式-1：使用-Class-newInstance" class="headerlink" title="方式 1：使用 Class.newInstance()"></a><strong>方式 1：使用 <code>Class.newInstance()</code></strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.util.ArrayList&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">System.out.println(<span class="string">&quot;创建的对象：&quot;</span> + obj);</span><br></pre></td></tr></table></figure><p><strong>适用于：</strong> 需要创建无参构造方法的实例。</p><hr><h3 id="方式-2：使用-Constructor-newInstance"><a href="#方式-2：使用-Constructor-newInstance" class="headerlink" title="方式 2：使用 Constructor.newInstance()"></a><strong>方式 2：使用 <code>Constructor.newInstance()</code></strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionConstructorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = String.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 String(String original) 构造方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;Hello Reflection&quot;</span>);</span><br><span class="line">        System.out.println(obj); <span class="comment">// 输出 Hello Reflection</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适用于：</strong> 需要调用<strong>有参构造</strong>创建对象。</p><hr><h2 id="6-通过反射访问字段"><a href="#6-通过反射访问字段" class="headerlink" title="6. 通过反射访问字段"></a><strong>6. 通过反射访问字段</strong></h2><p>反射可以访问和修改<strong>私有或公共字段</strong>（变量）。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;默认名字&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionFieldTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class&lt;?&gt; clazz = person.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 private 字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 允许访问私有字段</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取字段值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;原始值：&quot;</span> + field.get(person));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改字段值</span></span><br><span class="line">        field.set(person, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后的值：&quot;</span> + field.get(person));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原始值：默认名字</span><br><span class="line">修改后的值：张三</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>setAccessible(true)</code> 允许访问私有字段。</p><hr><h2 id="7-通过反射调用方法"><a href="#7-通过反射调用方法" class="headerlink" title="7. 通过反射调用方法"></a><strong>7. 通过反射调用方法</strong></h2><p>可以使用 <code>Method.invoke()</code> <strong>动态调用方法</strong>，包括私有方法。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class&lt;?&gt; clazz = person.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 允许访问私有方法</span></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method.invoke(person, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好, 李四</span><br></pre></td></tr></table></figure><hr><h2 id="8-反射与-ClassLoader"><a href="#8-反射与-ClassLoader" class="headerlink" title="8. 反射与 ClassLoader"></a><strong>8. 反射与 <code>ClassLoader</code></strong></h2><p>反射可以<strong>动态加载类</strong>，配合 <code>ClassLoader</code> 进行<strong>热加载</strong>，常用于插件机制和框架开发。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">Class&lt;?&gt; clazz = classLoader.loadClass(<span class="string">&quot;java.util.Date&quot;</span>);</span><br><span class="line">System.out.println(clazz.getName()); <span class="comment">// 输出 java.util.Date</span></span><br></pre></td></tr></table></figure><hr><h2 id="9-反射的应用场景"><a href="#9-反射的应用场景" class="headerlink" title="9. 反射的应用场景"></a><strong>9. 反射的应用场景</strong></h2><ol><li><p>框架开发</p><p>（如 Spring、MyBatis）：</p><ul><li>反射用于<strong>依赖注入</strong>，如 <code>Spring</code> 的 <code>@Autowired</code>。</li><li>动态代理（AOP）基于反射实现。</li></ul></li><li><p>JVM 调试与工具</p><p>：</p><ul><li>反射用于开发 <code>IDE</code> 插件，如 <code>IntelliJ IDEA</code> 插件。</li></ul></li><li><p>动态加载类</p><p>：</p><ul><li>适用于插件系统，例如 Minecraft 插件、Tomcat 动态加载 Web 应用。</li></ul></li><li><p>序列化与反序列化</p><p>：</p><ul><li>JSON 库（如 Jackson、Gson）基于反射解析对象。</li></ul></li></ol><hr><h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a><strong>10. 总结</strong></h2><p>🔹 反射允许<strong>运行时获取类信息、创建对象、调用方法、访问字段</strong>。<br> 🔹 常用类包括 <code>Class&lt;?&gt;</code>、<code>Constructor&lt;?&gt;</code>、<code>Method</code> 和 <code>Field</code>。<br> 🔹 反射用于<strong>框架开发、动态代理、插件系统</strong>。<br> 🔹 反射会降低性能，应谨慎使用，必要时使用 <code>缓存</code> 机制优化。</p><p>🚀 <strong>掌握反射，你就掌握了 Java 的动态魔法！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常处理</title>
      <link href="/2025/04/21/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2025/04/21/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-异常处理教学"><a href="#Java-异常处理教学" class="headerlink" title="Java 异常处理教学"></a><strong>Java 异常处理教学</strong></h1><h2 id="1️⃣-什么是异常？"><a href="#1️⃣-什么是异常？" class="headerlink" title="1️⃣ 什么是异常？"></a><strong>1️⃣ 什么是异常？</strong></h2><p>在 Java 中，**异常（Exception）**是程序运行时发生的错误，可能会导致程序中断。异常通常发生在：</p><ul><li>数学计算错误（如除以 0）</li><li>数组访问越界</li><li>文件找不到</li><li>空指针访问</li><li>类型转换错误等</li></ul><p>为了保证程序的稳定性，Java 提供了<strong>异常处理机制</strong>来捕获和处理这些错误。</p><hr><h2 id="2️⃣-Java-异常体系"><a href="#2️⃣-Java-异常体系" class="headerlink" title="2️⃣ Java 异常体系"></a><strong>2️⃣ Java 异常体系</strong></h2><p>在 Java 中，异常类是 <code>Throwable</code> 类的子类，可以分为：</p><ol><li><strong>Error（错误）</strong>：通常是 JVM 级别的错误，不应该在代码中处理（如 <code>OutOfMemoryError</code>）。</li><li>Exception（异常）：<ul><li><strong>受检异常（Checked Exception）</strong>：必须在代码中处理，否则编译错误（如 <code>IOException</code>）。</li><li><strong>非受检异常（Unchecked Exception）</strong>：程序运行时可能发生，但可以不处理（如 <code>NullPointerException</code>）。</li></ul></li></ol><h3 id="Java-异常类层次结构"><a href="#Java-异常类层次结构" class="headerlink" title="Java 异常类层次结构"></a><strong>Java 异常类层次结构</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Throwable</span><br><span class="line">│</span><br><span class="line">├── Error（错误） ❌ 一般不处理</span><br><span class="line">│   ├── OutOfMemoryError</span><br><span class="line">│   ├── StackOverflowError</span><br><span class="line">│   └── ...</span><br><span class="line">│</span><br><span class="line">└── Exception（异常） ✅ 可以处理</span><br><span class="line">    ├── 受检异常（必须处理）</span><br><span class="line">    │   ├── IOException</span><br><span class="line">    │   ├── SQLException</span><br><span class="line">    │   └── ...</span><br><span class="line">    │</span><br><span class="line">    └── 运行时异常（可选处理）</span><br><span class="line">        ├── NullPointerException</span><br><span class="line">        ├── ArithmeticException</span><br><span class="line">        ├── ArrayIndexOutOfBoundsException</span><br><span class="line">        ├── ClassCastException</span><br><span class="line">        └── ...</span><br></pre></td></tr></table></figure><hr><h2 id="3️⃣-异常处理语句"><a href="#3️⃣-异常处理语句" class="headerlink" title="3️⃣ 异常处理语句"></a><strong>3️⃣ 异常处理语句</strong></h2><p>Java 提供了 <code>try-catch-finally</code> 语句来处理异常，基本语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能抛出异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型 e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 可选，始终执行（如释放资源）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-try-catch-处理异常"><a href="#3-1-try-catch-处理异常" class="headerlink" title="3.1 try-catch 处理异常"></a><strong>3.1 try-catch 处理异常</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>; <span class="comment">// 发生异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;结果：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生算术异常：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序继续执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发生算术异常：/ by zero</span><br><span class="line">程序继续执行...</span><br></pre></td></tr></table></figure><hr><h3 id="3-2-多个-catch-处理不同异常"><a href="#3-2-多个-catch-处理不同异常" class="headerlink" title="3.2 多个 catch 处理不同异常"></a><strong>3.2 多个 catch 处理不同异常</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiCatchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">5</span>]); <span class="comment">// 访问越界</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;算术异常：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组索引越界异常：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序继续执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组索引越界异常：Index 5 out of bounds for length 3</span><br><span class="line">程序继续执行...</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-多异常合并（JDK-7-）"><a href="#3-3-多异常合并（JDK-7-）" class="headerlink" title="3.3 多异常合并（JDK 7+）"></a><strong>3.3 多异常合并（JDK 7+）</strong></h3><p>在 Java 7 及以上版本，可以使用 <code>|</code> 处理多个异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;abc&quot;</span>); <span class="comment">// NumberFormatException</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException | ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-4-finally-代码块"><a href="#3-4-finally-代码块" class="headerlink" title="3.4 finally 代码块"></a><strong>3.4 finally 代码块</strong></h3><p><code>finally</code> 代码块无论是否发生异常都会执行，通常用于<strong>释放资源</strong>（如关闭文件、数据库连接等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;打开文件...&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>; <span class="comment">// 发生异常</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭文件...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打开文件...</span><br><span class="line">发生异常：/ by zero</span><br><span class="line">关闭文件...</span><br></pre></td></tr></table></figure><hr><h2 id="4️⃣-抛出异常（throw-throws）"><a href="#4️⃣-抛出异常（throw-throws）" class="headerlink" title="4️⃣ 抛出异常（throw &amp; throws）"></a><strong>4️⃣ 抛出异常（throw &amp; throws）</strong></h2><h3 id="4-1-使用-throw-关键字"><a href="#4-1-使用-throw-关键字" class="headerlink" title="4.1 使用 throw 关键字"></a><strong>4.1 使用 throw 关键字</strong></h3><p><code>throw</code> 用于<strong>手动抛出异常</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrowDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;年龄必须 &gt;= 18&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄合法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        checkAge(<span class="number">15</span>); <span class="comment">// 这里会抛异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: 年龄必须 &gt;= 18</span><br></pre></td></tr></table></figure><hr><h3 id="4-2-使用-throws-声明异常"><a href="#4-2-使用-throws-声明异常" class="headerlink" title="4.2 使用 throws 声明异常"></a><strong>4.2 使用 throws 声明异常</strong></h3><p><code>throws</code> 用于<strong>声明方法可能抛出的异常</strong>，调用者需要处理异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrowsDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file);</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          readFile(<span class="string">&quot;nonexistent.txt&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件读取错误：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件读取错误：nonexistent.txt (系统找不到指定的文件。)</span><br></pre></td></tr></table></figure><hr><h2 id="5️⃣-自定义异常"><a href="#5️⃣-自定义异常" class="headerlink" title="5️⃣ 自定义异常"></a><strong>5️⃣ 自定义异常</strong></h2><p>Java 允许创建自己的异常类，继承 <code>Exception</code> 或 <code>RuntimeException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义异常类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> AgeException &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;未满18岁不能注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkAge(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgeException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🔹 运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异常：未满18岁不能注册</span><br></pre></td></tr></table></figure><hr><h2 id="6️⃣-异常处理最佳实践"><a href="#6️⃣-异常处理最佳实践" class="headerlink" title="6️⃣ 异常处理最佳实践"></a><strong>6️⃣ 异常处理最佳实践</strong></h2><p>✅ <strong>只捕获必要的异常</strong>，不要用 <code>catch(Exception e)</code> 捕获所有异常<br>✅ <strong>合理使用 finally 释放资源</strong><br>✅ <strong>使用自定义异常提高可读性</strong><br>✅ <strong>受检异常（Checked Exception）应该处理或声明</strong><br>✅ <strong>运行时异常（Unchecked Exception）一般不捕获，避免隐藏 bug</strong></p><hr><h2 id="🎯-练习题"><a href="#🎯-练习题" class="headerlink" title="🎯 练习题"></a><strong>🎯 练习题</strong></h2><p>1️⃣ <strong>编写一个方法，计算两个数的除法</strong>，如果除数为 0，抛出 <code>ArithmeticException</code>。<br>2️⃣ <strong>编写一个读取文件的程序</strong>，如果文件不存在，抛出 <code>FileNotFoundException</code> 并处理它。<br>3️⃣ <strong>创建自定义异常</strong><code>NegativeNumberException</code>，如果方法参数是负数，则抛出异常。</p><hr><p>💡 <strong>试试动手写代码吧！有问题随时交流 😊</strong>🚀</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据类型转换</title>
      <link href="/2025/04/21/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2025/04/21/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/2025/04/21/Java%E6%95%B0%E7%BB%84/"/>
      <url>/2025/04/21/Java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h1><p>来源：Chatgpt-4o</p><blockquote><p>在 Java 中，数组是一种用于存储固定数量、同类型元素的数据结构。它非常高效，适合用来存储和访问大量数据。</p></blockquote><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="1️⃣-数组声明和初始化"><a href="#1️⃣-数组声明和初始化" class="headerlink" title="1️⃣ 数组声明和初始化"></a>1️⃣ 数组声明和初始化</h3><p><strong>声明数组：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers;    <span class="comment">// 推荐写法</span></span><br><span class="line"><span class="type">int</span> numbers[];    <span class="comment">// 也可以这样，但不太推荐</span></span><br></pre></td></tr></table></figure><p><strong>分配内存：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">// 创建一个长度为5的整数数组，默认值为0</span></span><br></pre></td></tr></table></figure><p><strong>声明并初始化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 静态初始化，直接赋值</span></span><br></pre></td></tr></table></figure><p><strong>动态初始化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];     <span class="comment">// 创建一个长度为3的数组</span></span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">10</span>;                <span class="comment">// 给数组元素赋值</span></span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">numbers[<span class="number">2</span>] = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="2️⃣-数组基本操作"><a href="#2️⃣-数组基本操作" class="headerlink" title="2️⃣ 数组基本操作"></a>2️⃣ 数组基本操作</h3><p><strong>访问元素：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(numbers[<span class="number">0</span>]); <span class="comment">// 输出第一个元素，10</span></span><br></pre></td></tr></table></figure><p><strong>修改元素：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers[<span class="number">1</span>] = <span class="number">99</span>; <span class="comment">// 把第二个元素改为99</span></span><br></pre></td></tr></table></figure><p><strong>获取数组长度：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(numbers.length); <span class="comment">// 输出数组长度</span></span><br></pre></td></tr></table></figure><hr><h3 id="3️⃣-遍历数组"><a href="#3️⃣-遍历数组" class="headerlink" title="3️⃣ 遍历数组"></a>3️⃣ 遍历数组</h3><p><strong>for 循环：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>增强型 for 循环（foreach）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4️⃣-多维数组"><a href="#4️⃣-多维数组" class="headerlink" title="4️⃣ 多维数组"></a>4️⃣ 多维数组</h3><p><strong>声明和初始化二维数组：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>访问二维数组元素：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(matrix[<span class="number">1</span>][<span class="number">2</span>]); <span class="comment">// 输出6</span></span><br></pre></td></tr></table></figure><p><strong>遍历二维数组：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">        System.out.print(matrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5️⃣-常见问题"><a href="#5️⃣-常见问题" class="headerlink" title="5️⃣ 常见问题"></a>5️⃣ 常见问题</h3><p><strong>数组越界异常：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr[<span class="number">3</span>]); <span class="comment">// java.lang.ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure><p><strong>数组默认值：</strong></p><ul><li><code>int</code>、<code>long</code>、<code>short</code>、<code>byte</code> -&gt; <code>0</code></li><li><code>float</code>、<code>double</code> -&gt; <code>0.0</code></li><li><code>boolean</code> -&gt; <code>false</code></li><li><code>char</code> -&gt; <code>\u0000</code> (空字符)</li><li>引用类型 -&gt; <code>null</code></li></ul><h2 id="Java-Arrays"><a href="#Java-Arrays" class="headerlink" title="Java  Arrays"></a><code>Java  Arrays</code></h2><blockquote><p><code>java.util.Arrays</code> 是 Java 中非常强大的一个工具类，提供了对数组的操作方法，比如排序、搜索、比较、填充、转换等。</p></blockquote><hr><h3 id="1️⃣-导包"><a href="#1️⃣-导包" class="headerlink" title="1️⃣ 导包"></a><strong>1️⃣ 导包</strong></h3><p>首先要导入 <code>Arrays</code> 类所在的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br></pre></td></tr></table></figure><hr><h3 id="2️⃣-常用方法"><a href="#2️⃣-常用方法" class="headerlink" title="2️⃣ 常用方法"></a><strong>2️⃣ 常用方法</strong></h3><h4 id="（1）数组排序-—-Arrays-sort"><a href="#（1）数组排序-—-Arrays-sort" class="headerlink" title="（1）数组排序 — Arrays.sort()"></a><strong>（1）数组排序 — <code>Arrays.sort()</code></strong></h4><p>升序排列数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">Arrays.sort(numbers);</span><br><span class="line">System.out.println(Arrays.toString(numbers)); <span class="comment">// 输出：[1, 2, 3, 5, 8]</span></span><br></pre></td></tr></table></figure><p>对部分数组排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">Arrays.sort(numbers, <span class="number">1</span>, <span class="number">4</span>); <span class="comment">// 对索引1到3进行排序（不包括索引4）</span></span><br><span class="line">System.out.println(Arrays.toString(numbers)); <span class="comment">// 输出：[5, 1, 2, 8, 3]</span></span><br></pre></td></tr></table></figure><hr><h4 id="（2）数组转换为字符串-—-Arrays-toString"><a href="#（2）数组转换为字符串-—-Arrays-toString" class="headerlink" title="（2）数组转换为字符串 — Arrays.toString()"></a><strong>（2）数组转换为字符串 — <code>Arrays.toString()</code></strong></h4><p>把一维数组转换为字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(names)); <span class="comment">// 输出：[Alice, Bob, Charlie]</span></span><br></pre></td></tr></table></figure><p>把二维数组转换为字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">System.out.println(Arrays.deepToString(matrix)); <span class="comment">// 输出：[[1, 2], [3, 4]]</span></span><br></pre></td></tr></table></figure><hr><h4 id="（3）数组填充-—-Arrays-fill"><a href="#（3）数组填充-—-Arrays-fill" class="headerlink" title="（3）数组填充 — Arrays.fill()"></a><strong>（3）数组填充 — <code>Arrays.fill()</code></strong></h4><p>将数组所有元素填充为同一个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(arr, <span class="number">7</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">// 输出：[7, 7, 7, 7, 7]</span></span><br></pre></td></tr></table></figure><p>对部分数组填充：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(arr, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>); <span class="comment">// 填充索引1到3（不包括索引4）</span></span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">// 输出：[0, 9, 9, 9, 0]</span></span><br></pre></td></tr></table></figure><hr><h4 id="（4）数组比较-—-Arrays-equals-和-Arrays-deepEquals"><a href="#（4）数组比较-—-Arrays-equals-和-Arrays-deepEquals" class="headerlink" title="（4）数组比较 — Arrays.equals() 和 Arrays.deepEquals()"></a><strong>（4）数组比较 — <code>Arrays.equals()</code> 和 <code>Arrays.deepEquals()</code></strong></h4><p>比较一维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(Arrays.equals(arr1, arr2)); <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure><p>比较多维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr1 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span>[][] arr2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">System.out.println(Arrays.deepEquals(arr1, arr2)); <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure><hr><h4 id="（5）数组复制-—-Arrays-copyOf-和-Arrays-copyOfRange"><a href="#（5）数组复制-—-Arrays-copyOf-和-Arrays-copyOfRange" class="headerlink" title="（5）数组复制 — Arrays.copyOf() 和 Arrays.copyOfRange()"></a><strong>（5）数组复制 — <code>Arrays.copyOf()</code> 和 <code>Arrays.copyOfRange()</code></strong></h4><p>复制整个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] copy = Arrays.copyOf(numbers, numbers.length);</span><br><span class="line">System.out.println(Arrays.toString(copy)); <span class="comment">// 输出：[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>复制部分数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] part = Arrays.copyOfRange(numbers, <span class="number">1</span>, <span class="number">4</span>); <span class="comment">// 从索引1到索引3（不包括4）</span></span><br><span class="line">System.out.println(Arrays.toString(part)); <span class="comment">// 输出：[2, 3, 4]</span></span><br></pre></td></tr></table></figure><hr><h4 id="（6）数组搜索-—-Arrays-binarySearch"><a href="#（6）数组搜索-—-Arrays-binarySearch" class="headerlink" title="（6）数组搜索 — Arrays.binarySearch()"></a><strong>（6）数组搜索 — <code>Arrays.binarySearch()</code></strong></h4><p>在有序数组中查找元素（<strong>必须是已排序数组！</strong>）(是二分查找)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);</span><br><span class="line">System.out.println(index); <span class="comment">// 输出：2 （元素5的索引位置）</span></span><br></pre></td></tr></table></figure><p>如果找不到会返回负数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">6</span>);</span><br><span class="line">System.out.println(index); <span class="comment">// 输出：-4 （表示6应该插入在索引3的位置）</span></span><br></pre></td></tr></table></figure><hr><h3 id="3️⃣-综合练习"><a href="#3️⃣-综合练习" class="headerlink" title="3️⃣ 综合练习"></a><strong>3️⃣ 综合练习</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">42</span>, <span class="number">12</span>, <span class="number">56</span>, <span class="number">7</span>, <span class="number">23</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后: &quot;</span> + Arrays.toString(numbers));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充</span></span><br><span class="line">        Arrays.fill(numbers, <span class="number">2</span>, <span class="number">4</span>, <span class="number">99</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;填充后: &quot;</span> + Arrays.toString(numbers));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制</span></span><br><span class="line">        <span class="type">int</span>[] copy = Arrays.copyOf(numbers, numbers.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;复制的数组: &quot;</span> + Arrays.toString(copy));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数组是否相等: &quot;</span> + Arrays.equals(numbers, copy));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 搜索</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">99</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;99 的索引: &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">排序后: [7, 12, 23, 42, 56]</span><br><span class="line">填充后: [7, 12, 99, 99, 56]</span><br><span class="line">复制的数组: [7, 12, 99, 99, 56]</span><br><span class="line">数组是否相等: true</span><br><span class="line">99 的索引: 2</span><br></pre></td></tr></table></figure><hr><h3 id="4️⃣-小技巧"><a href="#4️⃣-小技巧" class="headerlink" title="4️⃣ 小技巧"></a><strong>4️⃣ 小技巧</strong></h3><ul><li><p><strong>数组快速初始化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// 标准写法</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;         <span class="comment">// 简写</span></span><br></pre></td></tr></table></figure></li><li><p><strong>排序降序：</strong>（使用 <code>Comparator</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] numbers = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">Arrays.sort(numbers, (a, b) -&gt; b - a);</span><br><span class="line">System.out.println(Arrays.toString(numbers)); <span class="comment">// 输出：[8, 5, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组转换为 <code>List</code>：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; nameList = Arrays.asList(names);</span><br><span class="line">System.out.println(nameList); <span class="comment">// 输出：[Alice, Bob, Charlie]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义比较器降序排序原理"><a href="#自定义比较器降序排序原理" class="headerlink" title="自定义比较器降序排序原理"></a>自定义比较器降序排序原理</h2><p><strong><code>Arrays.sort(T[] a, Comparator&lt;? super T&gt; c)</code></strong> 方法，搭配了一个<strong>自定义比较器（Comparator）</strong>。</p><p>首先，这个方法需要一个<strong>比较器（Comparator）</strong>，这个比较器决定数组元素之间的排序规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(numbers, (a, b) -&gt; b - a);</span><br></pre></td></tr></table></figure><p>这里 <code>(a, b) -&gt; b - a</code> 是一个 <strong>Lambda 表达式</strong>，本质上是一个实现了 <code>Comparator&lt;T&gt;</code> 接口的匿名方法。等效于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer a, Integer b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b - a; <span class="comment">// 降序排序规则</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Arrays.sort(numbers, comparator);</span><br></pre></td></tr></table></figure><hr><p><strong>💡 那为什么 <code>b - a</code> 能实现降序呢？</strong><br> 看 <code>Comparator</code> 接口的 <code>compare()</code> 方法定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br></pre></td></tr></table></figure><p>这个方法返回一个 <code>int</code>，比较两个元素时的返回值决定了排序顺序：</p><ul><li><strong><code>&lt; 0</code></strong>：表示 <code>o1</code> 应该排在 <code>o2</code> 前面。</li><li><strong><code>&gt; 0</code></strong>：表示 <code>o1</code> 应该排在 <code>o2</code> 后面。</li><li><strong><code>= 0</code></strong>：表示两个元素相等，顺序不变。</li></ul><p><strong>我们来看看 <code>b - a</code> 是怎么影响排序的：</strong></p><p>假设数组是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] numbers = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>比较两个数 <code>a = 5</code> 和 <code>b = 2</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b - a = <span class="number">2</span> - <span class="number">5</span> = -<span class="number">3</span>  <span class="comment">// 返回负数，表示 5 应该排在 2 的前面（降序）</span></span><br></pre></td></tr></table></figure><p>比较两个数 <code>a = 8</code> 和 <code>b = 5</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b - a = <span class="number">5</span> - <span class="number">8</span> = -<span class="number">3</span>  <span class="comment">// 8 应该排在 5 的前面（降序）</span></span><br></pre></td></tr></table></figure><p><strong>所以这个写法实现了降序排序。</strong></p><hr><p><strong>✨ 总结一下：</strong></p><ul><li><code>b - a</code> 是降序排序，因为当 <code>b</code> 比 <code>a</code> 小时，返回负数，<code>a</code> 会被排在前面。</li><li>如果想要升序排序，就用 <code>a - b</code>（默认行为）。</li><li><code>Arrays.sort()</code> 搭配自定义比较器非常灵活，适用于复杂对象排序。</li></ul><hr><p><strong>📝 拓展：用 <code>Collections.reverseOrder()</code> 也可以降序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] numbers = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">Arrays.sort(numbers, Collections.reverseOrder());</span><br><span class="line">System.out.println(Arrays.toString(numbers)); <span class="comment">// 输出：[8, 5, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="/2025/04/21/Java%E6%96%B9%E6%B3%95/"/>
      <url>/2025/04/21/Java%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java方法与构造方法"><a href="#Java方法与构造方法" class="headerlink" title="Java方法与构造方法"></a>Java方法与构造方法</h1><h2 id="方法的命名规则"><a href="#方法的命名规则" class="headerlink" title="方法的命名规则"></a>方法的命名规则</h2><ul><li>方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<code>addPerson</code>。</li><li>下划线可能出现在 <code>JUnit</code> 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。</li></ul><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><p>一般情况下，定义一个方法包含以下语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p><ul><li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型</li><li>**返回值类型 ：**方法可能会返回值。<code>returnValueType</code> 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，<code>returnValueType</code> 是关键字<code>void</code></li><li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名</li><li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数</li><li>**方法体：**方法体包含具体的语句，定义该方法的功能</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/D53C92B3-9643-4871-8A72-33D491299653.jpg"></p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>上面使用的<code>max</code>方法仅仅适用于<code>int</code>型数据。但如果你想得到两个浮点类型数据的最大值呢？</p><p>解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">    <span class="keyword">return</span> num1;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你调用<code>max</code>方法时传递的是<code>int</code>型参数，则 <code>int</code>型参数的<code>max</code>方法就会被调用；</p><p>如果传递的是<code>double</code>型参数，则<code>double</code>类型的<code>max</code>方法体会被调用，这叫做方法重载；</p><p>就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。</p><p><code>Java</code>编译器根据方法签名判断哪个方法应该被调用。</p><p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p><p>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>变量的范围是程序中该变量可以被引用的部分。</p><p>方法内定义的变量被称为局部变量。</p><p>局部变量的作用范围从声明开始，直到包含它的块结束。</p><p>局部变量必须声明才可以使用。</p><p>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。</p><p>for循环的初始化部分声明的变量，其作用范围在整个循环。</p><p>但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/12-130Q1221013F0.jpg"></p><p>你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。</p><h2 id="命令行参数的使用"><a href="#命令行参数的使用" class="headerlink" title="命令行参数的使用"></a>命令行参数的使用</h2><p>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p><p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面的程序打印所有的命令行参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLine</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123; </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]: &quot;</span> + args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLine</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123; </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]: &quot;</span> + args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法-构造器"><a href="#构造方法-构造器" class="headerlink" title="构造方法(构造器)"></a>构造方法(构造器)</h2><p>构造方法（Constructor）是用于创建类的对象的特殊方法。当使用 new 关键字创建对象时，构造方法会自动调用，用来初始化对象的属性。</p><h3 id="构造方法特点"><a href="#构造方法特点" class="headerlink" title="构造方法特点"></a><strong>构造方法特点</strong></h3><ul><li><strong>方法名与类名相同</strong>：构造方法的名字必须和类名一致。</li><li><strong>没有返回类型</strong>：构造方法没有返回类型，连 <code>void</code> 也不能写。</li><li><strong>在创建对象时自动调用</strong>：每次使用 <code>new</code> 创建对象时，都会自动调用构造方法。</li><li><strong>可以重载</strong>：可以为同一个类定义多个构造方法，但这些构造方法的参数列表必须不同（即构成重载）。</li></ul><p>不管你是否自定义构造方法，所有的类都有构造方法，因为 Java 自动提供了一个默认构造方法，默认构造方法的访问修饰符和类的访问修饰符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。</p><p>一旦你定义了自己的构造方法，默认构造方法就会失效。</p><p>下面是一个使用构造方法的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的构造函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 以下是构造函数</span></span><br><span class="line">  MyClass(<span class="type">int</span> i ) &#123;</span><br><span class="line">    x = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsDemo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyClass</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>( <span class="number">10</span> );</span><br><span class="line">    <span class="type">MyClass</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>( <span class="number">20</span> );</span><br><span class="line">    System.out.println(t1.x + <span class="string">&quot; &quot;</span> + t2.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 20</span><br></pre></td></tr></table></figure><hr><h3 id="构造方法的类型"><a href="#构造方法的类型" class="headerlink" title="构造方法的类型"></a><strong>构造方法的类型</strong></h3><h4 id="📌-1-无参构造方法"><a href="#📌-1-无参构造方法" class="headerlink" title="📌 1. 无参构造方法"></a><strong>📌 1. 无参构造方法</strong></h4><p>无参数的构造方法，不接受任何参数，通常用于初始化默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// 调用无参构造</span></span><br><span class="line">        p1.display();  <span class="comment">// 输出：姓名：未知，年龄：18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="📌-2-有参构造方法"><a href="#📌-2-有参构造方法" class="headerlink" title="📌 2. 有参构造方法"></a><strong>📌 2. 有参构造方法</strong></h4><p>带参数的构造方法，可以在创建对象时传递参数进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>); <span class="comment">// 调用有参构造</span></span><br><span class="line">        p1.display();  <span class="comment">// 输出：姓名：张三，年龄：25</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⚠️ 注意：</strong></p><ul><li>这里的 <code>this.name = name;</code> 用于区分成员变量 <code>name</code> 和 形参 <code>name</code>。</li><li><code>this</code> 代表当前对象。</li></ul><hr><h4 id="📌-3-构造方法重载"><a href="#📌-3-构造方法重载" class="headerlink" title="📌 3. 构造方法重载"></a><strong>📌 3. 构造方法重载</strong></h4><p><strong>一个类可以有多个构造方法</strong>（参数列表不同），这就是<strong>构造方法的重载</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;默认姓名&quot;</span>, <span class="number">18</span>);  <span class="comment">// 调用另一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  <span class="comment">// 调用无参构造</span></span><br><span class="line">        p1.display();  <span class="comment">// 输出：姓名：默认姓名，年龄：18</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">30</span>);  <span class="comment">// 调用有参构造</span></span><br><span class="line">        p2.display();  <span class="comment">// 输出：姓名：李四，年龄：30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>💡 重点</strong></p><ul><li><strong><code>this(&quot;默认姓名&quot;, 18);</code></strong> 代表调用另一个构造方法，避免重复代码。</li></ul><hr><h4 id="📌-4-复制构造方法"><a href="#📌-4-复制构造方法" class="headerlink" title="📌 4. 复制构造方法"></a><strong>📌 4. 复制构造方法</strong></h4><p>用于创建一个新对象，并复制已有对象的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = p.name;</span><br><span class="line">        <span class="built_in">this</span>.age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(p1);  <span class="comment">// 复制 p1</span></span><br><span class="line">        p2.display();  <span class="comment">// 输出：姓名：王五，年龄：28</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>💡 重点</strong></p><ul><li><code>Person(Person p)</code> 是 <strong>复制构造方法</strong>，用于复制对象的属性。</li></ul><hr><h4 id="📌-5-私有构造方法"><a href="#📌-5-私有构造方法" class="headerlink" title="📌 5. 私有构造方法"></a><strong>📌 5. 私有构造方法</strong></h4><p>构造方法可以是 <code>private</code>，用于：</p><ol><li><strong>单例模式</strong>（Singleton Pattern）。</li><li><strong>禁止外部创建对象</strong>（比如工具类）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取唯一实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是单例对象！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">obj1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        obj1.showMessage();  <span class="comment">// 输出：我是单例对象！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>💡 重点</strong></p><ul><li><code>private Singleton()</code> 使得外部不能 <code>new Singleton();</code>。</li><li>通过 <code>getInstance()</code> 方法获取唯一实例。</li></ul><hr><h4 id="6️⃣-构造方法-vs-普通方法"><a href="#6️⃣-构造方法-vs-普通方法" class="headerlink" title="6️⃣ 构造方法 vs 普通方法"></a><strong>6️⃣ 构造方法 vs 普通方法</strong></h4><table><thead><tr><th>特性</th><th><strong>构造方法</strong></th><th><strong>普通方法</strong></th></tr></thead><tbody><tr><td><strong>方法名</strong></td><td><strong>与类名相同</strong></td><td>任意</td></tr><tr><td><strong>是否有返回值</strong></td><td>❌ 不能有返回值类型</td><td>✅ 可以有返回值</td></tr><tr><td><strong>调用方式</strong></td><td><strong>创建对象时自动调用</strong></td><td><strong>手动调用</strong></td></tr><tr><td><strong>作用</strong></td><td><strong>初始化对象</strong></td><td><strong>实现功能</strong></td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line">        num = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();  <span class="comment">// 构造方法自动调用</span></span><br><span class="line">        d.show();  <span class="comment">// 手动调用普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>💡 重点</strong></p><ul><li><strong>构造方法</strong> 在 <code>new</code> 时 <strong>自动调用</strong>，不能手动调用。</li><li><strong>普通方法</strong> 需要手动调用，如 <code>obj.show();</code>。</li></ul><hr><h4 id="构造方法中的-this-关键字"><a href="#构造方法中的-this-关键字" class="headerlink" title="构造方法中的 this 关键字"></a>构造方法中的 this 关键字</h4><p>在构造方法中，this 关键字通常用于两种情况：</p><p>**1、引用当前对象的属性或方法：**当构造方法的参数名与类属性名相同时，使用 this 来区分类属性和参数。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name; <span class="comment">// this.name 表示类的属性</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**2、调用另一个构造方法：**可以使用 this() 调用当前类的其他构造方法，常用于避免重复代码，但必须放在构造方法的第一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(name, <span class="number">0</span>); <span class="comment">// 调用另一个双参数的构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法是 Java 面向对象编程中非常重要的部分，通过使用构造方法可以有效控制对象的初始化过程，保证创建出的对象状态的完整性和一致性。</p><h4 id="📌-7️⃣-总结"><a href="#📌-7️⃣-总结" class="headerlink" title="📌 7️⃣ 总结"></a><strong>📌 7️⃣ 总结</strong></h4><ol><li><p><strong>构造方法的作用</strong>：用于初始化对象，创建对象时自动调用。</p></li><li><p>构造方法的类型：</p><ul><li>✅ 无参构造方法</li><li>✅ 有参构造方法</li><li>✅ 构造方法重载</li><li>✅ 复制构造方法</li><li>✅ 私有构造方法（用于单例模式）</li></ul></li><li><p>构造方法 vs 普通方法：</p><p>构造方法用于初始化，普通方法用于执行操作。</p></li></ol><h1 id="Java参数类型"><a href="#Java参数类型" class="headerlink" title="Java参数类型"></a>Java参数类型</h1><p>在 Java 里，方法的参数可以是多种类型，下面为你详细介绍：</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>基本数据类型是 Java 里最基础的数据类型，可直接存储数据值。Java 有 8 种基本数据类型，它们都能作为方法的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveTypeExample</span> &#123;</span><br><span class="line">    <span class="comment">// 接收int类型参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printInt</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传入的整数是: &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收double类型参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printDouble</span><span class="params">(<span class="type">double</span> num)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传入的双精度浮点数是: &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printInt(<span class="number">10</span>);</span><br><span class="line">        printDouble(<span class="number">3.14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>引用数据类型并非直接存储数据值，而是存储对象的引用（内存地址）。</p><ul><li><strong>类类型</strong>：任何自定义类或者 Java 标准库中的类都可以作为方法参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTypeExample</span> &#123;</span><br><span class="line">    <span class="comment">// 接收Person类对象作为参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printPerson</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人的名字是: &quot;</span> + person.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        printPerson(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>数组类型</strong>：数组是一种特殊的引用类型，可作为方法参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTypeExample</span> &#123;</span><br><span class="line">    <span class="comment">// 接收int数组作为参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        printArray(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>接口类型</strong>：接口也能作为方法参数，此时传入的参数必须是实现了该接口的类的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTypeExample</span> &#123;</span><br><span class="line">    <span class="comment">// 接收Shape接口类型的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArea</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;该图形的面积是: &quot;</span> + shape.area());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line">        printArea(circle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数允许方法接收任意数量的同一类型参数，在方法内部可变参数会被当作数组处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarargsExample</span> &#123;</span><br><span class="line">    <span class="comment">// 可变参数方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNumbers</span><span class="params">(<span class="type">int</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printNumbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        printNumbers(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举类型是一种特殊的类，它表示一组固定的常量。枚举类型也可以作为方法的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTypeExample</span> &#123;</span><br><span class="line">    <span class="comment">// 接收Day枚举类型的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printDay</span><span class="params">(Day day)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天是: &quot;</span> + day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printDay(Day.MONDAY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上所述，Java 方法的参数可以是基本数据类型、引用数据类型（包括类、数组、接口）、可变参数和枚举类型。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java条件语句</title>
      <link href="/2025/04/21/Java%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2025/04/21/Java%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>Java 中的条件语句用于<strong>控制程序执行流程</strong>，让程序在满足不同条件时执行不同的代码块。常用的 Java 条件语句包括：<code>if-else</code>、<code>switch</code> 和三元运算符。让我们一个个来搞懂它们！🚀</p><hr><h2 id="1️⃣-if-else-语句"><a href="#1️⃣-if-else-语句" class="headerlink" title="1️⃣ if-else 语句"></a><strong>1️⃣ <code>if-else</code> 语句</strong></h2><p><code>if-else</code> 是 Java 中最基础也最常用的条件语句。根据布尔表达式的结果（<code>true</code> 或 <code>false</code>）决定执行哪个代码块。</p><h3 id="语法结构："><a href="#语法结构：" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件为 true 时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为 false 时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例：判断一个数是否为偶数"><a href="#示例：判断一个数是否为偶数" class="headerlink" title="示例：判断一个数是否为偶数"></a><strong>示例：判断一个数是否为偶数</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfElseExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(number + <span class="string">&quot; 是偶数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(number + <span class="string">&quot; 是奇数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 是偶数</span><br></pre></td></tr></table></figure><hr><h2 id="2️⃣-if-else-if-else-多分支语句"><a href="#2️⃣-if-else-if-else-多分支语句" class="headerlink" title="2️⃣ if-else if-else 多分支语句"></a><strong>2️⃣ <code>if-else if-else</code> 多分支语句</strong></h2><p>用于处理<strong>多个条件分支</strong>，从上到下依次判断，执行第一个满足条件的代码块。</p><h3 id="语法结构：-1"><a href="#语法结构：-1" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1满足时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件2满足时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 所有条件都不满足时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例：根据分数判断等级"><a href="#示例：根据分数判断等级" class="headerlink" title="示例：根据分数判断等级"></a><strong>示例：根据分数判断等级</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">75</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">良好</span><br></pre></td></tr></table></figure><hr><h2 id="3️⃣-嵌套-if-语句"><a href="#3️⃣-嵌套-if-语句" class="headerlink" title="3️⃣ 嵌套 if 语句"></a><strong>3️⃣ 嵌套 <code>if</code> 语句</strong></h2><p><code>if</code> 语句可以嵌套使用，适用于需要<strong>多层判断</strong>的场景。</p><h3 id="示例：判断一个数是否为正偶数"><a href="#示例：判断一个数是否为正偶数" class="headerlink" title="示例：判断一个数是否为正偶数"></a><strong>示例：判断一个数是否为正偶数</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NestedIfExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(number + <span class="string">&quot; 是正偶数&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(number + <span class="string">&quot; 是正奇数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(number + <span class="string">&quot; 不是正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 是正偶数</span><br></pre></td></tr></table></figure><hr><h2 id="4️⃣-switch-语句"><a href="#4️⃣-switch-语句" class="headerlink" title="4️⃣ switch 语句"></a><strong>4️⃣ <code>switch</code> 语句</strong></h2><p><code>switch</code> 适用于<strong>多分支、等值判断</strong>，相比 <code>if-else</code> 更简洁。</p><h3 id="语法结构：-2"><a href="#语法结构：-2" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 当表达式等于 值1 时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 当表达式等于 值2 时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 所有 case 都不匹配时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例：根据星期数输出星期名称"><a href="#示例：根据星期数输出星期名称" class="headerlink" title="示例：根据星期数输出星期名称"></a><strong>示例：根据星期数输出星期名称</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;周末&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">星期三</span><br></pre></td></tr></table></figure><p>⚠️ <strong>注意事项：</strong></p><ul><li><strong><code>break</code></strong>：跳出 <code>switch</code>，不加会发生**“穿透”**，继续执行后面的 <code>case</code>。</li><li><strong><code>default</code>（可选）</strong>：当所有 <code>case</code> 都不匹配时执行。</li></ul><hr><h2 id="5️⃣-switch-表达式（Java-14-）"><a href="#5️⃣-switch-表达式（Java-14-）" class="headerlink" title="5️⃣ switch 表达式（Java 14+）"></a><strong>5️⃣ <code>switch</code> 表达式（Java 14+）</strong></h2><p><code>switch</code> 在 Java 14 之后支持更简洁的<strong>表达式写法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchExpressionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">dayName</span> <span class="operator">=</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> -&gt; <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span> -&gt; <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span> -&gt; <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="string">&quot;周末&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(dayName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">星期三</span><br></pre></td></tr></table></figure><hr><h2 id="6️⃣-三元运算符（-）"><a href="#6️⃣-三元运算符（-）" class="headerlink" title="6️⃣ 三元运算符（?:）"></a><strong>6️⃣ 三元运算符（<code>?:</code>）</strong></h2><p>三元运算符是<strong>简洁版的 <code>if-else</code></strong>，用于根据条件选择一个值。</p><h3 id="语法结构：-3"><a href="#语法结构：-3" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = (条件) ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="示例：判断一个数的正负"><a href="#示例：判断一个数的正负" class="headerlink" title="示例：判断一个数的正负"></a><strong>示例：判断一个数的正负</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TernaryOperatorExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> -<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (number &gt;= <span class="number">0</span>) ? <span class="string">&quot;非负数&quot;</span> : <span class="string">&quot;负数&quot;</span>;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">负数</span><br></pre></td></tr></table></figure><hr><h2 id="7️⃣-小技巧-注意事项"><a href="#7️⃣-小技巧-注意事项" class="headerlink" title="7️⃣ 小技巧 &amp; 注意事项"></a><strong>7️⃣ 小技巧 &amp; 注意事项</strong></h2><ul><li><strong><code>if-else</code> 更灵活，支持各种复杂条件。</strong></li><li><strong><code>switch</code> 更简洁，适合等值判断。</strong></li><li><strong><code>switch</code> 从 Java 14 开始支持更简洁的箭头表达式。</strong></li><li><strong>三元运算符更简洁，但只适合简单条件判断。</strong></li></ul><hr><h2 id="8️⃣-练习题"><a href="#8️⃣-练习题" class="headerlink" title="8️⃣ 练习题"></a><strong>8️⃣ 练习题</strong></h2><p><strong>🧠 问题 1：写一个程序，判断一个年份是否是闰年。</strong></p><p><strong>🧠 问题 2：用 <code>switch</code> 实现简单计算器（支持加、减、乘、除）。</strong></p><p><strong>🧠 问题 3：使用三元运算符找出两个数中的较大值。</strong></p><hr><p>学会 Java 条件语句后，你就可以让程序具备<strong>智能决策能力</strong>啦！💡 有不懂的地方或练习需要解答，欢迎告诉我！💬🌱</p><p>来源：</p><ul><li>Chatgpt-4o</li><li>我的理解</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型与变量</title>
      <link href="/2025/04/21/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2025/04/21/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>序列化（Serialization）和反序列化（Deserialization）是在计算机科学中常用的两个概念，用于在不同的环境中存储和传输对象。下面分别从定义、作用、Java 中的实现以及 Python 中的实现等方面进行详细介绍。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><strong>序列化</strong>：将对象转换为字节流的过程称为序列化。这个字节流包含了对象的数据和相关的元信息，使得对象可以被存储到文件、数据库或者通过网络进行传输。</li><li><strong>反序列化</strong>：将字节流重新转换为对象的过程称为反序列化。通过反序列化，可以将之前序列化得到的字节流恢复成原来的对象。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><strong>数据持久化</strong>：可以将对象的状态保存到文件或数据库中，以便在程序下次启动时恢复对象的状态。</li><li><strong>网络传输</strong>：在网络通信中，需要将对象转换为字节流进行传输，接收方再将字节流反序列化为对象。</li><li><strong>分布式系统</strong>：在分布式系统中，不同节点之间需要交换对象信息，序列化和反序列化可以实现对象在不同节点之间的传输。</li></ul><h3 id="Java-中的实现"><a href="#Java-中的实现" class="headerlink" title="Java 中的实现"></a>Java 中的实现</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>在 Java 中，要实现对象的序列化，需要让类实现 <code>java.io.Serializable</code> 接口，该接口是一个标记接口，没有任何方法。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 Serializable 接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.ser&quot;</span>);</span><br><span class="line">             <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut)) &#123;</span><br><span class="line">            <span class="comment">// 序列化对象</span></span><br><span class="line">            out.writeObject(person);</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已序列化到 person.ser 文件&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>反序列化时，使用 <code>ObjectInputStream</code> 从文件中读取字节流并将其转换为对象。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.ser&quot;</span>);</span><br><span class="line">             <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn)) &#123;</span><br><span class="line">            <span class="comment">// 反序列化对象</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) in.readObject();</span><br><span class="line">            System.out.println(<span class="string">&quot;姓名: &quot;</span> + person.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄: &quot;</span> + person.getAge());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-中的实现"><a href="#Python-中的实现" class="headerlink" title="Python 中的实现"></a>Python 中的实现</h3><p>在 Python 中，可以使用 <code>pickle</code> 模块来实现对象的序列化和反序列化。</p><h4 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">person = Person(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化对象并保存到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;person.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    pickle.dump(person, file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对象已序列化到 person.pkl 文件&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中读取字节流并反序列化对象</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;person.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    person = pickle.load(file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;姓名:&quot;</span>, person.name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;年龄:&quot;</span>, person.age)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>版本兼容性</strong>：在进行序列化和反序列化时，要注意类的版本兼容性。如果类的结构发生了变化，可能会导致反序列化失败。</li><li><strong>安全性</strong>：反序列化过程可能存在安全风险，因为恶意的字节流可能会执行一些危险的操作。在处理来自不可信源的字节流时，要格外小心。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多态</title>
      <link href="/2025/03/21/Java%E5%A4%9A%E6%80%81/"/>
      <url>/2025/03/21/Java%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java 多态"></a>Java 多态</h1><h2 id="1-多态的概念"><a href="#1-多态的概念" class="headerlink" title="1. 多态的概念"></a>1. 多态的概念</h2><p>在面向对象编程中，多态（Polymorphism）是三大特性之一（另外两个是封装和继承）。多态的意思是同一个方法调用，依据实际对象</p><p>的不同而产生不同的行为。</p><p>简单来说，父类引用可以指向子类对象，通过调用方法时，根据实际对象的类型决定调用哪个方法实现，这就是多态，如图所示：</p><p><img src="/assets/java-polymorphism-111.png" alt="img"></p><p>多态性是对象多种表现形式的体现。</p><blockquote><p>现实中，比如我们按下 F1 键这个动作：</p><ul><li>如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；</li><li>如果当前在 Word 下弹出的就是 Word 帮助；</li><li>在 Windows 下弹出的就是 Windows 帮助和支持。</li></ul><p>同一个事件发生在不同的对象上会产生不同的结果。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="/assets/2DAC601E-70D8-4B3C-86CC-7E4972FC2466.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Triangle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一份关于 Java 多态的详细教学内容，涵盖基本概念、原理以及代码示例，供你参考。</p><hr><h2 id="2-多态的实现条件"><a href="#2-多态的实现条件" class="headerlink" title="2. 多态的实现条件"></a>2. 多态的实现条件</h2><p>Java 中实现多态需要满足以下几个条件：</p><ul><li><strong>继承&#x2F;实现关系：</strong> 子类继承父类或实现接口。</li><li><strong>方法重写（Override）：</strong> 子类对父类中的方法进行重写（覆盖）。</li><li><strong>父类引用指向子类对象：</strong> 如 <code>Animal a = new Dog();</code>。</li></ul><hr><h2 id="3-编译时与运行时"><a href="#3-编译时与运行时" class="headerlink" title="3. 编译时与运行时"></a>3. 编译时与运行时</h2><ul><li><strong>编译时：</strong> 编译器只关注引用的静态类型（例如上面例子中 <code>a</code> 的类型是 <code>Animal</code>）。</li><li><strong>运行时：</strong> JVM 根据对象的实际类型（在本例中是 <code>Dog</code>）调用相应的重写方法，这种机制称为“动态绑定”或“运行时多态”。</li></ul><hr><h2 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4. 代码示例"></a>4. 代码示例</h2><p>以下是一个简单的例子，展示了如何利用多态调用子类方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal makes a sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 Dog 重写了 sound 方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 Cat 重写了 sound 方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat meows&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPolymorphism</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 父类引用指向不同的子类对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据对象的实际类型调用对应的 sound 方法</span></span><br><span class="line">        myDog.sound(); <span class="comment">// 输出：Dog barks</span></span><br><span class="line">        myCat.sound(); <span class="comment">// 输出：Cat meows</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，尽管 <code>myDog</code> 和 <code>myCat</code> 的引用类型都是 <code>Animal</code>，但是在调用 <code>sound()</code> 方法时，JVM 会根据实际的对象类型（分别是 <code>Dog</code> 和 <code>Cat</code>）调用各自的实现。</p><hr><h2 id="5-多态的优点"><a href="#5-多态的优点" class="headerlink" title="5. 多态的优点"></a>5. 多态的优点</h2><ul><li><strong>灵活性和扩展性：</strong> 通过父类引用调用子类的方法，可以轻松扩展系统。例如增加新的动物类型时，只需要继承 <code>Animal</code> 类并重写方法即可，无需修改调用代码。</li><li><strong>代码复用：</strong> 统一接口调用不同实现，提高代码复用性。</li><li><strong>解耦合：</strong> 利用接口和抽象类设计可以降低系统各部分之间的耦合度，方便维护和扩展。</li></ul><hr><h2 id="6-接口与多态"><a href="#6-接口与多态" class="headerlink" title="6. 接口与多态"></a>6. 接口与多态</h2><p>多态不仅适用于继承关系，还适用于接口。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterfacePolymorphism</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        </span><br><span class="line">        s1.draw(); <span class="comment">// 输出：Drawing a circle</span></span><br><span class="line">        s2.draw(); <span class="comment">// 输出：Drawing a rectangle</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过接口引用指向实现类的对象，同样可以实现多态，使得代码设计更加灵活。</p><hr><h2 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. 注意事项</h2><ul><li><strong>动态绑定：</strong> 多态依赖于运行时的动态绑定机制。如果方法没有被重写（例如被声明为 <code>static</code>、<code>private</code> 或 <code>final</code>），则无法实现多态。</li><li><strong>类型转换：</strong> 在实际开发中，有时需要进行向下转型（cast）操作，此时需要使用 <code>instanceof</code> 关键字判断类型，避免类型转换异常。</li><li><strong>设计原则：</strong> 多态有助于实现“面向接口编程”，可以大大提高系统的可维护性和可扩展性。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java 多态是面向对象编程的重要特性，它允许同一父类引用在运行时表现出不同的行为。通过继承和方法重写实现多态，不仅让代码更加灵活和扩展性更好，也有助于开发大型和复杂系统时降低耦合度。掌握多态的原理和应用，将为你编写更高效、易维护的代码打下坚实基础。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java String</title>
      <link href="/2025/03/08/Java%20String/"/>
      <url>/2025/03/08/Java%20String/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-String-类"><a href="#Java-String-类" class="headerlink" title="Java String 类"></a>Java String 类</h1><p>在 Java 中，<code>String</code> 类是<strong>最常用的类之一</strong>，用于表示和操作字符串。<code>String</code> 类在 <code>java.lang</code> 包中，不需要导入就能直接使用。今天我们就来深入了解 <code>String</code> 类的用法、常见方法、特点和注意事项！🚀</p><hr><h2 id="1️⃣-String-基本概念"><a href="#1️⃣-String-基本概念" class="headerlink" title="1️⃣ String 基本概念"></a><strong>1️⃣ String 基本概念</strong></h2><ul><li><strong><code>String</code> 是引用数据类型，但表现像基本数据类型一样简单。</strong></li><li><strong><code>String</code> 对象是不可变的（immutable）</strong>，一旦创建就无法修改。</li><li><strong><code>String</code> 底层是一个 <code>char[]</code> 字符数组</strong>，用于存储字符串内容。</li></ul><p><strong>声明字符串的方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用双引号直接赋值（推荐）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello, JJ Lin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造方法（不推荐）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello, JJ Lin&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="2️⃣-String-的不可变性（Immutable）"><a href="#2️⃣-String-的不可变性（Immutable）" class="headerlink" title="2️⃣ String 的不可变性（Immutable）"></a><strong>2️⃣ String 的不可变性（Immutable）</strong></h2><p><code>String</code> 对象内容不可变，每次修改都会创建一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringImmutable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line">        str = str + <span class="string">&quot; - Not for anyone&quot;</span>;</span><br><span class="line">        System.out.println(str);  <span class="comment">// 新创建了一个字符串对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3️⃣-常用方法"><a href="#3️⃣-常用方法" class="headerlink" title="3️⃣ 常用方法"></a><strong>3️⃣ 常用方法</strong></h2><h3 id="🔹-字符串长度"><a href="#🔹-字符串长度" class="headerlink" title="🔹 字符串长度"></a><strong>🔹 字符串长度</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;林俊杰&quot;</span>;</span><br><span class="line">System.out.println(str.length());  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串拼接"><a href="#🔹-字符串拼接" class="headerlink" title="🔹 字符串拼接"></a><strong>🔹 字符串拼接</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot; Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str1.concat(str2);   <span class="comment">// 推荐</span></span><br><span class="line">System.out.println(result);          <span class="comment">// JJ Lin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 + 运算符（常用）</span></span><br><span class="line">System.out.println(str1 + str2);     <span class="comment">// JJ Lin</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串比较"><a href="#🔹-字符串比较" class="headerlink" title="🔹 字符串比较"></a><strong>🔹 字符串比较</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JJ Lin&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);             <span class="comment">// true（字符串常量池，引用相同）</span></span><br><span class="line">System.out.println(str1 == str3);             <span class="comment">// false（new 创建的对象地址不同）</span></span><br><span class="line">System.out.println(str1.equals(str3));        <span class="comment">// true（比较内容）</span></span><br><span class="line">System.out.println(str1.equalsIgnoreCase(<span class="string">&quot;jj lin&quot;</span>));  <span class="comment">// true（忽略大小写比较）</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串查找"><a href="#🔹-字符串查找" class="headerlink" title="🔹 字符串查找"></a><strong>🔹 字符串查找</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Not for anyone&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否包含</span></span><br><span class="line">System.out.println(str.contains(<span class="string">&quot;anyone&quot;</span>));      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符首次出现索引</span></span><br><span class="line">System.out.println(str.indexOf(<span class="string">&#x27;o&#x27;</span>));            <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符最后出现索引</span></span><br><span class="line">System.out.println(str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>));        <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断以什么开头/结尾</span></span><br><span class="line">System.out.println(str.startsWith(<span class="string">&quot;Not&quot;</span>));       <span class="comment">// true</span></span><br><span class="line">System.out.println(str.endsWith(<span class="string">&quot;one&quot;</span>));         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串截取"><a href="#🔹-字符串截取" class="headerlink" title="🔹 字符串截取"></a><strong>🔹 字符串截取</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 3 开始截取</span></span><br><span class="line">System.out.println(str.substring(<span class="number">3</span>));          <span class="comment">// Lin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取索引 0 到 1（不包含 2）</span></span><br><span class="line">System.out.println(str.substring(<span class="number">0</span>, <span class="number">2</span>));       <span class="comment">// JJ</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串替换"><a href="#🔹-字符串替换" class="headerlink" title="🔹 字符串替换"></a><strong>🔹 字符串替换</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line">System.out.println(str.replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;L&#x27;</span>));       <span class="comment">// LL Lin</span></span><br><span class="line">System.out.println(str.replaceAll(<span class="string">&quot;Lin&quot;</span>, <span class="string">&quot;Chou&quot;</span>)); <span class="comment">// JJ Chou</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串大小写转换"><a href="#🔹-字符串大小写转换" class="headerlink" title="🔹 字符串大小写转换"></a><strong>🔹 字符串大小写转换</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line">System.out.println(str.toUpperCase());         <span class="comment">// JJ LIN</span></span><br><span class="line">System.out.println(str.toLowerCase());         <span class="comment">// jj lin</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-去除首尾空格"><a href="#🔹-去除首尾空格" class="headerlink" title="🔹 去除首尾空格"></a><strong>🔹 去除首尾空格</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  JJ Lin  &quot;</span>;</span><br><span class="line">System.out.println(str.trim());                <span class="comment">// &quot;JJ Lin&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串拆分"><a href="#🔹-字符串拆分" class="headerlink" title="🔹 字符串拆分"></a><strong>🔹 字符串拆分</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin, Jay Chou, Eason Chan&quot;</span>;</span><br><span class="line">String[] singers = str.split(<span class="string">&quot;, &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String singer : singers) &#123;</span><br><span class="line">    System.out.println(singer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin</span><br><span class="line">Jay Chou</span><br><span class="line">Eason Chan</span><br></pre></td></tr></table></figure><hr><h2 id="4️⃣-String-特点"><a href="#4️⃣-String-特点" class="headerlink" title="4️⃣ String 特点"></a><strong>4️⃣ String 特点</strong></h2><h3 id="🔹-字符串常量池（String-Pool）"><a href="#🔹-字符串常量池（String-Pool）" class="headerlink" title="🔹 字符串常量池（String Pool）"></a><strong>🔹 字符串常量池（String Pool）</strong></h3><p>Java 中字符串常量池是 JVM 内存中的一个特殊区域，专门存储字符串字面量，<strong>相同内容的字符串只存一份</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);      <span class="comment">// true，指向同一个常量池对象</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-new-创建字符串"><a href="#🔹-new-创建字符串" class="headerlink" title="🔹 new 创建字符串"></a><strong>🔹 <code>new</code> 创建字符串</strong></h3><p>使用 <code>new</code> 会在堆内存中创建一个新对象，即使内容相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JJ Lin&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);      <span class="comment">// false，不是同一个对象</span></span><br></pre></td></tr></table></figure><hr><h2 id="5️⃣-字符串格式化"><a href="#5️⃣-字符串格式化" class="headerlink" title="5️⃣ 字符串格式化"></a><strong>5️⃣ 字符串格式化</strong></h2><p>使用 <code>String.format()</code> 格式化字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s is %d years old.&quot;</span>, name, age);</span><br><span class="line">System.out.println(formatted);        <span class="comment">// JJ Lin is 42 years old.</span></span><br></pre></td></tr></table></figure><hr><h2 id="6️⃣-字符串与其他类型转换"><a href="#6️⃣-字符串与其他类型转换" class="headerlink" title="6️⃣ 字符串与其他类型转换"></a><strong>6️⃣ 字符串与其他类型转换</strong></h2><h3 id="🔹-基本类型转字符串"><a href="#🔹-基本类型转字符串" class="headerlink" title="🔹 基本类型转字符串"></a><strong>🔹 基本类型转字符串</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(num);     <span class="comment">// &quot;100&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串转基本类型"><a href="#🔹-字符串转基本类型" class="headerlink" title="🔹 字符串转基本类型"></a><strong>🔹 字符串转基本类型</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);      <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><hr><h2 id="7️⃣-String-和-StringBuilder-StringBuffer-区别"><a href="#7️⃣-String-和-StringBuilder-StringBuffer-区别" class="headerlink" title="7️⃣ String 和 StringBuilder &#x2F; StringBuffer 区别"></a><strong>7️⃣ String 和 StringBuilder &#x2F; StringBuffer 区别</strong></h2><table><thead><tr><th>特性</th><th><code>String</code></th><th><code>StringBuilder</code></th><th><code>StringBuffer</code></th></tr></thead><tbody><tr><td><strong>可变性</strong></td><td>❌ 不可变</td><td>✅ 可变</td><td>✅ 可变</td></tr><tr><td><strong>线程安全</strong></td><td>❌ 非线程安全</td><td>❌ 非线程安全</td><td>✅ 线程安全</td></tr><tr><td><strong>性能</strong></td><td>🚀 性能较低</td><td>🚀🚀🚀 性能最高</td><td>🚀🚀 性能较高</td></tr></tbody></table><hr><h2 id="8️⃣String-类方法表"><a href="#8️⃣String-类方法表" class="headerlink" title="8️⃣String 类方法表"></a>8️⃣<code>String</code> 类方法表</h2><p><code>String</code> 类是 Java 中最常用的类之一，用于处理字符串。它是不可变的（immutable），每次对字符串的操作都会生成一个新的字符串对象。让我们来全面总结 <code>String</code> 类的常用方法吧！✨</p><hr><h3 id="🧱-1-创建字符串"><a href="#🧱-1-创建字符串" class="headerlink" title="🧱 1. 创建字符串"></a><strong>🧱 1. 创建字符串</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接赋值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello, Java!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符数组转换为字符串</span></span><br><span class="line"><span class="type">char</span>[] chars = &#123;<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br></pre></td></tr></table></figure><hr><h3 id="📏-2-获取信息"><a href="#📏-2-获取信息" class="headerlink" title="📏 2. 获取信息"></a><strong>📏 2. 获取信息</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>length()</code></td><td>获取字符串长度</td><td><code>&quot;Java&quot;.length()</code> → <code>4</code></td></tr><tr><td><code>charAt(int index)</code></td><td>获取指定索引处的字符</td><td><code>&quot;Java&quot;.charAt(1)</code> → <code>&#39;a&#39;</code></td></tr><tr><td><code>indexOf(String str)</code></td><td>查找子字符串首次出现位置</td><td><code>&quot;Hello&quot;.indexOf(&quot;l&quot;)</code> → <code>2</code></td></tr><tr><td><code>lastIndexOf(String str)</code></td><td>查找子字符串最后出现位置</td><td><code>&quot;Hello&quot;.lastIndexOf(&quot;l&quot;)</code> → <code>3</code></td></tr><tr><td><code>contains(CharSequence s)</code></td><td>判断是否包含子字符串</td><td><code>&quot;Java&quot;.contains(&quot;av&quot;)</code> → <code>true</code></td></tr><tr><td><code>startsWith(String prefix)</code></td><td>判断是否以指定前缀开头</td><td><code>&quot;Java&quot;.startsWith(&quot;Ja&quot;)</code> → <code>true</code></td></tr><tr><td><code>endsWith(String suffix)</code></td><td>判断是否以指定后缀结尾</td><td><code>&quot;Java&quot;.endsWith(&quot;va&quot;)</code> → <code>true</code></td></tr><tr><td><code>isEmpty()</code></td><td>判断字符串是否为空</td><td><code>&quot;&quot;.isEmpty()</code> → <code>true</code></td></tr><tr><td><code>isBlank()</code>（Java 11+）</td><td>判断是否为空或仅包含空白字符</td><td><code>&quot;   &quot;.isBlank()</code> → <code>true</code></td></tr></tbody></table><hr><h3 id="🔄-3-字符串转换"><a href="#🔄-3-字符串转换" class="headerlink" title="🔄 3. 字符串转换"></a><strong>🔄 3. 字符串转换</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>toUpperCase()</code></td><td>转换为大写</td><td><code>&quot;java&quot;.toUpperCase()</code> → <code>&quot;JAVA&quot;</code></td></tr><tr><td><code>toLowerCase()</code></td><td>转换为小写</td><td><code>&quot;JAVA&quot;.toLowerCase()</code> → <code>&quot;java&quot;</code></td></tr><tr><td><code>trim()</code></td><td>去除前后空格</td><td><code>&quot;  Java  &quot;.trim()</code> → <code>&quot;Java&quot;</code></td></tr><tr><td><code>strip()</code>（Java 11+）</td><td>去除前后空白字符，更强大</td><td><code>&quot;  Java  &quot;.strip()</code> → <code>&quot;Java&quot;</code></td></tr><tr><td><code>replace(String old, String new)</code></td><td>替换所有匹配的子字符串</td><td><code>&quot;Java&quot;.replace(&quot;a&quot;, &quot;o&quot;)</code> → <code>&quot;Jovo&quot;</code></td></tr><tr><td><code>replaceFirst(String regex, String replacement)</code></td><td>替换首个匹配项</td><td><code>&quot;Java Java&quot;.replaceFirst(&quot;a&quot;, &quot;o&quot;)</code> → <code>&quot;Jova Java&quot;</code></td></tr><tr><td><code>replaceAll(String regex, String replacement)</code></td><td>使用正则替换所有匹配项</td><td><code>&quot;Java Java&quot;.replaceAll(&quot;a&quot;, &quot;o&quot;)</code> → <code>&quot;Jovo Jovo&quot;</code></td></tr><tr><td><code>substring(int beginIndex)</code></td><td>截取从索引开始的字符串</td><td><code>&quot;Java&quot;.substring(1)</code> → <code>&quot;ava&quot;</code></td></tr><tr><td><code>substring(int begin, int end)</code></td><td>截取指定范围字符串（不含 end）</td><td><code>&quot;Java&quot;.substring(1, 3)</code> → <code>&quot;av&quot;</code></td></tr></tbody></table><hr><h3 id="🔗-4-拼接字符串"><a href="#🔗-4-拼接字符串" class="headerlink" title="🔗 4. 拼接字符串"></a><strong>🔗 4. 拼接字符串</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>concat(String str)</code></td><td>拼接字符串</td><td><code>&quot;Hello&quot;.concat(&quot; World&quot;)</code> → <code>&quot;Hello World&quot;</code></td></tr><tr><td><code>+</code>（加号运算符）</td><td>拼接字符串（最常用）</td><td><code>&quot;Hello&quot; + &quot; World&quot;</code> → <code>&quot;Hello World&quot;</code></td></tr><tr><td><code>String.join()</code>（Java 8+）</td><td>使用分隔符拼接多个字符串</td><td><code>String.join(&quot;, &quot;, &quot;Java&quot;, &quot;Python&quot;, &quot;C++&quot;)</code> → <code>&quot;Java, Python, C++&quot;</code></td></tr></tbody></table><hr><h3 id="📋-5-字符串拆分"><a href="#📋-5-字符串拆分" class="headerlink" title="📋 5. 字符串拆分"></a><strong>📋 5. 字符串拆分</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>split(String regex)</code></td><td>使用正则表达式拆分字符串</td><td><code>&quot;Java-Python-C++&quot;.split(&quot;-&quot;)</code> → <code>[&quot;Java&quot;, &quot;Python&quot;, &quot;C++&quot;]</code></td></tr><tr><td><code>split(String regex, int limit)</code></td><td>限制拆分次数</td><td><code>&quot;Java-Python-C++&quot;.split(&quot;-&quot;, 2)</code> → <code>[&quot;Java&quot;, &quot;Python-C++&quot;]</code></td></tr></tbody></table><hr><h3 id="🧪-6-比较字符串"><a href="#🧪-6-比较字符串" class="headerlink" title="🧪 6. 比较字符串"></a><strong>🧪 6. 比较字符串</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>equals(String another)</code></td><td>判断内容是否相同（区分大小写）</td><td><code>&quot;Java&quot;.equals(&quot;java&quot;)</code> → <code>false</code></td></tr><tr><td><code>equalsIgnoreCase(String another)</code></td><td>判断内容是否相同（不区分大小写）</td><td><code>&quot;Java&quot;.equalsIgnoreCase(&quot;java&quot;)</code> → <code>true</code></td></tr><tr><td><code>compareTo(String another)</code></td><td>按字典顺序比较字符串大小</td><td><code>&quot;Java&quot;.compareTo(&quot;Python&quot;)</code> → <code>-6</code></td></tr><tr><td><code>compareToIgnoreCase(String another)</code></td><td>按字典顺序比较（忽略大小写）</td><td><code>&quot;Java&quot;.compareToIgnoreCase(&quot;java&quot;)</code> → <code>0</code></td></tr></tbody></table><hr><h3 id="🔍-7-格式化字符串"><a href="#🔍-7-格式化字符串" class="headerlink" title="🔍 7. 格式化字符串"></a><strong>🔍 7. 格式化字符串</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>String.format(String format, Object... args)</code></td><td>格式化字符串</td><td><code>String.format(&quot;你好, %s!&quot;, &quot;Alice&quot;)</code> → <code>&quot;你好, Alice!&quot;</code></td></tr></tbody></table><hr><h3 id="🔠-8-转换为其他类型"><a href="#🔠-8-转换为其他类型" class="headerlink" title="🔠 8. 转换为其他类型"></a><strong>🔠 8. 转换为其他类型</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>toCharArray()</code></td><td>转换为字符数组</td><td><code>&quot;Java&quot;.toCharArray()</code> → <code>[&#39;J&#39;, &#39;a&#39;, &#39;v&#39;, &#39;a&#39;]</code></td></tr><tr><td><code>getBytes()</code></td><td>转换为字节数组</td><td><code>&quot;Java&quot;.getBytes()</code></td></tr></tbody></table><p>💡 <strong>总结：</strong></p><ul><li><code>String</code> 是最基础但最强大的类之一，必须熟练掌握。</li><li>理解不可变性和字符串池，有助于编写<strong>高效代码</strong>。</li><li>遇到<strong>频繁拼接或修改字符串</strong>，建议使用 <code>StringBuilder</code>。</li></ul><h1 id="Java-String-类-语法练习题"><a href="#Java-String-类-语法练习题" class="headerlink" title="Java String 类 语法练习题"></a>Java String 类 语法练习题</h1><h3 id="基础题"><a href="#基础题" class="headerlink" title="基础题"></a><strong>基础题</strong></h3><h4 id="1-判断一个字符串是否以-“Java”-开头且以-“-”-结尾。"><a href="#1-判断一个字符串是否以-“Java”-开头且以-“-”-结尾。" class="headerlink" title="1.判断一个字符串是否以 “Java” 开头且以 “!” 结尾。"></a>1.判断一个字符串是否以 “Java” 开头且以 “!” 结尾。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//判断一个字符串是否以 &quot;Java&quot; 开头且以 &quot;!&quot; 结尾。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Panduan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> input.startsWith(<span class="string">&quot;Java&quot;</span>) &amp;&amp; input.endsWith(<span class="string">&quot;!&quot;</span>) ? <span class="string">&quot;True&quot;</span>  : <span class="string">&quot;False&quot;</span>;</span><br><span class="line">        System.out.print(result);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Javaffffffffffffff!</span><br><span class="line">True</span><br><span class="line">fdssfa</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="2-将字符串中的所有空格去除。"><a href="#2-将字符串中的所有空格去除。" class="headerlink" title="2.将字符串中的所有空格去除。"></a>2.将字符串中的所有空格去除。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rmspace</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(input.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> fsdfsd    </span><br><span class="line">fsdfsd</span><br></pre></td></tr></table></figure><h4 id="3-将用户输入的字符串转换为大写，并输出长度。"><a href="#3-将用户输入的字符串转换为大写，并输出长度。" class="headerlink" title="3.将用户输入的字符串转换为大写，并输出长度。"></a>3.将用户输入的字符串转换为大写，并输出长度。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//将用户输入的字符串转换为大写，并输出长度。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToUppercase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> input.toUpperCase();</span><br><span class="line">        System.out.println(result + <span class="string">&quot; 长度: &quot;</span> +result.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ddddddddddddddSSSSSSSSSS</span><br><span class="line">DDDDDDDDDDDDDDSSSSSSSSSS 长度: 24</span><br></pre></td></tr></table></figure><h4 id="4-将一个以逗号分隔的字符串拆分，并逐行打印每个单词。"><a href="#4-将一个以逗号分隔的字符串拆分，并逐行打印每个单词。" class="headerlink" title="4.将一个以逗号分隔的字符串拆分，并逐行打印每个单词。"></a>4.将一个以逗号分隔的字符串拆分，并逐行打印每个单词。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//将一个以逗号分隔的字符串拆分，并逐行打印每个单词。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Splite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] result = input.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String strr : result)&#123;</span><br><span class="line">            System.out.println(strr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dsdf,fsdf,Lin,JJ</span><br><span class="line">dsdf</span><br><span class="line">fsdf</span><br><span class="line">Lin</span><br><span class="line">JJ</span><br></pre></td></tr></table></figure><h4 id="5-判断两个字符串是否相等（不区分大小写）。"><a href="#5-判断两个字符串是否相等（不区分大小写）。" class="headerlink" title="5.判断两个字符串是否相等（不区分大小写）。"></a>5.判断两个字符串是否相等（不区分大小写）。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">st1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">st2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        System.out.println(st1.equalsIgnoreCase(st2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="9-统计某个字符出现次数"><a href="#9-统计某个字符出现次数" class="headerlink" title="9.统计某个字符出现次数"></a>9.<strong>统计某个字符出现次数</strong></h4><p> 输入一个字符串和一个字符，统计这个字符在字符串中出现的次数。<br> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin is the best singer</span><br><span class="line">J</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符 &#x27;J&#x27; 出现了 2 次</span><br></pre></td></tr></table></figure><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Count</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入待检测的字符串: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入目标检测字符: &quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">Des</span> <span class="operator">=</span> Character.valueOf(scanner.nextLine().charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> count(input,Des);</span><br><span class="line">        System.out.println(<span class="string">&quot;它出现的次数是:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(String str, <span class="type">char</span> Des)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cou</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) == Des)&#123;</span><br><span class="line">                cou++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cou;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入待检测的字符串: vsadddddd hgjeqhvf jklll</span><br><span class="line">请输入目标检测字符: k</span><br><span class="line">它出现的次数是:1</span><br></pre></td></tr></table></figure><hr><h4 id="10-反转字符串"><a href="#10-反转字符串" class="headerlink" title="10.反转字符串"></a>10.<strong>反转字符串</strong></h4><p> 输入一个字符串，将它反转输出。<br> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">niL JJ</span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 输入一个字符串，将它反转输出。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> reverse(input);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">strlist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length() - <span class="number">1</span> ; i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            strlist.append(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strlist.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sssssssssssssllllllll</span><br><span class="line">llllllllsssssssssssss</span><br></pre></td></tr></table></figure><hr><h3 id="进阶题"><a href="#进阶题" class="headerlink" title="进阶题"></a><strong>进阶题</strong></h3><h4 id="1-首字母大写"><a href="#1-首字母大写" class="headerlink" title="1.首字母大写"></a>1.<strong>首字母大写</strong></h4><p>输入一个英文句子，将每个单词的首字母大写。</p><p><strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jj lin is amazing</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jj Lin Is Amazing</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Upper1st</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] strarrey = input.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(String str:strarrey)&#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">strr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">            <span class="type">String</span> <span class="variable">Upperfirst</span> <span class="operator">=</span> Character.toUpperCase(strr.charAt(<span class="number">0</span>)) + strr.substring(<span class="number">1</span>);</span><br><span class="line">            result.append(Upperfirst + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rr</span> <span class="operator">=</span> result.toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> rr.strip();</span><br><span class="line">        System.out.println(re);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sdgbkab hjkkj nnnnn kljlhjjjjjjjjk jjk</span><br><span class="line">Sdgbkab Hjkkj Nnnnn Kljlhjjjjjjjjk Jjk</span><br></pre></td></tr></table></figure><h5 id="发现的异常问题"><a href="#发现的异常问题" class="headerlink" title="发现的异常问题"></a><strong>发现的异常问题</strong></h5><p>当输入的字符串之间的空格的数量大于一时，如输入<code>ss  jj    jj</code>会报错:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.StringIndexOutOfBoundsException: index 0, length 0</span><br><span class="line">at java.base/java.lang.String.checkIndex(String.java:4567)</span><br><span class="line">at java.base/java.lang.AbstractStringBuilder.charAt(AbstractStringBuilder.java:351)</span><br><span class="line">at java.base/java.lang.StringBuilder.charAt(StringBuilder.java:91)</span><br><span class="line">at Upper1st.main(Upper1st.java:10)</span><br></pre></td></tr></table></figure><p><code>java.lang.StringIndexOutOfBoundsException: index 0, length 0</code>:字符串索引出界异常，原因是当输入字符串中存在多个连续空格时，<code>split(&quot; &quot;)</code> 会产生空字符串元素，例如输入 <code>&quot;kk jj jjj&quot;</code>，<code>split(&quot; &quot;)</code> 会将其分割为 <code>[&quot;kk&quot;, &quot;jj&quot;, &quot;&quot;, &quot;jjj&quot;]</code>，其中包含一个空字符串 <code>&quot;&quot;</code>。当遍历到这个空字符串时，执行 <code>strbuilder.charAt(0)</code> 就会抛出 <code>StringIndexOutOfBoundsException</code> 异常。</p><p><strong>解决方案</strong></p><p>在处理每个分割后的字符串之前，先检查其长度是否大于 0，如果长度大于 0 再进行首字母大写的操作。</p><h3 id="升级后的代码"><a href="#升级后的代码" class="headerlink" title="升级后的代码"></a>升级后的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Upper1st</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] strarrey = input.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(String str:strarrey)&#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">strbuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">            <span class="keyword">if</span> (str.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">Upperfirst</span> <span class="operator">=</span> Character.toUpperCase(strbuilder.charAt(<span class="number">0</span>)) + strbuilder.substring(<span class="number">1</span>);</span><br><span class="line">                result.append(Upperfirst + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rr</span> <span class="operator">=</span> result.toString().strip();</span><br><span class="line">        System.out.println(rr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dddddddd   kkkkkkkk kkk  </span><br><span class="line">Dddddddd Kkkkkkkk Kkk</span><br></pre></td></tr></table></figure><hr><h4 id="2-判断字符串是否是回文（正读和反读都一样）"><a href="#2-判断字符串是否是回文（正读和反读都一样）" class="headerlink" title="2.判断字符串是否是回文（正读和反读都一样）"></a>2.<strong>判断字符串是否是回文</strong>（正读和反读都一样）</h4><p> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是回文字符串</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsPalindrome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] input_list = input.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">is_Palindrome</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> (input_list.length)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; half; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (input_list[i].equals(input_list[input_list.length - <span class="number">1</span> - i]))&#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                is_Palindrome = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_Palindrome)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该输入字符串是回文的&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该输入字符串不是回文的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="4-字符串压缩（类似-LeetCode-压缩字符串题）"><a href="#4-字符串压缩（类似-LeetCode-压缩字符串题）" class="headerlink" title="4.字符串压缩（类似 LeetCode 压缩字符串题）"></a>4.<strong>字符串压缩</strong>（类似 LeetCode 压缩字符串题）</h4><p> 把连续相同字符用字符+次数的形式表示。<br> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaabbcddd</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a3b2c1d3</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 字符串压缩（类似 LeetCode 压缩字符串题）：把连续相同字符用字符+次数的形式表示。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountUS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] input_array = input.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputB</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt; input_array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inputB.contains(input_array[i]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                inputB += input_array[i];</span><br><span class="line">                inputB += (input.lastIndexOf(input_array[i]) - input.indexOf(input_array[i])) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(inputB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaddddddddddddffffffffffffffff</span><br><span class="line">a12d12f16</span><br></pre></td></tr></table></figure><p><strong>问题分析</strong></p><ol><li>重复字符判断逻辑错误</li></ol><p>在代码中，使用 <code>inputB.contains(input_array[i])</code> 来判断当前字符是否已经处理过。这种判断方式有问题，因为只要字符在之前出现过就会跳过，而没有考虑字符是否连续。例如，当处理到第二个 <code>a</code> 时，由于 <code>inputB</code> 中已经包含了 <code>a</code>，就会跳过，导致后续的 <code>a</code> 不能正确统计。</p><ol start="2"><li>字符计数逻辑错误</li></ol><p>代码中使用 <code>input.lastIndexOf(input_array[i]) - input.indexOf(input_array[i]) + 1</code> 来计算字符的出现次数，这是错误的。这个表达式计算的是该字符在整个输入字符串中第一次出现和最后一次出现之间的距离加 1，而不是连续相同字符的个数。</p><p><strong>升级代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串压缩（类似 LeetCode 压缩字符串题）：把连续相同字符用字符+次数的形式表示。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountUS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 如果不是最后一个字符，且当前字符和下一个字符相同</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; input.length() - <span class="number">1</span> &amp;&amp; input.charAt(i) == input.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 将当前字符添加到结果中</span></span><br><span class="line">                result.append(input.charAt(i));</span><br><span class="line">                <span class="comment">// 将连续相同字符的个数添加到结果中</span></span><br><span class="line">                result.append(count);</span><br><span class="line">                <span class="comment">// 重置计数器</span></span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assass</span><br><span class="line">a1s2a1s2</span><br></pre></td></tr></table></figure><hr><h4 id="5-找出字符串中最长的单词"><a href="#5-找出字符串中最长的单词" class="headerlink" title="5.找出字符串中最长的单词"></a>5.<strong>找出字符串中最长的单词</strong></h4><p> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin is a phenomenal singer</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phenomenal</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Longest</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            String[] input = scanner.nextLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            Arrays.sort(input,(a,b) -&gt; b.length() - a.length());</span><br><span class="line">            System.out.println(input[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaaaa hkkjhjkh khhhhhhhhhhhhhhhhhhhhhhhh</span><br><span class="line">khhhhhhhhhhhhhhhhhhhhhhhh</span><br></pre></td></tr></table></figure><hr><h4 id="6-需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。"><a href="#6-需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。" class="headerlink" title="6.需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。"></a>6.<strong>需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringAnalysis</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个句子：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">upperCount</span> <span class="operator">=</span> <span class="number">0</span>, lowerCount = <span class="number">0</span>, digitCount = <span class="number">0</span>, spaceCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> input.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(ch)) &#123;</span><br><span class="line">                upperCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(ch)) &#123;</span><br><span class="line">                lowerCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">                digitCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isWhitespace(ch)) &#123;</span><br><span class="line">                spaceCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;大写字母: %d，小写字母: %d，数字: %d，空格: %d%n&quot;</span>,</span><br><span class="line">                upperCount, lowerCount, digitCount, spaceCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="✨-Bonus：综合练习题"><a href="#✨-Bonus：综合练习题" class="headerlink" title="✨ Bonus：综合练习题"></a>✨ <strong>Bonus：综合练习题</strong></h3><p> 编写一个程序，实现一个简单的文本分析工具，功能包括：</p><ul><li>统计总字数</li><li>统计不同单词数量</li><li>找出出现频率最高的单词</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextAnalyzer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要分析的文本：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计总字数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalCharacters</span> <span class="operator">=</span> text.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预处理文本，将文本转换为小写并按非字母数字字符分割成单词</span></span><br><span class="line">        String[] words = text.toLowerCase().split(<span class="string">&quot;[^a-zA-Z0-9]+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计不同单词数量</span></span><br><span class="line">        Set&lt;String&gt; uniqueWords = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Integer&gt; wordFrequency = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!word.isEmpty()) &#123;</span><br><span class="line">                uniqueWords.add(word);</span><br><span class="line">                wordFrequency.put(word, wordFrequency.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">distinctWordCount</span> <span class="operator">=</span> uniqueWords.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出出现频率最高的单词</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mostFrequentWord</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxFrequency</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : wordFrequency.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getValue() &gt; maxFrequency) &#123;</span><br><span class="line">                maxFrequency = entry.getValue();</span><br><span class="line">                mostFrequentWord = entry.getKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;总字数: &quot;</span> + totalCharacters);</span><br><span class="line">        System.out.println(<span class="string">&quot;不同单词数量: &quot;</span> + distinctWordCount);</span><br><span class="line">        <span class="keyword">if</span> (!mostFrequentWord.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现频率最高的单词: &quot;</span> + mostFrequentWord + <span class="string">&quot;，出现次数: &quot;</span> + maxFrequency);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到有效单词。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>💡 <strong>提示：</strong></p><ul><li>多用 <code>String</code> 的方法如 <code>charAt()</code>、<code>indexOf()</code>、<code>substring()</code>、<code>split()</code>、<code>replace()</code>、<code>toUpperCase()</code>、<code>equalsIgnoreCase()</code> 等。</li><li>可以用 <code>StringBuilder</code> 来处理字符串反转、拼接等操作，效率更高。</li><li>利用 <code>Map</code>、<code>Set</code> 等数据结构来统计和分析字符串。</li></ul><p>🚀 有任何题目写不出来或者需要优化，随时喊我！加油 💪🌱✨</p><p>来源：</p><pre><code>- ChatGPt-4o- 我自己的题解和理解</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型与变量</title>
      <link href="/2025/03/05/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
      <url>/2025/03/05/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型与变量"><a href="#数据类型与变量" class="headerlink" title="数据类型与变量"></a>数据类型与变量</h1><h2 id="Java-标识符"><a href="#Java-标识符" class="headerlink" title="Java 标识符"></a>Java 标识符</h2><p>Java 所有的组成部分都需要名字。</p><p><strong>类名、变量名和方法名</strong>都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li>所有的标识符都应该以<strong>字母</strong><code>A-Z</code> 或 <code>a-z</code> 、<strong>美元符</strong><code>$</code> 或 <strong>下划线</strong><code>_</code>开始</li><li>首字符之后可以是<strong>字母</strong><code>A-Z</code> 或 <code>a-z</code> 美元符<code>$</code> 、下划线<code>_</code> 或<strong>数字</strong>的任何字符组合</li><li><strong>关键字不能</strong>用作标识符</li><li>标识符是<strong>大小写敏感</strong>的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary （非合法开头）</li></ul><h2 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h2><blockquote><p>在 Java 中，数据类型主要分为两大类：基本数据类型（Primitive Data Types）和引用数据类型（Reference Data Types）。下面为你详细介绍这两种类型。</p></blockquote><p>Java 有 8 种基本数据类型，它们可以进一步分为 4 类：整数类型、浮点类型、字符类型和布尔类型。</p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>用于表示整数数值，不同的整数类型有不同的取值范围和占用的存储空间。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8 位</td><td>-128 到 127</td><td>0</td><td><code>byte b = 10;</code></td></tr><tr><td><code>short</code></td><td>16 位</td><td>-32768 到 32767</td><td>0</td><td><code>short s = 100;</code></td></tr><tr><td><code>int</code></td><td>32 位</td><td>-2147483648 到 2147483647</td><td>0</td><td><code>int i = 1000;</code></td></tr><tr><td><code>long</code></td><td>64 位</td><td>-9223372036854775808 到 9223372036854775807</td><td>0L</td><td><code>long l = 10000L;</code>（注意：定义 <code>long</code> 类型的变量时，数值后面需要加 <code>L</code> 或 <code>l</code>）</td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>用于表示带小数部分的数值，分为单精度 <code>float</code> 和双精度 <code>double</code>。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>float</code></td><td>32 位</td><td>大约 ±3.40282347E+38F（有效位数 6 - 7 位）</td><td>0.0f</td><td><code>float f = 3.14f;</code>（注意：定义 <code>float</code> 类型的变量时，数值后面需要加 <code>F</code> 或 <code>f</code>）</td></tr><tr><td><code>double</code></td><td>64 位</td><td>大约 ±1.79769313486231570E+308（有效位数 15 位）</td><td>0.0d</td><td><code>double d = 3.14159;</code>（<code>double</code> 类型数值后面的 <code>d</code> 或 <code>D</code> 可以省略）</td></tr></tbody></table><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p><code>char</code> 类型用于表示单个字符，占用 16 位（2 个字节），采用 Unicode 编码。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>char</code></td><td>16 位</td><td>‘\u0000’ 到 ‘\uffff’（即 0 到 65535）</td><td>‘\u0000’</td><td><code>char c = &#39;A&#39;;</code></td></tr></tbody></table><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p><code>boolean</code> 类型只有两个值：<code>true</code> 和 <code>false</code>，用于逻辑判断。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>boolean</code></td><td>未明确规定（通常 1 位）</td><td><code>true</code> 或 <code>false</code></td><td><code>false</code></td><td><code>boolean flag = true;</code></td></tr></tbody></table><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>引用数据类型指向一个对象，而不是存储实际的数据值。常见的引用数据类型包括：</p><h4 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h4><p>自定义的类或者 Java 提供的类，例如 <code>String</code> 类用于表示字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 String 对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h4><p>接口是一种抽象类型，它定义了一组方法的签名，但没有实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现接口方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实现类的对象</span></span><br><span class="line"><span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br></pre></td></tr></table></figure><h4 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h4><p>数组是相同类型数据的有序集合，前面已经详细介绍过数组的声明、构造和初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型数组</span></span><br><span class="line"><span class="type">int</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="基本数据类型和引用数据类型的区别"><a href="#基本数据类型和引用数据类型的区别" class="headerlink" title="基本数据类型和引用数据类型的区别"></a>基本数据类型和引用数据类型的区别</h3><ul><li><strong>存储方式</strong>：基本数据类型直接存储数据值，而引用数据类型存储的是对象的引用（内存地址）。</li><li><strong>默认值</strong>：基本数据类型有各自的默认值，而引用数据类型的默认值是 <code>null</code>。</li><li><strong>使用方式</strong>：基本数据类型可以直接进行赋值和运算，而引用数据类型需要通过引用调用对象的方法和属性。</li></ul><h2 id="Java-数据类型转换"><a href="#Java-数据类型转换" class="headerlink" title="Java 数据类型转换"></a><a href="https://blog.csdn.net/qq_47897078/article/details/120038031">Java 数据类型转换</a></h2><p>Java数据类型转换<br>java数据类型的转换一般分三种,分别是:</p><h3 id="一-简单数据类型之间的转换"><a href="#一-简单数据类型之间的转换" class="headerlink" title="一. 简单数据类型之间的转换"></a>一. 简单数据类型之间的转换</h3><p>在Java中整型、实型、字符型被视为简单数据类型，这些类型由低级到高级分别为：</p><p><code>(byte，short，char)</code> —— <code>int</code>—-–<code>long</code>——<code>float</code>——<code>double</code></p><p>简单数据类型之间的转换又可以分为：</p><ul><li>低级到高级的自动类型转换</li><li>高级到低级的强制类型转换</li><li>包装类过渡类型能够转换</li></ul><p>低级变量可以直接转换为高级变量，笔者称之为自动类型转换,例如，下面的语句可以在Java中直接通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> b;</span><br><span class="line"><span class="type">int</span> i=b;</span><br><span class="line"><span class="type">long</span> l=b;</span><br><span class="line"><span class="type">float</span> f=b;</span><br><span class="line"><span class="type">double</span> d=b;</span><br></pre></td></tr></table></figure><p>如果低级类型为char型，向高级类型（整型）转换时，会转换为对应ASCII码值，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="type">int</span> i=c;</span><br><span class="line">System.out.println(<span class="string">&quot;output:&quot;</span> i);</span><br><span class="line"><span class="comment">//输出：output:99;</span></span><br></pre></td></tr></table></figure><p>对于<code>byte</code>,<code>short</code>,<code>char</code>三种类型而言，他们是平级的，因此不能相互自动转换，可以使用下述的强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> i=<span class="number">99</span>;</span><br><span class="line"><span class="type">char</span> c=(<span class="type">char</span>)i;</span><br><span class="line">System.out.println(<span class="string">&quot;output:&quot;</span> c);</span><br><span class="line"><span class="comment">//输出：output:c;</span></span><br></pre></td></tr></table></figure><p>将高级变量转换为低级变量时，情况会复杂一些，你可以使用强制类型转换。即你必须采用下面这种语句格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">99</span>;</span><br><span class="line"><span class="type">byte</span> b=(<span class="type">byte</span>)i;</span><br><span class="line"><span class="type">char</span> c=(<span class="type">char</span>)i;</span><br><span class="line"><span class="type">float</span> f=(<span class="type">float</span>)i;</span><br></pre></td></tr></table></figure><h3 id="二-字符串与其它数据类型的转换"><a href="#二-字符串与其它数据类型的转换" class="headerlink" title="二. 字符串与其它数据类型的转换"></a>二. 字符串与其它数据类型的转换</h3><h4 id="前置：包装类"><a href="#前置：包装类" class="headerlink" title="前置：包装类"></a>前置：包装类</h4><ol><li><p>什么是 <code>Float</code> 类型的对象</p><p>在 Java 中，数据类型分为基本数据类型和引用数据类型。<code>float</code> 是基本数据类型，用于表示单精度浮点数，而 <code>Float</code> 是 <code>float</code> 对应的包装类，属于引用数据类型。<code>Float</code> 类型的对象就是 <code>Float</code> 类的实例。</p><p>包装类存在的意义主要有以下几点：</p><ul><li><strong>对象操作</strong>：基本数据类型不具备对象的特性，不能调用方法。而包装类可以将基本数据类型封装成对象，这样就能调用一些方法，如 <code>Float</code> 类的 <code>doubleValue()</code> 方法可以将 <code>Float</code> 对象转换为 <code>double</code> 类型的值。</li><li><strong>数据处理</strong>：在一些数据处理和传递过程中，可能需要使用对象而不是基本数据类型。</li><li><strong>泛型支持</strong>：Java 的泛型只能使用引用类型，不能使用基本数据类型。例如，<code>List&lt;float&gt;</code> 是不合法的，而 <code>List&lt;Float&gt;</code> 是合法的。</li></ul></li></ol><p>下面是一个创建 <code>Float</code> 类型对象的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数创建 Float 对象</span></span><br><span class="line"><span class="type">Float</span> <span class="variable">floatObj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">3.14f</span>);</span><br><span class="line"><span class="comment">// 使用静态方法 valueOf 创建 Float 对象</span></span><br><span class="line"><span class="type">Float</span> <span class="variable">floatObj2</span> <span class="operator">=</span> Float.valueOf(<span class="string">&quot;3.14&quot;</span>);</span><br></pre></td></tr></table></figure><p>字符串转换类型</p><p>⑴其它类型向字符串的转换</p><ul><li>调用类的串转换方法：<code>X.toString()</code></li><li>自动转换：<code>X+&quot;&quot;</code></li><li>使用&#96;&#96;String<code>的方法：</code>String.volueOf(X)&#96;</li></ul><p>⑵字符串作为值，向其它类型的转换</p><ol><li><p>先转换成相应的封装器实例,再调用对应的方法转换成其它类型。例如，字符中“32.1”转换double型的值的格式为:</p><p><code>new Float(&quot;32.1&quot;).doubleValue()</code>：</p><p>也可以用：</p><p><code>Double.valueOf(&quot;32.1&quot;).doubleValue()</code>：<code>Double.valueOf(&quot;32.1&quot;).doubleValue()</code> 这行代码会先把字符串 <code>&quot;32.1&quot;</code> 转成 <code>Double</code> 类型的对象，接着再把这个 <code>Double</code> 对象转成 <code>double</code> 类型的基本数据类型值。</p></li><li><p>静态parseXXX方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> Byte.parseByte( s );</span><br><span class="line"><span class="type">short</span> <span class="variable">t</span> <span class="operator">=</span> Short.parseShort( s );</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt( s );</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Long.parseLong( s );</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> Float.parseFloat( s );</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble( s );</span><br></pre></td></tr></table></figure><p>在 Java 里，<code>Float</code> 类型的对象属于包装类对象。下面为你详细介绍 <code>Float</code> 类型对象以及 <code>Float</code> 首字母大写的缘由。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;3.14&quot;</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble( s );</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出3.14</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Java-变量"><a href="#Java-变量" class="headerlink" title="Java 变量"></a>Java 变量</h2><blockquote><p>在 Java 里，变量按其作用域、声明位置和生命周期等因素，可分为局部变量、类变量（静态变量）和成员变量（非静态变量）这三种主要类型。</p></blockquote><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li><strong>定义</strong>：在<strong>方法、构造方法或者语句块中</strong>定义的变量被称为局部变量。它只在定义它的方法、构造方法或语句块内部可见，当这些代码块执行完毕，局部变量就会被销毁。</li><li>特点<ul><li>声明在方法、构造函数或代码块内部。</li><li>必须在使用前初始化，否则会编译错误。</li><li>作用域仅限于声明它的代码块。</li></ul></li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalVariableExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 声明一个局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">10</span>; </span><br><span class="line">        System.out.println(<span class="string">&quot;局部变量的值: &quot;</span> + localVar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalVariableExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalVariableExample</span>();</span><br><span class="line">        example.testMethod();</span><br><span class="line">        <span class="comment">// 下面这行代码会编译错误，因为 localVar 超出了作用域</span></span><br><span class="line">        <span class="comment">// System.out.println(localVar); </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><ul><li><strong>定义</strong>：使用 <code>static</code> 关键字修饰的变量被称为类变量，也叫静态变量。它属于类本身，而不是类的某个实例，<strong>一个类的所有实例共享同一个类变量</strong>。</li><li>特点<ul><li>用 <code>static</code> 关键字声明，<strong>通常在类中方法外部声明</strong>。</li><li>可以在类加载时初始化，如果没有显式初始化，会有默认值（如数值类型为 0，布尔类型为 false，引用类型为 null）。</li><li><strong>可以通过类名直接访问，也可以通过类的实例访问</strong>。</li></ul></li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticVariableExample</span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">classVar</span> <span class="operator">=</span> <span class="number">20</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过类名直接访问类变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过类名访问类变量的值: &quot;</span> + StaticVariableExample.classVar); </span><br><span class="line"></span><br><span class="line">        <span class="type">StaticVariableExample</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticVariableExample</span>();</span><br><span class="line">        <span class="type">StaticVariableExample</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticVariableExample</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过实例访问类变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过 obj1 访问类变量的值: &quot;</span> + obj1.classVar); </span><br><span class="line">        System.out.println(<span class="string">&quot;通过 obj2 访问类变量的值: &quot;</span> + obj2.classVar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改类变量的值</span></span><br><span class="line">        obj1.classVar = <span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后通过 obj2 访问类变量的值: &quot;</span> + obj2.classVar); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量（动态变量）"><a href="#成员变量（动态变量）" class="headerlink" title="成员变量（动态变量）"></a>成员变量（动态变量）</h3><ul><li><strong>定义</strong>：在类中但方法、构造方法和语句块之外声明的变量被称为成员变量，也叫<strong>实例变量</strong>。每个类的实例都有自己独立的一份成员变量副本。</li><li>特点<ul><li>声明在类中，方法外部。</li><li>如果没有显式初始化，会有默认值（如数值类型为 0，布尔类型为 false，引用类型为 null）。</li><li><strong>必须通过类的实例来访问</strong>。</li></ul></li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceVariableExample</span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个成员变量</span></span><br><span class="line">    <span class="type">int</span> instanceVar; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InstanceVariableExample</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instanceVar = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InstanceVariableExample</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstanceVariableExample</span>(<span class="number">40</span>);</span><br><span class="line">        <span class="type">InstanceVariableExample</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstanceVariableExample</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每个实例有自己独立的成员变量副本</span></span><br><span class="line">        System.out.println(<span class="string">&quot;obj1 的成员变量值: &quot;</span> + obj1.instanceVar); </span><br><span class="line">        System.out.println(<span class="string">&quot;obj2 的成员变量值: &quot;</span> + obj2.instanceVar); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java导论</title>
      <link href="/2025/03/05/Java%E5%AF%BC%E8%AE%BA/"/>
      <url>/2025/03/05/Java%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Java导论"><a href="#Java导论" class="headerlink" title="Java导论"></a><code>Java</code>导论</h1><p>理解本博客需要初步了解面向对象编程技术，对于面向对象编程的基本概念本博客不再介绍。</p><blockquote><ul><li><p>Java 是一种高级、面向对象、跨平台的编程语言，由 <strong>Sun Microsystems</strong>（现归属 Oracle）于 1995 年推出。它以 <strong>“Write Once, Run Anywhere”（一次编写，随处运行）</strong> 为目标，广泛用于<strong>桌面应用</strong>、<strong>Web 开发</strong>、<strong>移动应用</strong>、<strong>企业级系统和物联网</strong></p></li><li><p><strong>Java 的跨平台性</strong> 和 <strong>运行时优化机制</strong> 是其核心优势，尤其在企业级和大数据开发中占据重要地位。</p></li></ul></blockquote><h2 id="Java-的主要特点"><a href="#Java-的主要特点" class="headerlink" title="Java 的主要特点"></a><strong>Java 的主要特点</strong></h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><strong>跨平台性</strong>：<ul><li>Java 通过 Java 虚拟机（JVM）实现跨平台。编译后的字节码（<code>.class</code> 文件）可以在任意安装 JVM 的操作系统上运行。</li></ul></li><li><strong>面向对象</strong>：<ul><li>支持类、对象、继承、多态等特性，采用封装、继承和多态作为核心设计思想。</li></ul></li><li><strong>安全性</strong>：<ul><li>Java 在编译和运行时提供多重安全机制，包括字节码验证、沙箱模型和内存管理。</li></ul></li><li><strong>多线程</strong>：<ul><li>Java 内置多线程支持，适合开发并发和高性能的程序。</li></ul></li><li><strong>动态性</strong>：<ul><li>Java 程序可以动态加载类库，适应运行时环境的变化。</li></ul></li><li><strong>高性能</strong>：<ul><li>虽然 Java 是解释执行的语言，但现代 JVM 的即时编译（JIT）技术大幅提高了性能。</li></ul></li></ol><h3 id="Java-的核心组件"><a href="#Java-的核心组件" class="headerlink" title="Java 的核心组件"></a><strong>Java 的核心组件</strong></h3><h4 id="1-Java语言"><a href="#1-Java语言" class="headerlink" title="1. Java语言"></a>1. Java语言</h4><h4 id="2-依赖环境"><a href="#2-依赖环境" class="headerlink" title="2. 依赖环境"></a>2. 依赖环境</h4><ul><li><p><strong>Java 虚拟机（JVM）</strong></p><p>JVM 是 Java 程序的运行核心，它负责加载字节码文件（<code>.class</code> 文件），并将字节码解释或编译成机器码，在不同的操作系统上提供统一的运行环境，实现了 Java 的 “一次编写，到处运行” 特性。</p></li><li><p><strong>Java 运行时环境（JRE）</strong></p><p>JRE 是运行 Java 程序所必需的环境，它包含了 JVM 和 Java 核心类库。如果你只需要运行 Java 程序，安装 JRE 即可。</p></li><li><p><strong>Java 开发工具包（JDK）</strong></p><p>JDK 是 Java 开发人员使用的工具包，它包含了 JRE 和一系列开发工具，如编译器（<code>javac</code>）、调试器等。如果你要开发 Java 程序，需要安装 JDK。</p></li></ul><p>包含关系：JDK &gt; JRE &gt; JVM</p><h4 id="3-类库"><a href="#3-类库" class="headerlink" title="3. 类库"></a>3. 类库</h4><ol><li>Java 标准类库</li></ol><p>Java 标准类库是 Java 提供的一系列预定义类和接口，涵盖了各种功能，如输入输出、网络编程、数据结构等。常见的包有：</p><ul><li><strong><code>java.lang</code></strong>：包含了 Java 语言的核心类，如 <code>Object</code>、<code>String</code>、<code>Thread</code> 等，该包会被自动导入。</li><li><strong><code>java.util</code></strong>：提供了常用的工具类和集合框架，如 <code>ArrayList</code>、<code>HashMap</code> 等。</li><li><strong><code>java.io</code></strong>：用于实现输入输出操作，如文件读写、网络数据传输等。</li><li><strong><code>java.net</code></strong>：提供了网络编程的相关类和接口，如 <code>Socket</code>、<code>ServerSocket</code> 等。</li></ul><ol start="2"><li>Java 扩展类库</li></ol><p>除了标准类库，Java 还有许多扩展类库，如 JavaFX（用于创建富客户端应用程序）、JDBC（用于数据库连接）等</p><h3 id="Java-的运行机制"><a href="#Java-的运行机制" class="headerlink" title="Java 的运行机制"></a><strong>Java 的运行机制</strong></h3><p>Java 的运行机制可以分为以下几个阶段：</p><p><strong>1. 编写源代码</strong></p><ul><li><p>开发者用 Java 编程语言编写 <code>.java</code> 文件。</p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 编译</strong></p><ul><li>使用 <code>javac</code> 编译器将 <code>.java</code> 文件编译为字节码（<code>.class</code> 文件）。</li><li>字节码是一种与平台无关的中间代码，能够被 JVM 执行。</li></ul><p><strong>3. 加载</strong></p><ul><li>JVM 的类加载器（Class Loader）将字节码文件加载到内存。</li></ul><p><strong>4. 解释与执行</strong></p><ul><li>JVM 通过解释器逐行将字节码转换为机器码。</li><li>为提升性能，现代 JVM 使用即时编译器（JIT，Just-In-Time Compiler）将热点代码直接编译为机器码以提高运行速度。</li></ul><p><strong>5. 执行结果</strong></p><ul><li>最终由底层硬件执行生成的机器指令，并输出运行结果。</li></ul><hr><p><strong>运行结构图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">源代码（.java）</span><br><span class="line">   ↓   编译（javac）</span><br><span class="line">字节码文件（.class）</span><br><span class="line">   ↓   加载（Class Loader）</span><br><span class="line">Java 虚拟机（JVM）</span><br><span class="line">   ↓   转换（解释/即时编译）</span><br><span class="line">操作系统与硬件执行</span><br></pre></td></tr></table></figure><hr><h3 id="Java-的典型应用领域"><a href="#Java-的典型应用领域" class="headerlink" title="Java 的典型应用领域"></a><strong>Java 的典型应用领域</strong></h3><ol><li><strong>Web 开发</strong>：Spring、Hibernate、Struts 等框架广泛应用于后端开发。</li><li><strong>移动开发</strong>：Android 应用开发使用 Java 作为主要语言（逐步被 Kotlin 替代）。</li><li><strong>企业级应用</strong>：Java EE 被用于银行、保险和电信等行业的企业级开发。</li><li><strong>大数据</strong>：Hadoop、Spark 等大数据工具依赖 Java。</li><li><strong>物联网</strong>：Java 的平台无关性和多线程支持使其适合 IoT 开发。</li></ol><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>字节码（Bytecode）是一种中间形式的代码，它在编程语言的编译和执行过程中扮演着重要角色，下面从不同角度为你详细介绍：</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>字节码是一种特殊的二进制代码，它介于高级编程语言代码（如 Java、Python 的源代码）和机器码（计算机硬件能够直接执行的指令）之间。字节码通常由高级语言的源代码经过编译器编译生成，它不是直接可以在计算机硬件上运行的机器码，而是<strong>一种面向虚拟机的代码格式</strong>。</p><p><strong>以 Java 为例理解字节码</strong></p><ul><li><strong>生成过程</strong>：在 Java 中，程序员编写的 <code>.java</code> 源文件，经过 Java 编译器（<code>javac</code>）编译后，会生成 <code>.class</code> 文件，这个 <code>.class</code> 文件中存储的就是字节码。例如，有一个简单的 Java 程序：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>javac HelloWorld.java</code> 命令编译该源文件，就会生成 <code>HelloWorld.class</code> 文件，其中包含了该程序对应的字节码。</p><p><strong>执行过程</strong>：</p><ul><li>Java 字节码不能直接在操作系统上运行，而是由 Java 虚拟机（JVM）来执行。</li><li>JVM 会读取 <code>.class</code> 文件中的字节码，将其解释或编译成机器码，然后在特定的操作系统和硬件平台上运行。</li><li>这种方式使得 Java 程序具有 “一次编写，到处运行” 的特性，因为只要在不同的平台上安装了对应的 JVM，就可以运行相同的 Java 字节码。</li></ul><p><strong>字节码的优势</strong></p><ul><li><strong>平台无关性</strong>：字节码可以在不同的操作系统和硬件平台上运行，只要该平台上有对应的虚拟机支持。例如，Java 字节码可以在 Windows、Linux、Mac OS 等多种操作系统上运行，而不需要针对每个平台重新编写和编译代码。</li><li><strong>安全性</strong>：字节码在执行之前可以经过虚拟机的安全检查，确保代码不会对系统造成危害。例如，Java 虚拟机在加载字节码时会进行类文件格式检查、访问权限检查等，防止恶意代码的执行。</li><li><strong>优化潜力</strong>：虚拟机可以对字节码进行优化，提高代码的执行效率。例如，JVM 中的即时编译器（JIT）可以在运行时将频繁执行的字节码编译成高效的机器码，从而提升程序的性能。</li></ul><p><strong>其他使用字节码的语言</strong></p><p>除了 Java 之外，还有很多编程语言也使用字节码技术，例如：</p><ul><li><strong>Python</strong>：Python 源代码会被编译成字节码（<code>.pyc</code> 文件），然后由 Python 解释器（如 CPython）来执行这些字节码。</li><li><strong>C#</strong>：C# 代码经过编译后会生成中间语言（IL）字节码，这些字节码在 .NET 平台的公共语言运行时（CLR）中执行。</li></ul><h2 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="comment">/* 第一个Java程序</span></span><br><span class="line"><span class="comment">     * 它将输出字符串 Hello World</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// 输出 Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面将逐步介绍如何保存、编译以及运行这个程序：</p><ul><li>打开代码编辑器，把上面的代码添加进去；</li><li>把文件名保存为：HelloWorld.java；(源文件名必须和类名相同)</li><li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\</li><li>在命令行窗口输入 <code>javac HelloWorld.java</code> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li><li>再键输入 <code>java HelloWorld</code> 按下回车键就可以运行程序了</li></ul><p>如果遇到编码问题，我们可以使用 <strong>-encoding</strong> 选项设置 <strong>utf-8</strong> 来编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding UTF-8 HelloWorld.java </span><br><span class="line">java HelloWorld </span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="示例语句"><a href="#示例语句" class="headerlink" title="示例语句"></a>示例语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span></span><br></pre></td></tr></table></figure><ul><li>公共的、静态的、无返回值的主方法，该方法接受一个字符串类型的数组作为参数</li></ul><p><img src="/assets/662E827A-FA32-4464-B0BD-40087F429E98.jpg" alt="img"></p><p>这是 Java 语言中程序执行的入口方法，当你运行一个 Java 程序时，JVM（Java 虚拟机）会从这个方法开始执行。其中：</p><ul><li><code>public</code> ：修饰符，表示该方法是公共的，<strong>可以被任何类访问</strong>。</li><li><code>static</code> ：修饰符，表示该方法是<strong>静态的</strong>，<strong>不需要创建类的实例</strong>就可以调用。</li><li><code>void</code>： 表示该方法没有返回值。</li><li><code>main</code> 标识符，是方法名，这是一个固定的名称，JVM 会识别这个方法作为程序的入口。所有的方法名都应该<strong>以小写字母开头</strong></li><li><code>String[] args</code> 是方法的参数，是<code>一个字符串类型的数组</code>，<strong>用于接收命令行参数</strong>。</li></ul><blockquote><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。</p></blockquote><h3 id="编写规则"><a href="#编写规则" class="headerlink" title="编写规则"></a>编写规则</h3><p>编写 Java 程序时，应注意以下几点：</p><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li><strong>类名</strong>：对于所有的类来说，<strong>类名的首字母应该大写</strong>。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li><li><strong>方法名</strong>：所有的方法名都应该<strong>以小写字母开头</strong>。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><p>​</p><p>- </p><h2 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h2><p>类似于 C&#x2F;C++、Java 也支持单行以及多行注释。</p><p>注释中的字符将被 Java 编译器忽略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    * 它将输出 Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello World&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-源程序与编译型运行区别"><a href="#Java-源程序与编译型运行区别" class="headerlink" title="Java 源程序与编译型运行区别"></a>Java 源程序与编译型运行区别</h2><p>如下图所示：</p><p><img src="/assets/ZSSDMld.png"></p><h2 id="Java-关键字"><a href="#Java-关键字" class="headerlink" title="Java 关键字"></a>Java 关键字</h2><p>下面列出了 Java 关键字。这些保留字<strong>不能</strong>用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>abstract</code></td><td>用于<strong>声明抽象类或抽象方法</strong>。</td></tr><tr><td><code>assert</code></td><td>用于断言某个条件为真，通常用于调试。</td></tr><tr><td><code>boolean</code></td><td>用于声明布尔类型的变量（<code>true</code> 或 <code>false</code>）。</td></tr><tr><td><code>break</code></td><td>用于跳出循环或<code>switch</code>语句。</td></tr><tr><td><code>byte</code></td><td>用于声明字节类型的变量（8位整数）。</td></tr><tr><td><code>case</code></td><td>用于<code>switch</code>语句中的分支。</td></tr><tr><td><code>catch</code></td><td>用于捕获异常。</td></tr><tr><td><code>char</code></td><td>用于声明字符类型的变量（16位Unicode字符）。</td></tr><tr><td><code>class</code></td><td>用于声明类。</td></tr><tr><td><code>const</code></td><td>保留关键字，未使用。</td></tr><tr><td><code>continue</code></td><td>用于跳过当前循环的剩余部分，继续下一次循环。</td></tr><tr><td><code>default</code></td><td>用于<code>switch</code>语句中的默认分支。</td></tr><tr><td><code>do</code></td><td>用于声明<code>do-while</code>循环。</td></tr><tr><td><code>double</code></td><td>用于声明双精度浮点数类型的变量（64位浮点数）。</td></tr><tr><td><code>else</code></td><td>用于<code>if</code>语句的否定分支。</td></tr><tr><td><code>enum</code></td><td>用于声明<strong>枚举类型</strong>。</td></tr><tr><td><code>extends</code></td><td>用于<strong>声明一个类继承另一个类</strong>。</td></tr><tr><td><code>final</code></td><td>用于声明常量、不可继承的类或不可重写的方法。</td></tr><tr><td><code>finally</code></td><td>用于<code>try-catch</code>块中，无论是否发生异常都会执行的代码块。</td></tr><tr><td><code>float</code></td><td>用于声明单精度浮点数类型的变量（32位浮点数）。</td></tr><tr><td><code>for</code></td><td>用于声明<code>for</code>循环。</td></tr><tr><td><code>goto</code></td><td>保留关键字，未使用。</td></tr><tr><td><code>if</code></td><td>用于声明条件语句。</td></tr><tr><td><code>implements</code></td><td>用于声明类<strong>实现一个或多个接口</strong>。</td></tr><tr><td><code>import</code></td><td>用于<strong>导入包或类</strong>。</td></tr><tr><td><code>instanceof</code></td><td>用于检查对象<strong>是否是某个类的实例</strong>。</td></tr><tr><td><code>int</code></td><td>用于声明整数类型的变量（32位整数）。</td></tr><tr><td><code>interface</code></td><td>用于声明接口。</td></tr><tr><td><code>long</code></td><td>用于声明<strong>长整数类型的变量</strong>（64位整数）。</td></tr><tr><td><code>native</code></td><td>用于声明<strong>本地方法</strong>（由非Java代码实现的方法）。</td></tr><tr><td><code>new</code></td><td>用于创建新对象。</td></tr><tr><td><code>package</code></td><td>用于声明包。</td></tr><tr><td><code>private</code></td><td>用于声明私有成员（仅在类内部可见）。</td></tr><tr><td><code>protected</code></td><td>用于声明受保护的成员（在类内部、子类和同一包内可见）。</td></tr><tr><td><code>public</code></td><td>用于声明公共成员（在任何地方可见）。</td></tr><tr><td><code>return</code></td><td>用于从方法中返回值。</td></tr><tr><td><code>short</code></td><td>用于声明短整数类型的变量（16位整数）。</td></tr><tr><td><code>static</code></td><td>用于声明静态成员（属于类而不是实例）。</td></tr><tr><td><code>strictfp</code></td><td>用于声明严格浮点计算（确保浮点运算在不同平台上结果一致）。</td></tr><tr><td><code>super</code></td><td>用于<strong>引用父类的成员</strong>或<strong>调用父类的构造方法</strong>。</td></tr><tr><td><code>switch</code></td><td>用于声明多分支选择语句。</td></tr><tr><td><code>synchronized</code></td><td>用于声明同步方法或代码块（线程安全）。</td></tr><tr><td><code>this</code></td><td>用于<strong>引用当前对象的实例</strong>。</td></tr><tr><td><code>throw</code></td><td>用于抛出异常。</td></tr><tr><td><code>throws</code></td><td>用于声明方法可能抛出的异常。</td></tr><tr><td><code>transient</code></td><td>用于声明不需要序列化的字段。</td></tr><tr><td><code>try</code></td><td>用于声明可能抛出异常的代码块。</td></tr><tr><td><code>void</code></td><td>用于声明无返回值的方法。</td></tr><tr><td><code>volatile</code></td><td>用于声明易变变量（确保多线程环境下的可见性）。</td></tr><tr><td><code>while</code></td><td>用于声明<code>while</code>循环。</td></tr></tbody></table><p>注意：</p><ul><li><code>const</code> 和 <code>goto</code> 是Java的保留关键字，但目前并未使用。</li><li><code>true</code>、<code>false</code> 和 <code>null</code> 是字面量，不是关键字，但也不能用作标识符。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法_修饰符</title>
      <link href="/2025/03/05/Java%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2025/03/05/Java%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h2><blockquote><p>像其他语言一样，Java可以使用修饰符。在 Java 里，修饰符用于定义<strong>类</strong>、<strong>方法</strong>或者<strong>变量</strong>的<strong>特性与访问权限</strong>。</p></blockquote><p>主要有两类修饰符：</p><ul><li><p>访问控制修饰符 : </p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><code>default</code></td><td>也称为包访问权限。如果一个类、方法或属性没有使用任何访问修饰符，那么它只能被同一个包内的其他类访问。</td></tr><tr><td><code>public</code></td><td>具有<strong>公共访问权限</strong>，被 <code>public</code> 修饰的类、方法或属性<strong>可以被任何包中的任何类访问</strong>。</td></tr><tr><td><code>protected</code></td><td>具有<strong>受保护的访问权限</strong>。被 <code>protected</code> 修饰的成员<strong>可以被同一个包内的其他类访问</strong>，<strong>也可以被不同包中的子类访问</strong>。</td></tr><tr><td><code>private</code></td><td>具有<strong>私有访问权限</strong>，被 <code>private</code> 修饰的方法或属性<strong>只能在定义它们的类内部访问</strong>，<strong>其他类无法直接访问</strong>。</td></tr></tbody></table><p>开放程度：public(所有人) &gt; protected(自家人) &gt; default(在家(包)里的人) &gt; private(自己)</p></li><li><p>非访问控制修饰符 ：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><code>final</code></td><td>修饰类：表示<strong>该类不能被继承</strong>。<br>修饰方法：表示<strong>该方法不能被重写</strong>。<br>修饰变量：表示该变量一旦被赋值，就<strong>不能再被修改</strong>，成为<strong>常量</strong>。</td></tr><tr><td><code>abstract</code></td><td>修饰类：表示该类是抽象类，不能被实例化，主要用于作为其他类的基类。抽象类中可以包含抽象方法和非抽象方法。 <br/>修饰方法：表示该方法是抽象方法，只有方法声明，没有方法体，需要在子类中实现。</td></tr><tr><td><code>static</code></td><td>修饰变量：表示该变量是<strong>类变量</strong>，被<strong>所有类的实例共享</strong>，不需要创建对象就<strong>可以通过类名直接访问</strong>。  <br/>修饰方法：表示该方法是<strong>类方法</strong>，同样不需要创建对象就<strong>可以通过类名直接调用</strong>，并且在静态方法中不能直接访问非静态成员(能访问静态成员)。</td></tr><tr><td><code>synchronized</code></td><td>用于修饰方法或代码块，保证<strong>在同一时刻只有一个线程可以访问该方法或代码块</strong>，主要用于解决<strong>多线程并发访问时的数据同步问题</strong>。</td></tr></tbody></table></li></ul><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><h4 id="1-default（默认，不写修饰符时）"><a href="#1-default（默认，不写修饰符时）" class="headerlink" title="1. default（默认，不写修饰符时）"></a>1. <code>default</code>（默认，不写修饰符时）</h4><ul><li><p><strong>含义</strong>：也称为包访问权限。如果一个类、方法或属性没有使用任何访问修饰符，那么它只能被同一个包内的其他类访问。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义在 com.example 包下</span></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultAccessClass</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a default access method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在同一个包内的其他类可以调用 <code>defaultMethod</code>，但不同包的类无法调用。</p><h4 id="2-public"><a href="#2-public" class="headerlink" title="2. public"></a>2. <code>public</code></h4><ul><li><p><strong>含义</strong>：具有<strong>公共访问权限</strong>，被 <code>public</code> 修饰的类、方法或属性<strong>可以被任何包中的任何类访问</strong>。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicAccessClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a public access method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>无论在哪个包中的类，都可以创建 <code>PublicAccessClass</code> 的对象并调用 <code>publicMethod</code>。</p><h4 id="3-protected"><a href="#3-protected" class="headerlink" title="3. protected"></a>3. <code>protected</code></h4><ul><li><p><strong>含义</strong>：具有<strong>受保护的访问权限</strong>。被 <code>protected</code> 修饰的成员<strong>可以被同一个包内的其他类访问</strong>，<strong>也可以被不同包中的子类访问</strong>。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类，在 com.example 包下</span></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a protected method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类，在不同包下</span></span><br><span class="line"><span class="keyword">package</span> another.example;</span><br><span class="line"><span class="keyword">import</span> com.example.ParentClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChildClass</span> <span class="keyword">extends</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callProtectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        protectedMethod(); <span class="comment">// 可以调用父类的 protected 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-private"><a href="#4-private" class="headerlink" title="4. private"></a>4. <code>private</code></h4><ul><li><p><strong>含义</strong>：具有<strong>私有访问权限</strong>，被 <code>private</code> 修饰的方法或属性<strong>只能在定义它们的类内部访问</strong>，<strong>其他类无法直接访问</strong>。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrivateAccessClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">privateField</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a private method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessPrivateMembers</span><span class="params">()</span> &#123;</span><br><span class="line">        privateField = <span class="number">20</span>;</span><br><span class="line">        privateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>外部类不能直接访问 <code>privateField</code> 和 <code>privateMethod</code>。</p><h3 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h3><h4 id="1-final"><a href="#1-final" class="headerlink" title="1. final"></a>1. <code>final</code></h4><ul><li><p>含义：</p><ul><li>修饰类：表示<strong>该类不能被继承</strong>。</li><li>修饰方法：表示<strong>该方法不能被重写</strong>。</li><li>修饰变量：表示该变量一旦被赋值，就<strong>不能再被修改</strong>，成为<strong>常量</strong>。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final 类不能被继承</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FinalClass</span> &#123;</span><br><span class="line">    <span class="comment">// final 方法不能被重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a final method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnotherClass</span> &#123;</span><br><span class="line">    <span class="comment">// final 变量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FINAL_VARIABLE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-abstract"><a href="#2-abstract" class="headerlink" title="2. abstract"></a>2. <code>abstract</code></h4><ul><li><p>含义：</p><ul><li>修饰类：表示该类是抽象类，不能被实例化，主要用于作为其他类的基类。抽象类中可以包含抽象方法和非抽象方法。</li><li>修饰方法：表示该方法是抽象方法，只有方法声明，没有方法体，需要在子类中实现。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">normalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a normal method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类实现抽象方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementing the abstract method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul><h4 id="3-static"><a href="#3-static" class="headerlink" title="3. static"></a>3. <code>static</code></h4><ul><li><p>含义：</p><ul><li>修饰变量：表示该变量是<strong>类变量</strong>，被<strong>所有类的实例共享</strong>，不需要创建对象就<strong>可以通过类名直接访问</strong>。</li><li>修饰方法：表示该方法是<strong>类方法</strong>，同样不需要创建对象就<strong>可以通过类名直接调用</strong>，并且在静态方法中不能直接访问非静态成员(能访问静态成员)。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticExample</span> &#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a static method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 直接通过类名访问静态变量和方法</span></span><br><span class="line">        System.out.println(StaticExample.staticVariable);</span><br><span class="line">        StaticExample.staticMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-synchronized"><a href="#4-synchronized" class="headerlink" title="4. synchronized"></a>4. <code>synchronized</code></h4><ul><li><strong>含义</strong>：用于修饰方法或代码块，保证<strong>在同一时刻只有一个线程可以访问该方法或代码块</strong>，主要用于解决<strong>多线程并发访问时的数据同步问题</strong>。</li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynchronizedExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample</span>();</span><br><span class="line">        <span class="comment">// 创建多个线程访问同步方法</span></span><br><span class="line">        <span class="comment">// 这里省略具体多线程代码，实际使用中可通过 Thread 类或 ExecutorService 实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protected-成员的访问方式"><a href="#protected-成员的访问方式" class="headerlink" title="protected 成员的访问方式"></a><code>protected</code> 成员的访问方式</h3><blockquote><p>在 Java 中，<code>protected</code> 和 <code>private</code> 都是访问修饰符，用于控制类、方法和变量的访问权限，但它们的访问规则有所不同。下面分别介绍 <code>protected</code> 成员的访问方式以及它与 <code>private</code> 的区别。</p></blockquote><p><code>protected</code> 修饰的成员（类、方法、变量）具有一定的访问权限规则，其访问方式如下：</p><h4 id="1-同一类内部"><a href="#1-同一类内部" class="headerlink" title="1. 同一类内部"></a>1. 同一类内部</h4><p>在定义 <code>protected</code> 成员的类内部，可以直接访问该成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProtectedExample</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">protectedVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a protected method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessWithinClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在类内部可以直接访问 protected 变量和方法</span></span><br><span class="line">        System.out.println(protectedVariable); </span><br><span class="line">        protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-同一包内的其他类"><a href="#2-同一包内的其他类" class="headerlink" title="2. 同一包内的其他类"></a>2. 同一包内的其他类</h4><p>在同一个包中的其他类，可以访问该类的 <code>protected</code> 成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同一个包中的另一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnotherClassInSamePackage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessProtectedMembers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProtectedExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectedExample</span>();</span><br><span class="line">        <span class="comment">// 在同一包内可以访问 protected 变量和方法</span></span><br><span class="line">        System.out.println(example.protectedVariable); </span><br><span class="line">        example.protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-不同包中的子类"><a href="#3-不同包中的子类" class="headerlink" title="3. 不同包中的子类"></a>3. 不同包中的子类</h4><p>在同包的子类中，可以通过子类对象访问从父类继承来的 <code>protected</code> 成员，也可以在子类内部直接访问父类的 <code>protected</code> 成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类在包 com.example.parent 中</span></span><br><span class="line"><span class="keyword">package</span> com.example.parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">protectedVariable</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a protected method in ParentClass.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类在包 com.example.child 中</span></span><br><span class="line"><span class="keyword">package</span> com.example.child;</span><br><span class="line"><span class="keyword">import</span> com.example.parent.ParentClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChildClass</span> <span class="keyword">extends</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessProtectedFromParent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在子类内部可以直接访问父类的 protected 成员</span></span><br><span class="line">        System.out.println(protectedVariable); </span><br><span class="line">        protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChildClass</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChildClass</span>();</span><br><span class="line">        child.accessProtectedFromParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不同包的子类对象也可以访问继承的 protected 成员</span></span><br><span class="line">        System.out.println(child.protectedVariable); </span><br><span class="line">        child.protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protected-与-private-的区别"><a href="#protected-与-private-的区别" class="headerlink" title="protected 与 private 的区别"></a><code>protected</code> 与 <code>private</code> 的区别</h3><h4 id="1-访问权限范围"><a href="#1-访问权限范围" class="headerlink" title="1. 访问权限范围"></a>1. 访问权限范围</h4><ul><li><strong><code>protected</code></strong>：如上述所说，<code>protected</code> 成员可以被同一类内部、同一包内的其他类以及不同包中的子类访问。</li><li><strong><code>private</code></strong>：<code>private</code> 成员只能在定义它的类内部被访问，其他任何类（包括子类，同一包中的其他类）都无法直接访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrivateExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">privateVariable</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a private method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessPrivateWithinClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在类内部可以直接访问 private 变量和方法</span></span><br><span class="line">        System.out.println(privateVariable); </span><br><span class="line">        privateMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TryToAccessPrivate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PrivateExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrivateExample</span>();</span><br><span class="line">        <span class="comment">// 下面两行代码会编译错误，因为 private 成员不能在类外部访问</span></span><br><span class="line">        <span class="comment">// System.out.println(example.privateVariable); </span></span><br><span class="line">        <span class="comment">// example.privateMethod(); </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-对继承的影响"><a href="#2-对继承的影响" class="headerlink" title="2. 对继承的影响"></a>2. 对继承的影响</h4><ul><li><strong><code>protected</code></strong>：<code>protected</code> 成员可以被不同包的子类继承和访问，这使得子类能够扩展和使用父类的功能。</li><li><strong><code>private</code></strong>：<code>private</code> 成员不能被子类继承和直接访问，子类无法直接使用父类的 <code>private</code> 成员，这保证了类的封装性和数据的安全性。</li></ul><p>来源：</p><pre><code>- 豆包- 我自己</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法_循环结构</title>
      <link href="/2025/03/05/Java%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2025/03/05/Java%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Java 中的循环结构非常强大，是控制程序执行流程的重要部分。让我们系统地讲解 Java 的三种基本循环结构，带你全面掌握它们的用法、区别和技巧！🚀</p><hr><h1 id="Java循环结构"><a href="#Java循环结构" class="headerlink" title="Java循环结构"></a>Java循环结构</h1><h2 id="1️⃣-for-循环"><a href="#1️⃣-for-循环" class="headerlink" title="1️⃣ for 循环"></a><strong>1️⃣ <code>for</code> 循环</strong></h2><p><code>for</code> 循环是 Java 中最常用的循环之一，特别适合<strong>已知循环次数</strong>的场景。</p><h3 id="语法结构："><a href="#语法结构：" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 循环条件; 更新表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行顺序："><a href="#执行顺序：" class="headerlink" title="执行顺序："></a><strong>执行顺序：</strong></h3><ol><li><strong>初始化表达式</strong>：在循环开始前执行一次，只执行这一次。</li><li><strong>循环条件</strong>：在每次循环前判断是否执行循环体。条件为 <code>true</code> 执行，为 <code>false</code> 停止。</li><li><strong>循环体</strong>：条件为 <code>true</code> 时执行。</li><li><strong>更新表达式</strong>：每次循环结束后执行，然后回到条件判断。</li></ol><h3 id="示例：打印-0-到-4-的数字"><a href="#示例：打印-0-到-4-的数字" class="headerlink" title="示例：打印 0 到 4 的数字"></a><strong>示例：打印 0 到 4 的数字</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForLoopExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前数字: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前数字: 0</span><br><span class="line">当前数字: 1</span><br><span class="line">当前数字: 2</span><br><span class="line">当前数字: 3</span><br><span class="line">当前数字: 4</span><br></pre></td></tr></table></figure><h3 id="增强型-for（for-each-循环）"><a href="#增强型-for（for-each-循环）" class="headerlink" title="增强型 for（for-each 循环）"></a><strong>增强型 <code>for</code>（<code>for-each</code> 循环）</strong></h3><p>专门用于<strong>遍历数组或集合</strong>。简洁直观，不需要下标操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数字: &quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2️⃣-while-循环"><a href="#2️⃣-while-循环" class="headerlink" title="2️⃣ while 循环"></a><strong>2️⃣ <code>while</code> 循环</strong></h2><p><code>while</code> 循环适合<strong>不确定循环次数但需要满足条件才执行</strong>的场景。</p><h3 id="语法结构：-1"><a href="#语法结构：-1" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行顺序：-1"><a href="#执行顺序：-1" class="headerlink" title="执行顺序："></a><strong>执行顺序：</strong></h3><ol><li><strong>先判断条件</strong>，<code>true</code> 则执行循环体，<code>false</code> 停止循环。</li><li>每次循环后，返回条件表达式继续判断。</li></ol><h3 id="示例：打印-0-到-4-的数字-1"><a href="#示例：打印-0-到-4-的数字-1" class="headerlink" title="示例：打印 0 到 4 的数字"></a><strong>示例：打印 0 到 4 的数字</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileLoopExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前数字: &quot;</span> + i);</span><br><span class="line">            i++; <span class="comment">// 别忘了更新变量，防止死循环！</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3️⃣-do-while-循环"><a href="#3️⃣-do-while-循环" class="headerlink" title="3️⃣ do-while 循环"></a><strong>3️⃣ <code>do-while</code> 循环</strong></h2><p><code>do-while</code> 循环与 <code>while</code> 类似，但<strong>至少会执行一次</strong>循环体。</p><h3 id="语法结构：-2"><a href="#语法结构：-2" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><h3 id="执行顺序：-2"><a href="#执行顺序：-2" class="headerlink" title="执行顺序："></a><strong>执行顺序：</strong></h3><ol><li><strong>先执行一次循环体</strong>。</li><li>然后判断条件，<code>true</code> 则继续执行，<code>false</code> 停止。</li></ol><h3 id="示例：至少执行一次的循环"><a href="#示例：至少执行一次的循环" class="headerlink" title="示例：至少执行一次的循环"></a><strong>示例：至少执行一次的循环</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前数字: &quot;</span> + i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>); <span class="comment">// 虽然条件不满足，但仍然执行了一次！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前数字: 10</span><br></pre></td></tr></table></figure><hr><h2 id="4️⃣-控制循环的关键字"><a href="#4️⃣-控制循环的关键字" class="headerlink" title="4️⃣ 控制循环的关键字"></a><strong>4️⃣ 控制循环的关键字</strong></h2><h3 id="break：提前结束循环"><a href="#break：提前结束循环" class="headerlink" title="break：提前结束循环"></a><strong><code>break</code>：提前结束循环</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;遇到 5，结束循环&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">遇到 5，结束循环</span><br></pre></td></tr></table></figure><h3 id="continue：跳过本次循环，继续下一次"><a href="#continue：跳过本次循环，继续下一次" class="headerlink" title="continue：跳过本次循环，继续下一次"></a><strong><code>continue</code>：跳过本次循环，继续下一次</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跳过 2&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">跳过 2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><hr><h2 id="5️⃣-循环嵌套"><a href="#5️⃣-循环嵌套" class="headerlink" title="5️⃣ 循环嵌套"></a><strong>5️⃣ 循环嵌套</strong></h2><p>可以在一个循环中嵌套另一个循环，用于多维数据处理或复杂逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NestedLoopExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;, j=&quot;</span> + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i=1, j=1</span><br><span class="line">i=1, j=2</span><br><span class="line">i=1, j=3</span><br><span class="line">i=2, j=1</span><br><span class="line">...</span><br><span class="line">i=3, j=3</span><br></pre></td></tr></table></figure><hr><h2 id="6️⃣-小技巧-注意事项"><a href="#6️⃣-小技巧-注意事项" class="headerlink" title="6️⃣ 小技巧 &amp; 注意事项"></a><strong>6️⃣ 小技巧 &amp; 注意事项</strong></h2><ul><li><strong><code>for</code> 循环更适合固定次数的循环。</strong></li><li><strong><code>while</code> 和 <code>do-while</code> 更适合不确定次数但需要基于条件的循环。</strong></li><li><strong>别忘了在循环中更新变量，避免死循环！</strong></li><li><strong>增强型 <code>for-each</code> 循环</strong>更加简洁，推荐用于遍历数组和集合。</li></ul><hr><h2 id="7️⃣-练习题"><a href="#7️⃣-练习题" class="headerlink" title="7️⃣ 练习题"></a><strong>7️⃣ 练习题</strong></h2><p><strong>🧠 问题 1：用 <code>for</code> 循环打印 1 到 100 的偶数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Print100</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">----------------</span><br><span class="line">98</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><strong>🧠 问题 2：用 <code>while</code> 循环求 1 到 100 的和。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sum100</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ,sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5050</span><br></pre></td></tr></table></figure><p><strong>🧠 问题 3：使用嵌套循环输出一个 5x5 的星号矩阵。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintMartrix</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;<span class="number">5</span>;k++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>有问题、练习答案、或者想更深入了解循环？欢迎来交流！🌱😊</p><p>来源：</p><ul><li>Chatgpt-4o</li><li>我的理解</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/03/Java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2025/03/03/Java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-运算符"><a href="#Java-运算符" class="headerlink" title="Java 运算符"></a>Java 运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>除了常见的<code>+ - * / % </code>还有自增自减<code>--</code> <code>++</code>运算符：</p><ul><li><p><strong>前缀自增自减法(++a,–a):</strong> 先进行自增或者自减运算，再进行表达式运算。</p><p>int b &#x3D; ++a; 拆分运算过程为: a&#x3D;a+1&#x3D;4; b&#x3D;a&#x3D;4, 最后结果为b&#x3D;4,a&#x3D;4</p><p>int d &#x3D; –c; 拆分运算过程为: c&#x3D;c-1&#x3D;2; d&#x3D;c&#x3D;2, 最后结果为d&#x3D;2,c&#x3D;2</p></li><li><p><strong>后缀自增自减法(a++,a–):</strong> 先进行表达式运算，再进行自增或者自减运算 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">selfAddMinus</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2</span>*++a;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>*b++;</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class="string">&quot;,x=&quot;</span>+x);</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class="string">&quot;,y=&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自增运算符前缀运算后a=6，x=12</span><br><span class="line">自增运算符后缀运算后b=6，y=10</span><br></pre></td></tr></table></figure></li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">（A &#x3D;&#x3D; B）为假。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td align="left">(A !&#x3D; B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; B）为假。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;B）为真。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; &#x3D; B）为假。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;&#x3D; B）为真。</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">按位与，如果相对应位都是1，则结果为1，否则为0</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或，如果相对应位都是 0，则结果为 0，否则为 1</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或，如果相对应位值相同，则结果为0，否则为1</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位取反，运翻转操作数的每一位，即0变成1，1变成0。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">A | B = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">A ^ B = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~A= <span class="number">1100</span> <span class="number">0011</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span> </span><br><span class="line">     <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &amp; b = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a | b = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a ^ b = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;~a = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class="line">  </span><br><span class="line">     c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a &amp; b = <span class="number">12</span></span><br><span class="line">a | b = <span class="number">61</span></span><br><span class="line">a ^ b = <span class="number">49</span></span><br><span class="line">~a = -<span class="number">61</span></span><br><span class="line">a &lt;&lt; <span class="number">2</span> = <span class="number">240</span></span><br><span class="line">a &gt;&gt; <span class="number">2</span>  = <span class="number">15</span></span><br><span class="line">a &gt;&gt;&gt; <span class="number">2</span> = <span class="number">15</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td align="left">（A &amp;&amp; B）为假。</td></tr><tr><td align="left">| |</td><td align="left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td align="left">（A | | B）为真。</td></tr><tr><td align="left">！</td><td align="left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td align="left">！（A &amp;&amp; B）为真。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class="line">     System.out.println(<span class="string">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a &amp;&amp; b = <span class="literal">false</span></span><br><span class="line">a || b = <span class="literal">true</span></span><br><span class="line">!(a &amp;&amp; b) = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuoJi</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> (++a&gt;<span class="number">10</span>)&amp;&amp;(++a&gt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;a的结果为&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">使用短路逻辑运算符的结果为<span class="literal">false</span></span><br><span class="line">a的结果为<span class="number">6</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuoJi</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> (a&lt;<span class="number">4</span>)&amp;&amp;(a++&lt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;a的结果为&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">使用短路逻辑运算符的结果为<span class="literal">false</span></span><br><span class="line">a的结果为<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下面是Java语言支持的赋值运算符：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td align="left">C &#x3D; A + B将把A + B得到的值赋给C</td></tr><tr><td align="left">+ &#x3D;</td><td align="left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td align="left">C + &#x3D; A等价于C &#x3D; C + A</td></tr><tr><td align="left">- &#x3D;</td><td align="left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td align="left">C - &#x3D; A等价于C &#x3D; C - A</td></tr><tr><td align="left">* &#x3D;</td><td align="left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td align="left">C * &#x3D; A等价于C &#x3D; C * A</td></tr><tr><td align="left">&#x2F; &#x3D;</td><td align="left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td align="left">C &#x2F; &#x3D; A，C 与 A 同类型时等价于 C &#x3D; C &#x2F; A</td></tr><tr><td align="left">（％）&#x3D;</td><td align="left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td align="left">C％&#x3D; A等价于C &#x3D; C％A</td></tr><tr><td align="left">&lt;&lt; &#x3D;</td><td align="left">左移位赋值运算符</td><td align="left">C &lt;&lt; &#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt; &#x3D;</td><td align="left">右移位赋值运算符</td><td align="left">C &gt;&gt; &#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td></tr><tr><td align="left">＆&#x3D;</td><td align="left">按位与赋值运算符</td><td align="left">C＆&#x3D; 2等价于C &#x3D; C＆2</td></tr><tr><td align="left">^ &#x3D;</td><td align="left">按位异或赋值操作符</td><td align="left">C ^ &#x3D; 2等价于C &#x3D; C ^ 2</td></tr><tr><td align="left">| &#x3D;</td><td align="left">按位或赋值操作符</td><td align="left">C | &#x3D; 2等价于C &#x3D; C | 2</td></tr></tbody></table><h2 id="条件运算符（三元运算符）"><a href="#条件运算符（三元运算符）" class="headerlink" title="条件运算符（三元运算符）?:"></a>条件运算符（三元运算符）<code>?:</code></h2><p>该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">variable</span> <span class="variable">x</span> <span class="operator">=</span> (expression) ? value <span class="keyword">if</span> <span class="literal">true</span> : value <span class="keyword">if</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> +  b );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> + b );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">Value of b is : <span class="number">30</span></span><br><span class="line">Value of b is : <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (class/<span class="keyword">interface</span> <span class="title class_">type</span>)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstacanceOf</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h2><p>在 Java 中，运算符的优先级决定了在表达式中哪个运算符会先执行。了解这些优先级非常重要，可以帮助我们写出更清晰、更准确的代码。</p><hr><h3 id="1️⃣-最高优先级（从高到低执行）"><a href="#1️⃣-最高优先级（从高到低执行）" class="headerlink" title="1️⃣ 最高优先级（从高到低执行）"></a><strong>1️⃣ 最高优先级（从高到低执行）</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>1</td><td><code>()</code></td><td>括号</td><td>左到右</td></tr><tr><td></td><td><code>[]</code></td><td>数组下标访问</td><td>左到右</td></tr><tr><td></td><td><code>.</code></td><td>对象成员访问、方法调用</td><td>左到右</td></tr><tr><td>2</td><td><code>++</code>、<code>--</code></td><td>后置自增、自减</td><td>左到右</td></tr></tbody></table><hr><h3 id="2️⃣-一元运算符"><a href="#2️⃣-一元运算符" class="headerlink" title="2️⃣ 一元运算符"></a><strong>2️⃣ 一元运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>3</td><td><code>++</code>、<code>--</code></td><td>前置自增、自减</td><td>右到左</td></tr><tr><td></td><td><code>+</code>、<code>-</code></td><td>正、负号</td><td>右到左</td></tr><tr><td></td><td><code>~</code></td><td>按位取反</td><td>右到左</td></tr><tr><td></td><td><code>!</code></td><td>逻辑非</td><td>右到左</td></tr><tr><td></td><td><code>(类型)</code></td><td>强制类型转换</td><td>右到左</td></tr></tbody></table><hr><h3 id="3️⃣-算术运算符"><a href="#3️⃣-算术运算符" class="headerlink" title="3️⃣ 算术运算符"></a><strong>3️⃣ 算术运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>4</td><td><code>*</code>、<code>/</code>、<code>%</code></td><td>乘、除、取模</td><td>左到右</td></tr><tr><td>5</td><td><code>+</code>、<code>-</code></td><td>加、减</td><td>左到右</td></tr></tbody></table><hr><h3 id="4️⃣-位移运算符"><a href="#4️⃣-位移运算符" class="headerlink" title="4️⃣ 位移运算符"></a><strong>4️⃣ 位移运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>6</td><td><code>&lt;&lt;</code></td><td>左移</td><td>左到右</td></tr><tr><td></td><td><code>&gt;&gt;</code></td><td>右移（带符号）</td><td>左到右</td></tr><tr><td></td><td><code>&gt;&gt;&gt;</code></td><td>无符号右移</td><td>左到右</td></tr></tbody></table><hr><h3 id="5️⃣-比较运算符"><a href="#5️⃣-比较运算符" class="headerlink" title="5️⃣ 比较运算符"></a><strong>5️⃣ 比较运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>7</td><td><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code></td><td>大小比较</td><td>左到右</td></tr><tr><td>8</td><td><code>instanceof</code></td><td>判断对象类型</td><td>左到右</td></tr></tbody></table><hr><h3 id="6️⃣-相等性运算符"><a href="#6️⃣-相等性运算符" class="headerlink" title="6️⃣ 相等性运算符"></a><strong>6️⃣ 相等性运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>9</td><td><code>==</code></td><td>判断相等</td><td>左到右</td></tr><tr><td></td><td><code>!=</code></td><td>判断不等</td><td>左到右</td></tr></tbody></table><hr><h3 id="7️⃣-位运算符"><a href="#7️⃣-位运算符" class="headerlink" title="7️⃣ 位运算符"></a><strong>7️⃣ 位运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>10</td><td><code>&amp;</code></td><td>按位与</td><td>左到右</td></tr><tr><td>11</td><td><code>^</code></td><td>按位异或</td><td>左到右</td></tr><tr><td>12</td><td>&#96;</td><td>&#96;</td><td>按位或</td></tr></tbody></table><hr><h3 id="8️⃣-逻辑运算符"><a href="#8️⃣-逻辑运算符" class="headerlink" title="8️⃣ 逻辑运算符"></a><strong>8️⃣ 逻辑运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>13</td><td><code>&amp;&amp;</code></td><td>逻辑与（短路）</td><td>左到右</td></tr><tr><td>14</td><td>&#96;</td><td></td><td>&#96;</td></tr></tbody></table><hr><h3 id="9️⃣-三目运算符"><a href="#9️⃣-三目运算符" class="headerlink" title="9️⃣ 三目运算符"></a><strong>9️⃣ 三目运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>15</td><td><code>? :</code></td><td>三目运算符</td><td>右到左</td></tr></tbody></table><hr><h3 id="🔟-赋值运算符"><a href="#🔟-赋值运算符" class="headerlink" title="🔟 赋值运算符"></a><strong>🔟 赋值运算符</strong></h3><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th><th>结合方向</th></tr></thead><tbody><tr><td>16</td><td><code>=</code></td><td>赋值</td><td>右到左</td></tr><tr><td></td><td><code>+=</code>、<code>-=</code></td><td>加减赋值</td><td>右到左</td></tr><tr><td></td><td><code>*=</code>、<code>/=</code>、<code>%=</code></td><td>乘、除、取模赋值</td><td>右到左</td></tr><tr><td></td><td><code>&amp;=</code>、&#96;</td><td>&#x3D;<code>、</code>^&#x3D;&#96;</td><td>位运算赋值</td></tr><tr><td></td><td><code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code></td><td>位移赋值</td><td>右到左</td></tr></tbody></table><hr><h3 id="💡-运算符优先级小技巧"><a href="#💡-运算符优先级小技巧" class="headerlink" title="💡 运算符优先级小技巧"></a><strong>💡 运算符优先级小技巧</strong></h3><ol><li><p><strong>括号优先</strong>：始终可以用 <code>()</code> 提高可读性，确保复杂表达式的执行顺序正确。</p></li><li><p><strong>三目运算符结合方向是从右到左</strong>，容易忽略。</p></li><li><p>逻辑运算符短路特性：</p><ul><li><code>&amp;&amp;</code>：只要第一个条件为 <code>false</code>，后面的就不会执行。</li></ul></li></ol><ul><li><code>||</code>：只要第一个条件为 <code>true</code>，后面的就不会执行。</li></ul><hr><h3 id="✨-示例代码"><a href="#✨-示例代码" class="headerlink" title="✨ 示例代码"></a><strong>✨ 示例代码</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorPrecedenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>, b = <span class="number">10</span>, c = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 算术运算符优先于比较运算符</span></span><br><span class="line">        System.out.println(a + b &gt; c); <span class="comment">// (5 + 10) &gt; 15 -&gt; false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 位移运算符优先于按位与</span></span><br><span class="line">        System.out.println(b &gt;&gt; <span class="number">1</span> &amp; a); <span class="comment">// (10 &gt;&gt; 1) &amp; 5 -&gt; 5 &amp; 5 -&gt; 5 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 三目运算符结合方向从右到左</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? b &gt; c ? <span class="number">100</span> : <span class="number">200</span> : <span class="number">300</span>;</span><br><span class="line">        System.out.println(result); <span class="comment">// 输出：300</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 赋值运算符结合方向从右到左</span></span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        x = y = z = <span class="number">10</span>;</span><br><span class="line">        System.out.println(x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;, &quot;</span> + z); <span class="comment">// 输出：10, 10, 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>📝 总结：</strong></p><ul><li>括号 <code>()</code> 永远优先级最高。</li><li>算术 &gt; 位运算 &gt; 比较 &gt; 逻辑 &gt; 赋值。</li><li>短路逻辑运算符 <code>&amp;&amp;</code> 和 <code>||</code> 会影响表达式执行顺序。</li><li><code>=</code>、<code>+=</code>、<code>-=</code> 等赋值运算符的结合方向是<strong>从右到左</strong>。</li></ul><p>如果你对某个运算符、执行顺序或某段代码的结果有疑问，咱们可以一起深入讨论！😊✨</p><p>来源：</p><ul><li>Chatgpt-4o</li><li><a href="www.runoob.com">菜鸟教程</a></li><li>我自己</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法_面向对象_包</title>
      <link href="/2025/02/18/Java%20%E5%8C%85/"/>
      <url>/2025/02/18/Java%20%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Package"><a href="#Java-Package" class="headerlink" title="Java Package"></a>Java Package</h1><h2 id="package-关键字"><a href="#package-关键字" class="headerlink" title="package 关键字"></a>package 关键字</h2><blockquote><p>在 Java 中，<code>package</code>是一个非常重要的概念，用于组织和管理 Java 类。</p></blockquote><h3 id="定义与作用"><a href="#定义与作用" class="headerlink" title="定义与作用"></a>定义与作用</h3><ul><li><p><strong>定义</strong>：</p><ul><li><code>package</code>语句是 Java 源文件中的一个特殊语句，用于<strong>声明该文件中定义的类所属的包</strong>。</li><li><strong>它必须是源文件中的第一条非注释语句</strong>。</li></ul></li><li><p>作用</p><ul><li><p><strong>组织代码结构</strong>：将相关的类、接口等组织在一起，形成一种层次化的命名空间，使代码更易于管理和维护。</p><p>比如，所有与数据库操作相关的类可以放在一个名为<code>com.example.db</code>的包中。</p></li></ul><ul><li><p><strong>避免命名冲突</strong>：不同的包中可以有<strong>相同名称的类</strong>，通过包名来<strong>区分它们</strong>。</p><p>例如，<code>java.util</code>包和<code>java.sql</code>包中都有<code>Date</code>类，通过完整的包名来明确使用的是哪个类。</p></li></ul></li></ul><h3 id="声明与命名规则"><a href="#声明与命名规则" class="headerlink" title="声明与命名规则"></a>声明与命名规则</h3><ul><li><p><strong>声明语法</strong>：</p><p>在 Java 源文件的开头使用<code>package</code>关键字来声明包，例如<code>package com.example.myapp;</code>，表示该文件中的类都属于<code>com.example.myapp</code>包。</p></li><li><p>命名规则：</p><ul><li><strong>全小写</strong>：包名通常采用全小写字母，以提高可读性和遵循 Java 的命名规范。</li><li><strong>域名倒置</strong>：一般以公司或组织的域名倒置作为包名的开头，然后根据项目的结构和功能进行细分。例如，域名为<code>example.com</code>，那么包名可能是<code>com.example.projectname.module</code>。</li><li><strong>避免使用关键字</strong>：不能使用 Java 中的关键字作为包名，如<code>class</code>、<code>public</code>等。</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p>创建一个叫做animals的包。通常使用小写的字母来命名避免与类、接口名字的冲突。在 animals 包中加入一个接口（interface）</p><p><code>Animal.java文件代码</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来，在同一个包中加入该接口的实现</p><p><code>MammalInt.java文件代码</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MammalInt</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">noOfLegs</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后，编译这两个文件，并把他们放在一个叫做animals的子目录中。 用下面的命令来运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> animals</span><br><span class="line">$ <span class="built_in">cp</span> Animal.class  MammalInt.class animals <span class="comment">#将这两个文件放在animals文件夹，也就是animals包下。</span></span><br><span class="line">$ java animals/MammalInt <span class="comment">#这是在命令行中执行MammalInt类。java是 Java 虚拟机（JVM）的启动命令，用于运行 Java 类。这里指定了animals/MammalInt，表示要运行animals目录下的MammalInt类。</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mammal eats</span><br><span class="line">Mammal travel</span><br></pre></td></tr></table></figure><p>或者在把这两个文件放在 手动新建的<code>animal</code>文件夹 下，然后在IntelliJ IDEA Community Edition 下直接运行<code>MammalInt.java</code>即可，可实现相同功能。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\<span class="number">19707</span>\iCloudDrive\iCloud~<span class="built_in">md</span>~obsidian\Happy\quzia_pac\Java_prac\包&gt; tree /F</span><br><span class="line">卷 OS 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 <span class="number">1511</span><span class="literal">-5760</span></span><br><span class="line">C:.</span><br><span class="line">├─.idea</span><br><span class="line">│      .gitignore</span><br><span class="line">│      misc.xml</span><br><span class="line">│      modules.xml</span><br><span class="line">│      vcs.xml</span><br><span class="line">│      workspace.xml</span><br><span class="line">│      包.iml</span><br><span class="line">│</span><br><span class="line">├─animals</span><br><span class="line">│      Animal.java</span><br><span class="line">│      MammalInt.java</span><br><span class="line">│</span><br><span class="line">└─out</span><br><span class="line">    └─production</span><br><span class="line">        └─包</span><br><span class="line">            ├─.idea</span><br><span class="line">            │      .gitignore</span><br><span class="line">            │      misc.xml</span><br><span class="line">            │      modules.xml</span><br><span class="line">            │      vcs.xml</span><br><span class="line">            │      包.iml</span><br><span class="line">            │</span><br><span class="line">            └─animals</span><br><span class="line">                    Animal.class</span><br><span class="line">                    MammalInt.class</span><br></pre></td></tr></table></figure></li></ol><p>上述代码中，<code>MammalInt</code>类实现了<code>Animal</code>接口，并实现了<code>eat</code>和<code>travel</code>方法，在方法中分别打印出了<code>Mammal eats</code>和<code>Mammal travels</code>。</p><h2 id="package-的目录结构设置"><a href="#package-的目录结构设置" class="headerlink" title="package 的目录结构设置"></a>package 的目录结构设置</h2><p>首先，在.java的文件中，如果想要使用<code>package &lt;name&gt;</code>语句，那么必须将该文件放到 <code>./&lt;name&gt;</code> 文件夹 (项目根目录的name文件夹) 下。 </p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>通常，一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是 Mihoyo.com，所有的包名都以 com.Mihoyo 开头。包名中的每一个部分对应一个子目录。</p><p>例如：有一个 <strong>com.Mihoyo.test</strong> 的包，这个包包含一个叫做 Mihoyo.java 的源文件，那么相应的，应该有如下面的一连串子目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">....\com\Mihoyo\test\Mihoyo.java</span><br></pre></td></tr></table></figure><p>那么文件<code>Mihoyo.java</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Mihoyo.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mihoyo</span> &#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Google</span> &#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用<code>javac -d . Mihoyo.java</code>编译文件，就会产生如下字节码文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\com\Mihoyo\test\Mihoyo.class</span><br><span class="line">.\com\Mihoyo\test\Google.class</span><br></pre></td></tr></table></figure><p>编译之后的 .class 文件应该和 .java 源文件一样，它们放置的目录应该跟包的名字对应起来。</p><p>但是，并不要求 .class 文件的路径跟相应的 .java 的路径一样。你可以分开来安排源码和类的目录。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;path-one&gt;\sources\com\Mihoyo\test\Mihoyo.java</span><br><span class="line">&lt;path-two&gt;\classes\com\Mihoyo\test\Google.class</span><br></pre></td></tr></table></figure><p>这样，你可以将你的类目录分享给其他的编程人员，而不用透露自己的源码。</p><h3 id="字节码文件的加载路径"><a href="#字节码文件的加载路径" class="headerlink" title="字节码文件的加载路径"></a>字节码文件的加载路径</h3><p>用这种方法管理源码和类文件可以让编译器和java 虚拟机（JVM）可以找到你程序中使用的所有类型：</p><ul><li>类目录的绝对路径叫做 <code>class path</code>。设置在系统变量 <code>CLASSPATH</code> 中。也可以在执行时使用<code>java -classpath &lt;class path&gt;</code>来指定或者直接更改<code>CLASSPATH</code>。（更改方法在下一个示例中）</li><li>编译器和 java 虚拟机通过将 <code>&lt;package name&gt; + &lt;class path&gt;</code> 来构造 .class 文件的路径。</li></ul><p>比如在上一个示例中：</p><ul><li><code>&lt;path- two&gt;\classes</code> 是 <code>class path</code></li><li><code>&lt;package name&gt;</code>是 <code>com.Mihoyo.test</code></li><li>所以最终 编译器和 JVM 会在 <code>&lt;path-two&gt;\classes\com\Mihoyo\test</code> 中找编译好的 .class 文件。</li></ul><p>一个 class path 可能会包含好几个路径，多路径应该用分隔符(<code>;</code>)分开。</p><p>默认情况下，编译器和 JVM 查找 <strong>当前目录</strong>。JAR 文件按包含 Java 平台相关的类，所以他们的目录默认放在了 <code>class path</code> 中。</p><p>默认的CLASSPATH如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassPath=.;C:\Program Files\Java\jdk<span class="literal">-17</span>\lib\dt.jar;C:\Program Files\Java\jdk<span class="literal">-17</span>\lib\tools.jar;C:\Program Files\Java\jdk<span class="literal">-17</span>\lib;</span><br></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>使用集成开发环境IDE <code>IntelliJ IDEA Community Edition</code>运行java文件时，包以及java文件编译后，默认存放在.&#x2F;out&#x2F;production&#x2F;&lt;根目录名称&gt;下，比如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\<span class="number">19707</span>\iCloudDrive\iCloud~<span class="built_in">md</span>~obsidian\Happy\quzia_pac\Java_prac\包&gt; tree /F</span><br><span class="line">卷 OS 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 <span class="number">1511</span><span class="literal">-5760</span></span><br><span class="line">C:.</span><br><span class="line">│  _Import.java</span><br><span class="line">│</span><br><span class="line">├─.idea</span><br><span class="line">│      .gitignore</span><br><span class="line">│      misc.xml</span><br><span class="line">│      modules.xml</span><br><span class="line">│      vcs.xml</span><br><span class="line">│      workspace.xml</span><br><span class="line">│      包.iml</span><br><span class="line">│</span><br><span class="line">├─animals</span><br><span class="line">│      Animal.java</span><br><span class="line">│      MammalInt.java</span><br><span class="line">│</span><br><span class="line">└─out</span><br><span class="line">    └─production</span><br><span class="line">        └─包</span><br><span class="line">            │  _Import.class</span><br><span class="line">            │</span><br><span class="line">            ├─.idea</span><br><span class="line">            │      .gitignore</span><br><span class="line">            │      misc.xml</span><br><span class="line">            │      modules.xml</span><br><span class="line">            │      vcs.xml</span><br><span class="line">            │      workspace.xml</span><br><span class="line">            │      包.iml</span><br><span class="line">            │</span><br><span class="line">            └─animals</span><br><span class="line">                    Animal.class</span><br><span class="line">                    MammalInt.class <span class="comment">#编译好的可被JVM加载执行的字节码文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是如果想要在另一个文件夹下使用这个包，有两种方法：</p><h4 id="本地库的使用方法"><a href="#本地库的使用方法" class="headerlink" title="本地库的使用方法"></a>本地库的使用方法</h4><p><strong>方法一：命令行执行指定包路径</strong></p><p>命令行执行，指定包路径<code>C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\包</code>即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\本地库和外部库&gt; java -classpath C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\包\out\production\包 .\OutLib.java</span><br><span class="line">Mammal eats</span><br><span class="line">Mammal travels</span><br></pre></td></tr></table></figure><p><strong>方法二：更改变量CLASSPATH</strong></p><p> <strong>在 CMD 中追加 <code>CLASSPATH</code></strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\19707&gt;<span class="title">set</span> <span class="title">CLASSPATH</span></span></span><br><span class="line"><span class="function"><span class="title">ClassPath</span>=.;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">dt.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">tools.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707&gt;<span class="title">set</span> <span class="title">CLASSPATH</span>=%<span class="title">CLASSPATH</span>%;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707&gt;<span class="title">set</span> <span class="title">CLASSPATH</span></span></span><br><span class="line"><span class="function"><span class="title">ClassPath</span>=.;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">dt.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">tools.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>;;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包</span></span><br></pre></td></tr></table></figure><p>上述命令中，<code>%CLASSPATH%</code> 会获取当前 <code>CLASSPATH</code> 的值，然后通过分号 <code>;</code> 将新的路径追加到后面。</p><p><strong>或在 PowerShell 中追加 <code>CLASSPATH</code></strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:CLASSPATH</span> = <span class="string">&quot;<span class="variable">$env:CLASSPATH</span>;C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\包\out\production\包&quot;</span></span><br></pre></td></tr></table></figure><p>这里，<code>$env:CLASSPATH</code> 表示当前 <code>CLASSPATH</code> 的值，通过字符串拼接的方式将新的路径追加到后面。</p><p>效果如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">tree</span> /<span class="title">f</span> </span></span><br><span class="line"><span class="function">卷 <span class="title">OS</span> 的文件夹 <span class="title">PATH</span> 列表</span></span><br><span class="line"><span class="function">卷序列号为 1511-5760</span></span><br><span class="line"><span class="function"><span class="title">C</span>:.</span></span><br><span class="line"><span class="function">│  <span class="title">OutLib.java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">set</span> <span class="title">CLASSPATH</span>=%<span class="title">CLASSPATH</span>%;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包                </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">set</span> <span class="title">CLASSPATH</span>                                              </span></span><br><span class="line"><span class="function"><span class="title">ClassPath</span>=.;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">dt.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">tools.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>;;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">java</span> <span class="title">OutLib.java</span></span></span><br><span class="line"><span class="function"><span class="title">Mammal</span> <span class="title">eats</span></span></span><br><span class="line"><span class="function"><span class="title">Mammal</span> <span class="title">travels</span></span></span><br></pre></td></tr></table></figure><h2 id="import-关键字"><a href="#import-关键字" class="headerlink" title="import 关键字"></a>import 关键字</h2><h3 id="Java包的导入与使用"><a href="#Java包的导入与使用" class="headerlink" title="Java包的导入与使用"></a>Java包的导入与使用</h3><ul><li><strong>导入其他包中的类</strong>：<ul><li>使用<code>import</code>语句<strong>导入其他包中的类</strong>，以便在当前类中可以直接使用这些类，而无需使用完整的包名</li><li>例如，要使用<code>java.util.Date</code>类，可以在代码中添加<code>import java.util.Date;</code>，然后就可以直接使用<code>Date</code>来创建对象等操作。</li><li>import 语句应该位于 package 语句之后</li></ul></li><li><strong>使用不同包中的同名类</strong>：<ul><li>当需要使用不同包中的同名类时，可以使用完整的包名来明确指定要使用的类。</li><li>例如，<code>java.util.Date</code>和<code>java.sql.Date</code>是两个不同的<code>Date</code>类，如果在代码中同时需要使用这两个类，可以通过完整的包名来区分它们。</li></ul></li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>在项目下创建文件<code>_Import.java</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> animals.MammalInt; <span class="comment">//使用包中的类，该类是公共的，本文件对它有访问权限。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_Import</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args [])</span>&#123;</span><br><span class="line">        <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">        m.eat();</span><br><span class="line">        m.travel();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后也输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mammal eats</span><br><span class="line">Mammal travels</span><br></pre></td></tr></table></figure><h3 id="包与访问控制"><a href="#包与访问控制" class="headerlink" title="包与访问控制"></a>包与访问控制</h3><ul><li>访问修饰符与包的关系：Java 中的访问修饰符（public、private、protected和默认（没有修饰符））用于控制类、方法和变量在不同包中的访问权限。<ul><li><strong><code>public</code></strong>：被<code>public</code>修饰的 类、方法或变量 可以在 <strong>任何包中的任何类</strong> 中被访问。</li><li><strong><code>private</code></strong>：<code>private</code>修饰的成员只能在 <strong>当前类内部</strong> 被访问，即使在<strong>同一个包中的其他类也无法访问</strong>。</li><li><strong><code>protected</code></strong>：<code>protected</code>修饰的成员可以在 <strong>当前类、同一个包中的其他类以及不同包中的子类</strong> 中被访问。</li><li><strong>默认（没有修饰符）</strong>：没有修饰符的成员具有包访问权限，即<strong>只能在同一个包中的类</strong>中被访问。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> Package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭载过程</title>
      <link href="/2025/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
      <url>/2025/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭载过程"><a href="#博客搭载过程" class="headerlink" title="博客搭载过程"></a>博客搭载过程</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>git</li><li><a href="https://blog.csdn.net/Nicolecocol/article/details/136788200">node.js</a></li><li>Hexo</li></ol><h2 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm : 无法加载文件 D:\Program Files\nodejs\npm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsof</span><br><span class="line">t.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ npm</span><br><span class="line">+ ~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>Windows PowerShell 默认禁止运行脚本。以下是解决方法：</p><hr><h3 id="临时允许脚本运行（推荐）"><a href="#临时允许脚本运行（推荐）" class="headerlink" title="临时允许脚本运行（推荐）"></a>临时允许脚本运行（推荐）</h3><ol><li><p>以管理员身份打开 PowerShell</p></li><li><p>输入以下命令：</p><p>powershell</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope Process</span><br></pre></td></tr></table></figure><ul><li>这会临时允许当前会话运行脚本</li><li>关闭 PowerShell 后权限恢复默认</li></ul></li></ol><h2 id="Hexo命令教学-deepseek生成"><a href="#Hexo命令教学-deepseek生成" class="headerlink" title="Hexo命令教学(deepseek生成)"></a>Hexo命令教学(deepseek生成)</h2><p>以下是 Hexo 的常用命令及其功能说明，帮助你更高效地管理和发布博客内容：</p><hr><h3 id="一、初始化与安装"><a href="#一、初始化与安装" class="headerlink" title="一、初始化与安装"></a>一、初始化与安装</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo init &lt;folder&gt;</code></td><td>初始化一个 Hexo 项目到指定文件夹</td></tr><tr><td><code>npm install</code></td><td>安装 Hexo 项目依赖</td></tr><tr><td><code>npm install hexo-cli -g</code></td><td>全局安装 Hexo 命令行工具</td></tr></tbody></table><hr><h3 id="二、本地开发"><a href="#二、本地开发" class="headerlink" title="二、本地开发"></a>二、本地开发</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo clean</code></td><td>清除缓存文件和已生成的静态文件</td></tr><tr><td><code>hexo generate</code> 或 <code>hexo g</code></td><td>生成静态文件（默认输出到 <code>public</code> 文件夹）</td></tr><tr><td><code>hexo server</code> 或 <code>hexo s</code></td><td>启动本地服务器（默认地址：<code>http://localhost:4000</code>）</td></tr><tr><td><code>hexo s --debug</code></td><td>启动本地服务器并开启调试模式</td></tr><tr><td><code>hexo g --watch</code></td><td>生成静态文件并监听文件变化</td></tr></tbody></table><hr><h3 id="三、内容管理"><a href="#三、内容管理" class="headerlink" title="三、内容管理"></a>三、内容管理</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo new &lt;title&gt;</code> 或 <code>hexo n &lt;title&gt;</code></td><td>创建一篇新文章（默认路径：<code>source/_posts/</code>）</td></tr><tr><td><code>hexo new page &lt;pageName&gt;</code></td><td>创建一个新页面（默认路径：<code>source/&lt;pageName&gt;/index.md</code>）</td></tr><tr><td><code>hexo publish &lt;filename&gt;</code></td><td>发布草稿为正式文章</td></tr></tbody></table><hr><h3 id="四、部署与发布"><a href="#四、部署与发布" class="headerlink" title="四、部署与发布"></a>四、部署与发布</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo deploy</code> 或 <code>hexo d</code></td><td>部署网站到远程服务器</td></tr><tr><td><code>hexo g -d</code></td><td>生成静态文件并部署</td></tr><tr><td><code>hexo d --generate</code></td><td>部署前自动生成静态文件</td></tr></tbody></table><hr><h3 id="五、插件与主题"><a href="#五、插件与主题" class="headerlink" title="五、插件与主题"></a>五、插件与主题</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>npm install &lt;plugin-name&gt;</code></td><td>安装 Hexo 插件</td></tr><tr><td><code>npm uninstall &lt;plugin-name&gt;</code></td><td>卸载 Hexo 插件</td></tr><tr><td><code>git clone &lt;theme-repo-url&gt; themes/&lt;theme-name&gt;</code></td><td>下载并安装主题</td></tr></tbody></table><hr><h3 id="六、调试与帮助"><a href="#六、调试与帮助" class="headerlink" title="六、调试与帮助"></a>六、调试与帮助</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo version</code> 或 <code>hexo -v</code></td><td>查看 Hexo 版本</td></tr><tr><td><code>hexo help</code></td><td>查看 Hexo 帮助信息</td></tr><tr><td><code>hexo list</code></td><td>列出所有可用命令</td></tr></tbody></table><hr><h3 id="七、常用组合命令"><a href="#七、常用组合命令" class="headerlink" title="七、常用组合命令"></a>七、常用组合命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></td><td>清除缓存、生成静态文件并启动本地服务器</td></tr><tr><td><code>hexo clean &amp;&amp; hexo g -d</code></td><td>清除缓存、生成静态文件并部署</td></tr></tbody></table><hr><h3 id="八、配置文件"><a href="#八、配置文件" class="headerlink" title="八、配置文件"></a>八、配置文件</h3><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td><code>_config.yml</code></td><td>Hexo 主配置文件</td></tr><tr><td><code>_config.&lt;theme-name&gt;.yml</code></td><td>主题配置文件</td></tr><tr><td><code>source/_posts/</code></td><td>文章存放目录</td></tr><tr><td><code>source/_drafts/</code></td><td>草稿存放目录</td></tr></tbody></table><hr><h3 id="九、其他实用命令"><a href="#九、其他实用命令" class="headerlink" title="九、其他实用命令"></a>九、其他实用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo migrate &lt;type&gt;</code></td><td>从其他博客系统迁移内容</td></tr><tr><td><code>hexo render &lt;file&gt;</code></td><td>渲染指定文件</td></tr><tr><td><code>hexo list &lt;type&gt;</code></td><td>列出指定类型的文件（如文章、页面等）</td></tr></tbody></table><hr><h3 id="十、注意事项"><a href="#十、注意事项" class="headerlink" title="十、注意事项"></a>十、注意事项</h3><ol><li><strong>部署前务必执行 <code>hexo clean</code></strong>：避免缓存导致的问题。</li><li><strong>修改配置后重启服务器</strong>：确保配置生效。</li><li><strong>使用 <code>--debug</code> 参数</strong>：调试时查看详细日志。</li></ol><p>掌握这些命令后，你可以更高效地管理和发布 Hexo 博客内容！</p><h2 id="markdown动态字体"><a href="#markdown动态字体" class="headerlink" title="markdown动态字体"></a>markdown动态字体</h2><p><a href="https://readme-typing-svg.demolab.com/demo/?lines=%E6%88%91%E6%9C%89%E4%BD%A0%E4%BB%AC%E6%88%91%E9%9D%9E%E5%B8%B8%E5%B9%B8%E7%A6%8F">Readme Typing SVG - Demo Site</a></p><p>效果如下：</p><p><a href="https://git.io/typing-svg"><img src="https://readme-typing-svg.demolab.com/?font=Fira+Code&pause=1000&width=435&lines=%E6%88%91%E6%9C%89%E4%BD%A0%E4%BB%AC%E6%88%91%E9%9D%9E%E5%B8%B8%E5%B9%B8%E7%A6%8F" alt="Typing SVG"></a></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>很推荐</p><p><a href="https://blog.aqcoder.cn/posts/447d/">Butterfly博客主题搭建系列：基础教程 | 枫叶</a></p><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h2><p>修改_config.butterfly.yml里面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Loading Animation</span><br><span class="line">preloader:</span><br><span class="line">  enable: true</span><br><span class="line">  # source</span><br><span class="line">  # 1. fullpage-loading</span><br><span class="line">  # 2. pace (progress bar)</span><br><span class="line">  source: 1</span><br><span class="line">  # pace theme (see https://codebyzach.github.io/pace/)</span><br><span class="line">  pace_css_url:</span><br></pre></td></tr></table></figure><p>enable为true即可</p><h2 id="搜索系统"><a href="#搜索系统" class="headerlink" title="搜索系统"></a>搜索系统</h2><p><a href="https://blog.aqcoder.cn/posts/447d/#%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F">Butterfly 博客主题搭建系列：基础教程 | 枫叶</a></p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><a href="https://blog.aqcoder.cn/posts/447d/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5">Butterfly 博客主题搭建系列：基础教程 | 枫叶</a></p><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><p><a href="https://zsyyblog.com/cf6da462.html#%E6%96%B0%E7%89%88%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89">Hexo+Butterfly 增加留言板信封 | 竹山一叶</a>  使用新版哦！</p><h3 id="留言板信封"><a href="#留言板信封" class="headerlink" title="留言板信封"></a>留言板信封</h3><p><a href="https://akilar.top/posts/e2d3c450/">信笺样式留言板 | Akilarの糖果屋</a></p><h2 id="半自动化生成相册"><a href="#半自动化生成相册" class="headerlink" title="半自动化生成相册"></a>半自动化生成相册</h2><p>参考文章：</p><p>基于 <a href="https://blog.imyan.ren/posts/64b2bc9e/">半自动化生成博客相册 | 炎忍的博客</a> 这篇文章，我进行了改进，让脚本更稳定。</p><p>基于 <a href="https://www.fattymonkey.com/post/10066.html">Butterfly主题美化之图集相关 | 繁体猴の客栈</a> 这篇文章，配置相册封面和页面设置。</p><h3 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Program Files\happy-blog\<span class="built_in">source</span>&gt; tree /F</span><br><span class="line">卷 原神 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 0EDC-5FA0</span><br><span class="line">D:.</span><br><span class="line">├─about</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─categories</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─comments</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─gallery <span class="comment">#相册页面</span></span><br><span class="line">│  │  index.md</span><br><span class="line">│  │</span><br><span class="line">│  └─harbin-tourism <span class="comment">#具体的相册项目</span></span><br><span class="line">│      │  g.py <span class="comment"># 自动生成markdown的python文件位置</span></span><br><span class="line">│      │  index.md <span class="comment"># 该页面的index.md</span></span><br><span class="line">│      │</span><br><span class="line">│      └─images <span class="comment">#该项目对应的图片集</span></span><br><span class="line">│              me&amp;flower.jpg</span><br><span class="line">│              me&amp;rabbit.jpg</span><br><span class="line">│              me&amp;snowman.jpg</span><br><span class="line">│              一起购物.jpg</span><br><span class="line">│              中央大街的合照.jpg</span><br><span class="line">│              九转小莫.jpg</span><br><span class="line">│              九转小莫豆腐.jpg</span><br><span class="line">│              九转小莫锅包肉.jpg</span><br><span class="line">│              冰雪大世界合照.jpg</span><br><span class="line">│              婷姐和班长.jpg</span><br><span class="line">│              懒得喷.jpg</span><br><span class="line">│              海底捞给王琳婷过生日.jpg</span><br><span class="line">│              滑雪的合照.jpg</span><br><span class="line">│              狮子康在演奏钢琴.jpg</span><br><span class="line">│              美丽的冰雪大世界.jpg</span><br><span class="line">│              雪棉豆沙.jpg</span><br><span class="line">├─<span class="built_in">link</span></span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─tags</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─_data</span><br><span class="line">│      link.yml</span><br><span class="line">│</span><br><span class="line">└─_posts</span><br><span class="line">        Yolo5第一代识别模型训练过程.md</span><br></pre></td></tr></table></figure><h3 id="g-py"><a href="#g-py" class="headerlink" title="g.py"></a><code>g.py</code></h3><p><strong>功能</strong></p><ul><li>自动向特定相册对应的index.md中追加图片的markdown语句。</li><li>但是还是需要<code>hexo new page &lt;pageName&gt;</code>手动生成特定相册对应的页面。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>] <span class="comment">#D:\Program Files\happy-blog\source\gallery\harbin-tourism\</span></span><br><span class="line">abspath_images = path + <span class="string">&#x27;\\images&#x27;</span> <span class="comment">#图片绝对路径</span></span><br><span class="line">xdpath_images = <span class="string">&#x27;images&#x27;</span> <span class="comment"># 图片相对路径 images</span></span><br><span class="line"></span><br><span class="line">os.chdir(abspath_images) <span class="comment">#harbin-tourism\images</span></span><br><span class="line">ls_file = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.scandir():</span><br><span class="line">    <span class="keyword">if</span> file.is_file():</span><br><span class="line">        ls_file.append(file.name)</span><br><span class="line"></span><br><span class="line">md_text = <span class="string">&quot;\n&#123;% gallery %&#125;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> ls_file:</span><br><span class="line">    md_path = <span class="string">&quot;![&quot;</span> + os.path.splitext(image)[<span class="number">0</span>] + <span class="string">&quot;](&quot;</span> + <span class="built_in">str</span>(xdpath_images)+ <span class="string">&quot;\\&quot;</span> + image+ <span class="string">&quot;)&quot;</span></span><br><span class="line">    md_text += md_path.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">md_text += <span class="string">&quot;&#123;% endgallery %&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">os.chdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.md&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(md_text)</span><br></pre></td></tr></table></figure><h3 id="自动化生成markdown操作步骤"><a href="#自动化生成markdown操作步骤" class="headerlink" title="自动化生成markdown操作步骤"></a>自动化生成markdown操作步骤</h3><ol><li><code>hexo new page gallery</code>生成gallery页面</li><li><code>hexo new page &lt;具体的相册名称&gt;</code>生成某套相册，然后把它移动到上一步生成的gallery目录下。</li><li>在&lt;具体的相册名称&gt;目录下创建images目录，把需要的图片放进去。把g.py也放在该目录下。</li><li><code>python g.py</code>自动生成markdown。</li></ol><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/assets/image-20250210225448620.png" alt="image-20250210225448620"></p><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mailto:&lt;邮箱地址&gt;</span><br></pre></td></tr></table></figure><p>这相当于一个URL外部链接，点击后可以自动打开用户发送邮箱的软件然后向填写的邮箱地址发送邮箱。</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;自我介绍界面&gt;</span><br></pre></td></tr></table></figure><p>我的是默认的<code>hexo new page about</code></p><p>然后填写~source&#x2F;about&#x2F;index.md即可完成自我介绍板块。</p><h2 id="文章发表"><a href="#文章发表" class="headerlink" title="文章发表"></a>文章发表</h2><ol><li><p><code>hexo new &lt;titlee&gt; </code>创建文章</p><p>我的文章如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 你的文章标题</span><br><span class="line">date: 2025-02-04 14:00:00</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 技术</span><br><span class="line"><span class="bullet">  -</span> 学习</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> 编程</span><br><span class="line"><span class="section">comments: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 文章的标题</span></span><br><span class="line"></span><br><span class="line">这里是文章的内容。你可以用 Markdown 格式书写你的文章，包括代码块、列表、图片等。</span><br><span class="line"></span><br><span class="line"><span class="section">## 示例代码</span></span><br><span class="line"></span><br><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">def hello_world():</span></span><br><span class="line"><span class="code">    print(&quot;Hello, World!&quot;)</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></li><li><p>三连可本地查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于yolov8m物体检测模型的前端展示项目</title>
      <link href="/2025/02/04/%E5%9F%BA%E4%BA%8Eyolov8m%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/02/04/%E5%9F%BA%E4%BA%8Eyolov8m%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="基于yolov8m物体检测模型的前端展示项目"><a href="#基于yolov8m物体检测模型的前端展示项目" class="headerlink" title="基于yolov8m物体检测模型的前端展示项目"></a>基于yolov8m物体检测模型的前端展示项目</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>基于yolov8m和机器视觉的冰雪检测模型</li><li>选择自动划分数据集为训练集和验证集。</li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip pip install -r .\requirements.txt</span><br></pre></td></tr></table></figure><h2 id="项目目录配置"><a href="#项目目录配置" class="headerlink" title="项目目录配置"></a>项目目录配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Program Files\road_snow&gt; tree</span><br><span class="line">卷 原神 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 0EDC-5FA0</span><br><span class="line">D:.</span><br><span class="line">├─.idea</span><br><span class="line">│  └─inspectionProfiles</span><br><span class="line">├─.vscode</span><br><span class="line">├─training_set</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">└─yolov8n</span><br><span class="line">    ├─runs</span><br><span class="line">    │  └─detect</span><br><span class="line">    │      └─train310</span><br><span class="line">    │          └─weights</span><br><span class="line">    ├─static</span><br><span class="line">    │  ├─css</span><br><span class="line">    │  ├─results</span><br><span class="line">    │  └─uploads</span><br><span class="line">    └─templates</span><br></pre></td></tr></table></figure><h2 id="识别对象分类"><a href="#识别对象分类" class="headerlink" title="识别对象分类"></a>识别对象分类</h2><p>训练决定舍弃数据集中背景和干燥这两大类，只选择moist、snow和ice这三类。目的是只为识别冰雪，增强模型识别的针对性。</p><table><thead><tr><th>类型</th><th>危险指数</th></tr></thead><tbody><tr><td>snow</td><td>中度危险</td></tr><tr><td>ice</td><td>高度危险</td></tr></tbody></table><p>后续想增加<code>water </code>类型,指代更多的水，就是更危险的路面。</p><h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>在之前的YoloV5n模型的基础上，引入纯态数据集进行训练。纯态数据集里面包含的都是单一类型图片，就是整张图片区域都是moist、snow或ice中的一种。</p><h3 id="数据集目录结构"><a href="#数据集目录结构" class="headerlink" title="数据集目录结构"></a>数据集目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">PS E:\education\dataset&gt; tree</span><br><span class="line">卷 龙版 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 64E0-4EF7</span><br><span class="line">E:.</span><br><span class="line">├─12.01</span><br><span class="line">├─json_dataset <span class="comment">#图片和标注图片的json文件</span></span><br><span class="line">│  ├─12.02</span><br><span class="line">│  ├─157</span><br><span class="line">│  ├─158</span><br><span class="line">│  ├─159</span><br><span class="line">│  ├─160</span><br><span class="line">│  ├─161</span><br><span class="line">│  ├─162</span><br><span class="line">│  ├─163</span><br><span class="line">│  ├─164</span><br><span class="line">│  ├─165</span><br><span class="line">│  ├─166</span><br><span class="line">│  ├─167</span><br><span class="line">│  ├─168</span><br><span class="line">│  ├─169</span><br><span class="line">│  ├─170</span><br><span class="line">│  ├─171</span><br><span class="line">│  ├─172</span><br><span class="line">│  ├─173</span><br><span class="line">│  ├─174</span><br><span class="line">│  ├─175</span><br><span class="line">│  ├─176</span><br><span class="line">│  ├─177</span><br><span class="line">│  ├─178</span><br><span class="line">│  ├─179</span><br><span class="line">│  ├─180</span><br><span class="line">│  ├─181</span><br><span class="line">│  ├─182</span><br><span class="line">│  ├─183</span><br><span class="line">│  ├─184</span><br><span class="line">│  ├─185</span><br><span class="line">│  ├─186</span><br><span class="line">│  ├─187</span><br><span class="line">│  ├─188</span><br><span class="line">│  ├─189</span><br><span class="line">│  ├─190</span><br><span class="line">│  ├─191</span><br><span class="line">│  ├─192</span><br><span class="line">│  ├─193</span><br><span class="line">│  ├─194</span><br><span class="line">│  ├─195</span><br><span class="line">│  ├─196</span><br><span class="line">│  ├─197</span><br><span class="line">│  ├─198</span><br><span class="line">│  ├─199</span><br><span class="line">│  ├─200</span><br><span class="line">│  ├─201</span><br><span class="line">│  ├─202</span><br><span class="line">│  ├─203</span><br><span class="line">│  ├─204</span><br><span class="line">│  ├─205</span><br><span class="line">│  ├─206</span><br><span class="line">│  ├─208</span><br><span class="line">│  └─209</span><br><span class="line">├─pure_dataset </span><br><span class="line">│  ├─labels</span><br><span class="line">│  ├─冰</span><br><span class="line">│  ├─干燥</span><br><span class="line">│  ├─潮湿</span><br><span class="line">│  ├─积水</span><br><span class="line">│  └─雪</span><br><span class="line">└─text_dataset </span><br><span class="line">    ├─测试集</span><br><span class="line">    ├─测试集_自己拍的图片 <span class="comment">#自己找的一些用于测试的图片</span></span><br><span class="line">    └─视频测试集 <span class="comment">#视频</span></span><br></pre></td></tr></table></figure><h3 id="yolov8m-yaml配置"><a href="#yolov8m-yaml配置" class="headerlink" title="yolov8m.yaml配置"></a><code>yolov8m.yaml</code>配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path:</span> <span class="string">E:\education\road_snow\training_set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显式指定数据集路径</span></span><br><span class="line"><span class="attr">train:</span> <span class="string">E:\education\road_snow\training_set\images</span>  <span class="comment"># **预先划分好的训练集**</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">E:\education\road_snow\training_set\images</span>     <span class="comment"># **预先划分好的验证集**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nc:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;snow&#x27;</span>, <span class="string">&#x27;ice&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化增强参数</span></span><br><span class="line"><span class="attr">augmentations:</span></span><br><span class="line">  <span class="attr">mosaic:</span> <span class="number">1.0</span>        <span class="comment"># **全程开启mosaic**</span></span><br><span class="line">  <span class="attr">mixup:</span> <span class="number">0.5</span>         <span class="comment"># **增强混合比例**</span></span><br><span class="line">  <span class="attr">copy_paste:</span> <span class="number">0.5</span>    <span class="comment"># **提升小目标复制概率**</span></span><br><span class="line">  <span class="attr">scale:</span> [<span class="number">0.5</span>, <span class="number">1.5</span>]  <span class="comment"># **新增随机缩放**</span></span><br><span class="line">  <span class="attr">shear:</span> <span class="number">0.3</span>         <span class="comment"># **新增剪切变换**</span></span><br><span class="line">  <span class="attr">perspective:</span> <span class="number">0.001</span> <span class="comment"># **新增透视变换**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化检测参数</span></span><br><span class="line"><span class="attr">conf_thres:</span> <span class="number">0.25</span>     <span class="comment"># **平衡召回与精度**</span></span><br><span class="line"><span class="attr">iou_thres:</span> <span class="number">0.45</span>      <span class="comment"># **适应雪地目标重叠**</span></span><br></pre></td></tr></table></figure><h2 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h2><h3 id="标注纯态数据集"><a href="#标注纯态数据集" class="headerlink" title="标注纯态数据集"></a>标注纯态数据集</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li><p>需要为Yolo机器学习标注数据集，有以下数据集：moist 、snow和ice三种。需要实现数据集标注。返回图片对应的yolo的.txt标注文件。</p></li><li><p>现在有一些纯态图片，就是整张图片区域都是moist、snow或ice中的一种。</p></li><li><p>标注方法的话，纯态代表整张图片，所以对应的<code>label.txt</code>就是 <code>&lt;class_id&gt; 0.5 0.5 1.0 1.0</code></p></li><li><p>再把标注过的图片移动到训练集下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├─training_set</span><br><span class="line">   ├─images</span><br><span class="line">   └─labels</span><br></pre></td></tr></table></figure></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该脚本实现划分未标注的纯态数据集为训练集目录的功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义类别和 class_id</span></span><br><span class="line">categories = &#123;</span><br><span class="line">    <span class="string">&quot;冰&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;积水&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;潮湿&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;雪&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始数据目录</span></span><br><span class="line">base_dirs = &#123;</span><br><span class="line">    <span class="string">&quot;冰&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\冰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;积水&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\积水&quot;</span>,</span><br><span class="line">    <span class="string">&quot;潮湿&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\潮湿&quot;</span>,</span><br><span class="line">    <span class="string">&quot;雪&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\雪&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标存放路径</span></span><br><span class="line">dataset_dir = <span class="string">r&quot;D:\Program Files\road_snow\training_set&quot;</span> <span class="comment">#数据集绝对路径</span></span><br><span class="line">img_dir = os.path.join(dataset_dir, <span class="string">&quot;images&quot;</span>)</span><br><span class="line">label_dir = os.path.join(dataset_dir, <span class="string">&quot;labels&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> [img_dir, label_dir]:</span><br><span class="line">    os.makedirs(path, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有类别的图片</span></span><br><span class="line"><span class="keyword">for</span> category, dir_path <span class="keyword">in</span> base_dirs.items():</span><br><span class="line">    class_id = categories[category]</span><br><span class="line">    all_images = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir_path) <span class="keyword">if</span> f.endswith((<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.JPG&#x27;</span>, <span class="string">&#x27;.PNG&#x27;</span>, <span class="string">&#x27;.JPEG&#x27;</span>))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理训练集</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> all_images:</span><br><span class="line">        src_img_path = os.path.join(dir_path, filename)</span><br><span class="line">        dst_img_path = os.path.join(img_dir, filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 复制图片</span></span><br><span class="line">        shutil.copy(src_img_path, dst_img_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成标签</span></span><br><span class="line">        label_filename = os.path.splitext(filename)[<span class="number">0</span>] + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">        label_path = os.path.join(label_dir, label_filename)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(label_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;<span class="subst">&#123;class_id&#125;</span> 0.5 0.5 1.0 1.0\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;纯态数据集划分完成！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="标注普通数据集"><a href="#标注普通数据集" class="headerlink" title="标注普通数据集"></a>标注普通数据集</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><ul><li><p>是图片文件和它对应的json标注文件，需要把这些.json标注转为.txt。之后在分别复制到训练集下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Program Files\数据集\PNG\12.02&gt; <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: D:\Program Files\数据集\PNG\12.02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a----         2025/1/20     17:42        8872155 IMG_0721.json</span><br><span class="line">-a----         2025/1/20     17:44        6337944 IMG_0721.PNG</span><br><span class="line">-a----         2025/1/20     17:49        8872155 IMG_0722.json</span><br><span class="line">-a----         2025/1/20     17:48        6392482 IMG_0722.PNG</span><br><span class="line">-a----         2025/1/20     17:51        8872155 IMG_0723.json</span><br><span class="line">-a----         2025/1/20     17:46        6293090 IMG_0723.PNG</span><br><span class="line">-a----         2025/1/20     17:56        8872155 IMG_0724.json</span><br><span class="line">......(省略)</span><br></pre></td></tr></table></figure></li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该脚本实现划分 将以.json格式标注过的数据集转成.txt格式 并将这些文件构建成训练目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路径</span></span><br><span class="line">image_dir = <span class="string">r&quot;D:\数据集\PNG\12.02&quot;</span>  <span class="comment"># 原始图片目录</span></span><br><span class="line">label_output_dir = <span class="string">r&quot;D:\Program Files\road_snow\training_set\labels&quot;</span></span><br><span class="line">image_output_dir = <span class="string">r&quot;D:\Program Files\road_snow\training_set\images&quot;</span></span><br><span class="line">os.makedirs(label_output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(image_output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">suffix_file = [<span class="string">&quot;.PNG&quot;</span>,<span class="string">&quot;.JPG&quot;</span>,<span class="string">&quot;.JPEG&quot;</span>,<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义类别</span></span><br><span class="line">classes = [<span class="string">&#x27;water&#x27;</span>, <span class="string">&#x27;snow&#x27;</span>, <span class="string">&#x27;ice&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析 JSON 并转换为 YOLO 格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_yolo</span>(<span class="params">json_file, img_width, img_height</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    </span><br><span class="line">    yolo_labels = []</span><br><span class="line">    <span class="keyword">for</span> shape <span class="keyword">in</span> data[<span class="string">&#x27;shapes&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> shape[<span class="string">&#x27;shape_type&#x27;</span>] == <span class="string">&#x27;polygon&#x27;</span>:</span><br><span class="line">            label = shape[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> classes:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            class_id = classes.index(label)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算多边形的外接矩形</span></span><br><span class="line">            points = shape[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">            x_coords = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> points]</span><br><span class="line">            y_coords = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> points]</span><br><span class="line">            x_min, x_max = <span class="built_in">min</span>(x_coords), <span class="built_in">max</span>(x_coords)</span><br><span class="line">            y_min, y_max = <span class="built_in">min</span>(y_coords), <span class="built_in">max</span>(y_coords)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 转换为 YOLO 格式</span></span><br><span class="line">            x_center = (x_min + x_max) / <span class="number">2</span> / img_width</span><br><span class="line">            y_center = (y_min + y_max) / <span class="number">2</span> / img_height</span><br><span class="line">            width = (x_max - x_min) / img_width</span><br><span class="line">            height = (y_max - y_min) / img_height</span><br><span class="line">            yolo_labels.append(<span class="string">f&quot;<span class="subst">&#123;class_id&#125;</span> <span class="subst">&#123;x_center&#125;</span> <span class="subst">&#123;y_center&#125;</span> <span class="subst">&#123;width&#125;</span> <span class="subst">&#123;height&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> yolo_labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片和标签</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_data</span>(<span class="params">img_file, labels</span>):</span><br><span class="line">    base_name = os.path.basename(img_file).replace(<span class="string">&quot;.PNG&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.JPG&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.JPEG&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> suffix_file:</span><br><span class="line">        <span class="keyword">if</span> os.path.basename(img_file).endswith(i):</span><br><span class="line">            img_output_path = os.path.join(image_output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    label_output_path = os.path.join(label_output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(label_output_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>.join(labels))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复制图片</span></span><br><span class="line">    shutil.copy(img_file, img_output_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有图片文件</span></span><br><span class="line">image_paths = []</span><br><span class="line"><span class="keyword">for</span> img_file <span class="keyword">in</span> os.listdir(image_dir):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> suffix_file:</span><br><span class="line">        <span class="keyword">if</span> img_file.endswith(i):</span><br><span class="line">            json_file = os.path.join(image_dir, img_file.replace(<span class="string">&quot;.PNG&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.JPG&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.JPEG&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.json&quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(json_file):<span class="comment">#如果存在对应的json则操作</span></span><br><span class="line">                <span class="comment"># 假设图片分辨率为 2400x1600，可以根据实际情况调整</span></span><br><span class="line">                img_width, img_height = <span class="number">2400</span>, <span class="number">1600</span></span><br><span class="line">                labels = convert_to_yolo(json_file, img_width, img_height)</span><br><span class="line">                save_data(os.path.join(image_dir, img_file), labels)</span><br><span class="line">                image_paths.append(os.path.join(image_output_dir, img_file))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 手动划分训练集和验证集</span></span><br><span class="line"><span class="string">random.shuffle(image_paths)</span></span><br><span class="line"><span class="string">split_idx = int(len(image_paths) * 0.8)</span></span><br><span class="line"><span class="string">train_imgs, val_imgs = image_paths[:split_idx], image_paths[split_idx:]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建训练集和验证集目录</span></span><br><span class="line"><span class="string">train_dir = os.path.join(image_output_dir, &quot;train&quot;)</span></span><br><span class="line"><span class="string">val_dir = os.path.join(image_output_dir, &quot;val&quot;)</span></span><br><span class="line"><span class="string">os.makedirs(train_dir, exist_ok=True)</span></span><br><span class="line"><span class="string">os.makedirs(val_dir, exist_ok=True)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 移动文件</span></span><br><span class="line"><span class="string">for img_file in train_imgs:</span></span><br><span class="line"><span class="string">    shutil.move(img_file, os.path.join(train_dir, os.path.basename(img_file)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for img_file in val_imgs:</span></span><br><span class="line"><span class="string">    shutil.move(img_file, os.path.join(val_dir, os.path.basename(img_file)))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据集划分完成！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>创建训练目录<code>yolov8m</code>，在该目录下创建<code>train.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载预训练的 YOLOv8 模型</span></span><br><span class="line">model = YOLO(<span class="string">r&quot;E:\education\road_snow\yolov11m\yolo11m.pt&quot;</span>)  <span class="comment"># 这里可以根据你的需求替换为其他版本的 YOLO 模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置训练参数</span></span><br><span class="line">train_args = &#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;yolov11m.yaml&#x27;</span>,  <span class="comment"># 数据集配置文件路径</span></span><br><span class="line">    <span class="string">&#x27;epochs&#x27;</span>: <span class="number">100</span>,  <span class="comment"># 训练的轮数</span></span><br><span class="line">    <span class="string">&#x27;batch&#x27;</span>: <span class="number">24</span>,  <span class="comment"># 每个批次的大小，适当调整（16到32之间）</span></span><br><span class="line">    <span class="string">&#x27;imgsz&#x27;</span>: <span class="number">640</span>,  <span class="comment"># 输入图像的大小</span></span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,  <span class="comment"># 使用 GPU 训练，如果没有 GPU 可以改为 &#x27;cpu&#x27;</span></span><br><span class="line">    <span class="string">&#x27;project&#x27;</span>: <span class="string">&#x27;runs/detect&#x27;</span>,  <span class="comment"># 存储训练结果的目录</span></span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;train3&#x27;</span>,  <span class="comment"># 训练结果保存的子目录</span></span><br><span class="line">    <span class="string">&#x27;save&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 是否保存模型</span></span><br><span class="line">    <span class="string">&#x27;save_period&#x27;</span>: -<span class="number">1</span>,  <span class="comment"># 每隔多少轮保存一次模型</span></span><br><span class="line">    <span class="string">&#x27;verbose&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 是否打印详细日志</span></span><br><span class="line">    <span class="string">&#x27;workers&#x27;</span>: <span class="number">0</span>,  <span class="comment"># 数据加载器的工作线程数</span></span><br><span class="line">    <span class="string">&#x27;optimizer&#x27;</span>: <span class="string">&#x27;AdamW&#x27;</span>,  <span class="comment"># 这里选择自动，还可以选择 AdamW 优化器</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;lr0&#x27;</span>: <span class="number">0.001</span>,  <span class="comment"># 初始学习率，适当降低初始学习率，增加学习率衰减率。</span></span><br><span class="line">    <span class="string">&#x27;lrf&#x27;</span>: <span class="number">0.01</span>,  <span class="comment"># 学习率衰减率，更激进，加快收敛。</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;warmup_epochs&#x27;</span>: <span class="number">3</span>,  <span class="comment"># 预热的轮数，适当降低预热时间</span></span><br><span class="line">    <span class="string">&#x27;box&#x27;</span>: <span class="number">5.0</span>,  <span class="comment"># 训练的框回归损失权重，越低越平衡归框任务。</span></span><br><span class="line">    <span class="string">&#x27;cls&#x27;</span>: <span class="number">1.0</span>,  <span class="comment"># 类别损失权重，越高越强化分类任务</span></span><br><span class="line">    <span class="string">&#x27;dfl&#x27;</span>: <span class="number">2.0</span>,  <span class="comment"># 关键点损失权重</span></span><br><span class="line">    <span class="string">&#x27;pose&#x27;</span>: <span class="number">12.0</span>,  <span class="comment"># 姿态估计损失权重</span></span><br><span class="line">    <span class="string">&#x27;nbs&#x27;</span>: <span class="number">64</span>,  <span class="comment"># 批次大小（此参数不会影响实际训练，但用于计算资源）</span></span><br><span class="line">    <span class="string">&#x27;weight_decay&#x27;</span> : <span class="number">0.01</span>,  <span class="comment"># 权重衰减</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;split&#x27;</span>: <span class="string">&quot;0.8 0.2&quot;</span>,  <span class="comment"># 训练集和验证集的比例</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;warmup_epochs&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;label_smoothing&#x27;</span>: <span class="number">0.05</span>,  <span class="comment"># 标签平滑</span></span><br><span class="line">       </span><br><span class="line">    <span class="string">&#x27;close_mosaic&#x27;</span>: <span class="number">15</span>, <span class="comment"># 最后15epoch关闭mosaic（稳定收敛）</span></span><br><span class="line">    <span class="string">&#x27;augment&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;patience&#x27;</span>: <span class="number">10</span>,  <span class="comment"># 早停策略的耐心值，连续10个epoch验证集性能无提升则停止训练</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;persist&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># **保持预处理状态加速训练**</span></span><br><span class="line">    <span class="string">&#x27;amp&#x27;</span>: <span class="literal">True</span>,      <span class="comment"># **启用自动混合精度**</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印训练参数</span></span><br><span class="line"><span class="built_in">print</span>(train_args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">train_results = model.train(**train_args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出训练结果</span></span><br><span class="line"><span class="built_in">print</span>(train_results)</span><br></pre></td></tr></table></figure><h2 id="模型评估与优化"><a href="#模型评估与优化" class="headerlink" title="模型评估与优化"></a>模型评估与优化</h2><h3 id="效果图展示"><a href="#效果图展示" class="headerlink" title="效果图展示"></a>效果图展示</h3><p><img src="/assets/IMG_6163.jpg" alt="IMG_6163"></p><p><img src="/assets/IMG_5882.jpg" alt="IMG_5882"></p><p><img src="/assets/IMG_4644.jpg" alt="IMG_4644"></p><p><img src="/assets/IMG_0814.jpg" alt="IMG_0814"></p><p><img src="/assets/IMG_0730.jpg" alt="IMG_0730"></p><p><img src="/assets/IMG_0724.jpg" alt="IMG_0724"></p><p><img src="/assets/IMG_0666.jpg" alt="IMG_0666"></p><p><img src="/assets/IMG_0607.jpg" alt="IMG_0607"></p><p><img src="/assets/IMG_0569.jpg" alt="IMG_0569"></p><h2 id="危险评估算法设计"><a href="#危险评估算法设计" class="headerlink" title="危险评估算法设计"></a>危险评估算法设计</h2><p>面向对象设计的，可作为后端文件import导入使用</p><p><code>DangerDetectApi.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> shapely.geometry <span class="keyword">import</span> box</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DangerDetector</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;路面危险评估API核心类(精确面积计算版)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model_path: <span class="built_in">str</span>, conf_threshold: <span class="built_in">float</span> = <span class="number">0.5</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = YOLO(model_path)</span><br><span class="line">        <span class="variable language_">self</span>.conf_threshold = conf_threshold</span><br><span class="line">        <span class="variable language_">self</span>.class_map = &#123;<span class="number">0</span>: <span class="string">&quot;snow&quot;</span>, <span class="number">1</span>: <span class="string">&quot;ice&quot;</span>&#125;</span><br><span class="line">        <span class="variable language_">self</span>.priority = &#123;<span class="string">&quot;ice&quot;</span>: <span class="number">3</span>, <span class="string">&quot;snow&quot;</span>: <span class="number">2</span>, <span class="string">&quot;water&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        <span class="variable language_">self</span>.messages = &#123;</span><br><span class="line">            <span class="string">&quot;ice&quot;</span>: <span class="string">&quot;⚠️ 路面存在结冰区域，请保持车距并使用防滑链！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;snow&quot;</span>: <span class="string">&quot;❄️ 路面存在积雪，请保持车距！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;water&quot;</span>: <span class="string">&quot;💧 路面湿滑，建议减速慢行！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;safe&quot;</span>: <span class="string">&quot;✅ 路面状况安全，可正常行驶&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_calculate_danger_level</span>(<span class="params">self, results, image_width: <span class="built_in">int</span>, image_height: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;优化后的危险评估算法&quot;&quot;&quot;</span></span><br><span class="line">        detections = []</span><br><span class="line">        <span class="keyword">if</span> results.boxes:</span><br><span class="line">            boxes = results.boxes.cpu().numpy()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(boxes.xyxy)):</span><br><span class="line">                x1, y1, x2, y2 = boxes.xyxy[i]</span><br><span class="line">                conf = boxes.conf[i]</span><br><span class="line">                cls_id = <span class="built_in">int</span>(boxes.cls[i])</span><br><span class="line">                area = (x2 - x1) * (y2 - y1)</span><br><span class="line">                detections.append(&#123;</span><br><span class="line">                    <span class="string">&quot;class&quot;</span>: <span class="variable language_">self</span>.class_map[cls_id],</span><br><span class="line">                    <span class="string">&quot;coords&quot;</span>: (x1, y1, x2, y2),</span><br><span class="line">                    <span class="string">&quot;confidence&quot;</span>: conf,</span><br><span class="line">                    <span class="string">&quot;area&quot;</span>: area</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 优化排序逻辑</span></span><br><span class="line">        sorted_detections = <span class="built_in">sorted</span>(</span><br><span class="line">            detections,</span><br><span class="line">            key=<span class="keyword">lambda</span> x: (</span><br><span class="line">                -<span class="variable language_">self</span>.priority.get(x[<span class="string">&quot;class&quot;</span>], <span class="number">0</span>),</span><br><span class="line">                -x[<span class="string">&quot;area&quot;</span>],</span><br><span class="line">                -x[<span class="string">&quot;confidence&quot;</span>]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 精确面积计算逻辑</span></span><br><span class="line">        covered_areas = []</span><br><span class="line">        ice_area = snow_area = water_area = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> detection <span class="keyword">in</span> sorted_detections:</span><br><span class="line">            cls = detection[<span class="string">&quot;class&quot;</span>]</span><br><span class="line">            x1, y1, x2, y2 = detection[<span class="string">&quot;coords&quot;</span>]</span><br><span class="line">            current_box = box(x1, y1, x2, y2)</span><br><span class="line">            current_polygon = current_box</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算有效未覆盖区域</span></span><br><span class="line">            valid_area = current_polygon</span><br><span class="line">            <span class="keyword">for</span> existing <span class="keyword">in</span> covered_areas:</span><br><span class="line">                <span class="keyword">if</span> valid_area.intersects(existing[<span class="string">&quot;geometry&quot;</span>]):</span><br><span class="line">                    valid_area = valid_area.difference(existing[<span class="string">&quot;geometry&quot;</span>])</span><br><span class="line">            </span><br><span class="line">            effective_area = valid_area.area</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> effective_area &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 扣除被覆盖区域的面积</span></span><br><span class="line">                <span class="keyword">for</span> existing <span class="keyword">in</span> covered_areas:</span><br><span class="line">                    <span class="keyword">if</span> current_polygon.intersects(existing[<span class="string">&quot;geometry&quot;</span>]):</span><br><span class="line">                        overlap = existing[<span class="string">&quot;geometry&quot;</span>].intersection(current_polygon)</span><br><span class="line">                        <span class="keyword">if</span> overlap.area &gt; <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">if</span> existing[<span class="string">&quot;class&quot;</span>] == <span class="string">&quot;ice&quot;</span>:</span><br><span class="line">                                ice_area -= overlap.area</span><br><span class="line">                            <span class="keyword">elif</span> existing[<span class="string">&quot;class&quot;</span>] == <span class="string">&quot;snow&quot;</span>:</span><br><span class="line">                                snow_area -= overlap.area</span><br><span class="line">                            <span class="keyword">elif</span> existing[<span class="string">&quot;class&quot;</span>] == <span class="string">&quot;water&quot;</span>:</span><br><span class="line">                                water_area -= overlap.area</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 添加新区域面积</span></span><br><span class="line">                <span class="keyword">if</span> cls == <span class="string">&quot;ice&quot;</span>:</span><br><span class="line">                    ice_area += effective_area</span><br><span class="line">                <span class="keyword">elif</span> cls == <span class="string">&quot;snow&quot;</span>:</span><br><span class="line">                    snow_area += effective_area</span><br><span class="line">                <span class="keyword">elif</span> cls == <span class="string">&quot;water&quot;</span>:</span><br><span class="line">                    water_area += effective_area</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 合并覆盖区域</span></span><br><span class="line">                new_geometry = current_polygon</span><br><span class="line">                <span class="keyword">for</span> existing <span class="keyword">in</span> covered_areas:</span><br><span class="line">                    <span class="keyword">if</span> new_geometry.intersects(existing[<span class="string">&quot;geometry&quot;</span>]):</span><br><span class="line">                        new_geometry = new_geometry.union(existing[<span class="string">&quot;geometry&quot;</span>])</span><br><span class="line">                covered_areas.append(&#123;</span><br><span class="line">                    <span class="string">&quot;class&quot;</span>: cls,</span><br><span class="line">                    <span class="string">&quot;geometry&quot;</span>: new_geometry,</span><br><span class="line">                    <span class="string">&quot;confidence&quot;</span>: detection[<span class="string">&quot;confidence&quot;</span>]</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 后续逻辑保持不变</span></span><br><span class="line">        total_pixels = image_width * image_height</span><br><span class="line">        weighted_ice = ice_area </span><br><span class="line">        weighted_snow = snow_area </span><br><span class="line">        weighted_water = water_area </span><br><span class="line">        danger_value = (weighted_ice + weighted_snow + weighted_water) / total_pixels</span><br><span class="line">        </span><br><span class="line">        thresholds = &#123;</span><br><span class="line">            <span class="string">&quot;high&quot;</span>: <span class="number">0.7</span> ,</span><br><span class="line">            <span class="string">&quot;medium&quot;</span>: <span class="number">0.4</span> ,</span><br><span class="line">            <span class="string">&quot;low&quot;</span>: <span class="number">0.2</span> </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> danger_value &gt;= thresholds[<span class="string">&quot;high&quot;</span>]:</span><br><span class="line">            danger_level = <span class="string">&quot;高度危险&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> danger_value &gt;= thresholds[<span class="string">&quot;medium&quot;</span>]:</span><br><span class="line">            danger_level = <span class="string">&quot;中度危险&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> danger_value &gt;= thresholds[<span class="string">&quot;low&quot;</span>]:</span><br><span class="line">            danger_level = <span class="string">&quot;轻度危险&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            danger_level = <span class="string">&quot;安全&quot;</span></span><br><span class="line"></span><br><span class="line">        dominant_class = <span class="built_in">max</span>(</span><br><span class="line">            [<span class="string">&quot;ice&quot;</span>, <span class="string">&quot;snow&quot;</span>, <span class="string">&quot;water&quot;</span>],</span><br><span class="line">            key=<span class="keyword">lambda</span> x: (ice_area, snow_area, water_area)[[<span class="string">&quot;ice&quot;</span>, <span class="string">&quot;snow&quot;</span>, <span class="string">&quot;water&quot;</span>].index(x)]</span><br><span class="line">        )</span><br><span class="line">        message = <span class="variable language_">self</span>.messages[dominant_class] <span class="keyword">if</span> danger_level != <span class="string">&quot;安全&quot;</span> <span class="keyword">else</span> <span class="variable language_">self</span>.messages[<span class="string">&quot;safe&quot;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> danger_level, message</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保持原有predict方法不变</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict_from_image</span>(<span class="params">self, image_path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从图片文件路径进行预测</span></span><br><span class="line"><span class="string">        :param image_path: 图片文件路径</span></span><br><span class="line"><span class="string">        :return: 包含危险等级和提示信息的字典</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        results = <span class="variable language_">self</span>.model.predict(</span><br><span class="line">            source=image_path,</span><br><span class="line">            save=<span class="literal">True</span>,</span><br><span class="line">            conf=<span class="variable language_">self</span>.conf_threshold</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取图片尺寸</span></span><br><span class="line">        img = results[<span class="number">0</span>].orig_img</span><br><span class="line">        h, w = img.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算危险等级</span></span><br><span class="line">        danger_level, message = <span class="variable language_">self</span>._calculate_danger_level(results[<span class="number">0</span>], w, h)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;danger_level&quot;</span>: danger_level,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: message,</span><br><span class="line">            <span class="string">&quot;image_size&quot;</span>: (w, h),</span><br><span class="line">            <span class="string">&quot;results&quot;</span>: results</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict_from_array</span>(<span class="params">self, image_array : np.ndarray</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从numpy数组进行预测</span></span><br><span class="line"><span class="string">        :param image_array: 输入图像数组 (HWC格式)</span></span><br><span class="line"><span class="string">        :return: 包含危险等级和提示信息的字典</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        results = <span class="variable language_">self</span>.model.predict(</span><br><span class="line">            source=image_array,</span><br><span class="line">            save=<span class="literal">False</span>,</span><br><span class="line">            conf=<span class="variable language_">self</span>.conf_threshold</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取图片尺寸</span></span><br><span class="line">        h, w = image_array.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算危险等级</span></span><br><span class="line">        danger_level, message = <span class="variable language_">self</span>._calculate_danger_level(results[<span class="number">0</span>], w, h)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;danger_level&quot;</span>: danger_level,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: message,</span><br><span class="line">            <span class="string">&quot;image_size&quot;</span>: (w, h),</span><br><span class="line">            <span class="string">&quot;results&quot;</span>: results</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用示例：</p><p><code>main.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DangerDetectApi <span class="keyword">import</span> DangerDetector</span><br><span class="line"></span><br><span class="line">model_path = <span class="string">r&quot;E:\education\road_snow\yolov11m\runs\detect\train38\weights\best.pt&quot;</span> <span class="comment"># 模型路径</span></span><br><span class="line">conf_threshold = <span class="number">0.5</span> <span class="comment"># 置信度阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化检测器</span></span><br><span class="line">detector = DangerDetector(model_path,conf_threshold)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件路径预测</span></span><br><span class="line">result = detector.predict_from_image(<span class="string">r&quot;E:\education\dataset\text_dataset\测试集_自己拍的图片\ce5d5374c7789e445506ca01511f09d3.mp4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&#x27;danger_level&#x27;</span>], result[<span class="string">&#x27;message&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/assets/image-20250220011613284.png" alt="image-20250220011613284"></p><h2 id="前端展示代码"><a href="#前端展示代码" class="headerlink" title="前端展示代码"></a>前端展示代码</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><code>static/css/styles.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0056b3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#result</span> <span class="selector-tag">img</span>, <span class="selector-id">#result</span> <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>templates/index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/styles.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>YOLOv11m Object Detection<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>YOLOv11m Object Detection<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;upload-form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*,video/*&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload and Predict<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Prediction Result:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;result-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Result will be displayed here&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%; display: none;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;result-video&quot;</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%; display: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;upload-form&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> resultImage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result-image&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> resultVideo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result-video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">        form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="title function_">async</span> (e) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!file) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;Please select a file.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/upload&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">body</span>: formData,</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (result.<span class="property">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(result.<span class="property">error</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 添加时间戳避免缓存问题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> resultPath = <span class="string">`<span class="subst">$&#123;result.result&#125;</span>?t=<span class="subst">$&#123;timestamp&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;image/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">src</span> = resultPath;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 清除视频源</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;video/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">src</span> = resultPath;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 清除图片源</span></span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="title function_">load</span>(); <span class="comment">// 重新加载视频</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;Prediction failed: &#x27;</span> + error.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>yolov8n/app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_from_directory, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;static/uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>] = <span class="string">&#x27;static/results&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保文件夹存在</span></span><br><span class="line">os.makedirs(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>], exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict_yolov11x</span>(<span class="params">input_path, file</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 yolov11x 模型路径</span></span><br><span class="line">        model = YOLO(<span class="string">r&#x27;E:\education\road_snow\yolov11m\runs\detect\train38\weights\best.pt&#x27;</span>)</span><br><span class="line">        results = model.predict(</span><br><span class="line">            source=input_path,</span><br><span class="line">            project=app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>],</span><br><span class="line">            name=os.path.splitext(file.filename)[<span class="number">0</span>],</span><br><span class="line">            save=<span class="literal">True</span>,</span><br><span class="line">            exist_ok=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        result_dir = <span class="built_in">str</span>(results[<span class="number">0</span>].save_dir)</span><br><span class="line">        result_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(result_dir) <span class="keyword">if</span> f.endswith((<span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result_files:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;No output file generated.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result_filename = result_files[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保 ffmpeg 在系统 PATH 中</span></span><br><span class="line">        <span class="keyword">if</span> result_filename.endswith(<span class="string">&#x27;.avi&#x27;</span>):</span><br><span class="line">            result_filename_mp4 = os.path.splitext(result_filename)[<span class="number">0</span>] + <span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line">            avi_path = os.path.join(result_dir, result_filename)</span><br><span class="line">            mp4_path = os.path.join(result_dir, result_filename_mp4)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用 ffmpeg 进行转换</span></span><br><span class="line">            subprocess.run([<span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, avi_path, <span class="string">&#x27;-vcodec&#x27;</span>, <span class="string">&#x27;libx264&#x27;</span>, <span class="string">&#x27;-crf&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;-preset&#x27;</span>, <span class="string">&#x27;fast&#x27;</span>, mp4_path], check=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            os.remove(avi_path)  <span class="comment"># 删除原 .avi 文件</span></span><br><span class="line">            result_filename = result_filename_mp4</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Result saved to: <span class="subst">&#123;result_dir&#125;</span>\&#123;result_filename&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;/static/results/<span class="subst">&#123;os.path.basename(result_dir)&#125;</span>/<span class="subst">&#123;result_filename&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error in predict_yolov11x: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No file uploaded&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No selected file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安全处理文件名</span></span><br><span class="line">    filename = secure_filename(file.filename)</span><br><span class="line">    input_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file.save(input_path)</span><br><span class="line">        result_url = predict_yolov11x(input_path, file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result_url:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Prediction failed&#x27;</span>&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;result&#x27;</span>: result_url&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error in upload_file: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static/&lt;path:path&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serve_static</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">&#x27;static&#x27;</span>, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><p>即可在<code>http://127.0.0.1:5000/</code>与前端交互</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> python </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> Yolo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
