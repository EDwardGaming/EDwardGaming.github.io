<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaClass_String</title>
      <link href="/2025/03/08/JavaClass-String/"/>
      <url>/2025/03/08/JavaClass-String/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-String-类"><a href="#Java-String-类" class="headerlink" title="Java String 类"></a>Java String 类</h1><p>在 Java 中，<code>String</code> 类是<strong>最常用的类之一</strong>，用于表示和操作字符串。<code>String</code> 类在 <code>java.lang</code> 包中，不需要导入就能直接使用。今天我们就来深入了解 <code>String</code> 类的用法、常见方法、特点和注意事项！🚀</p><hr><h2 id="1️⃣-String-基本概念"><a href="#1️⃣-String-基本概念" class="headerlink" title="1️⃣ String 基本概念"></a><strong>1️⃣ String 基本概念</strong></h2><ul><li><strong><code>String</code> 是引用数据类型，但表现像基本数据类型一样简单。</strong></li><li><strong><code>String</code> 对象是不可变的（immutable）</strong>，一旦创建就无法修改。</li><li><strong><code>String</code> 底层是一个 <code>char[]</code> 字符数组</strong>，用于存储字符串内容。</li></ul><p><strong>声明字符串的方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用双引号直接赋值（推荐）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello, JJ Lin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造方法（不推荐）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello, JJ Lin&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="2️⃣-String-的不可变性（Immutable）"><a href="#2️⃣-String-的不可变性（Immutable）" class="headerlink" title="2️⃣ String 的不可变性（Immutable）"></a><strong>2️⃣ String 的不可变性（Immutable）</strong></h2><p><code>String</code> 对象内容不可变，每次修改都会创建一个新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringImmutable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line">        str = str + <span class="string">&quot; - Not for anyone&quot;</span>;</span><br><span class="line">        System.out.println(str);  <span class="comment">// 新创建了一个字符串对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3️⃣-常用方法"><a href="#3️⃣-常用方法" class="headerlink" title="3️⃣ 常用方法"></a><strong>3️⃣ 常用方法</strong></h2><h3 id="🔹-字符串长度"><a href="#🔹-字符串长度" class="headerlink" title="🔹 字符串长度"></a><strong>🔹 字符串长度</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;林俊杰&quot;</span>;</span><br><span class="line">System.out.println(str.length());  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串拼接"><a href="#🔹-字符串拼接" class="headerlink" title="🔹 字符串拼接"></a><strong>🔹 字符串拼接</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot; Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str1.concat(str2);   <span class="comment">// 推荐</span></span><br><span class="line">System.out.println(result);          <span class="comment">// JJ Lin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 + 运算符（常用）</span></span><br><span class="line">System.out.println(str1 + str2);     <span class="comment">// JJ Lin</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串比较"><a href="#🔹-字符串比较" class="headerlink" title="🔹 字符串比较"></a><strong>🔹 字符串比较</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JJ Lin&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);             <span class="comment">// true（字符串常量池，引用相同）</span></span><br><span class="line">System.out.println(str1 == str3);             <span class="comment">// false（new 创建的对象地址不同）</span></span><br><span class="line">System.out.println(str1.equals(str3));        <span class="comment">// true（比较内容）</span></span><br><span class="line">System.out.println(str1.equalsIgnoreCase(<span class="string">&quot;jj lin&quot;</span>));  <span class="comment">// true（忽略大小写比较）</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串查找"><a href="#🔹-字符串查找" class="headerlink" title="🔹 字符串查找"></a><strong>🔹 字符串查找</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Not for anyone&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否包含</span></span><br><span class="line">System.out.println(str.contains(<span class="string">&quot;anyone&quot;</span>));      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符首次出现索引</span></span><br><span class="line">System.out.println(str.indexOf(<span class="string">&#x27;o&#x27;</span>));            <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符最后出现索引</span></span><br><span class="line">System.out.println(str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>));        <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断以什么开头/结尾</span></span><br><span class="line">System.out.println(str.startsWith(<span class="string">&quot;Not&quot;</span>));       <span class="comment">// true</span></span><br><span class="line">System.out.println(str.endsWith(<span class="string">&quot;one&quot;</span>));         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串截取"><a href="#🔹-字符串截取" class="headerlink" title="🔹 字符串截取"></a><strong>🔹 字符串截取</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引 3 开始截取</span></span><br><span class="line">System.out.println(str.substring(<span class="number">3</span>));          <span class="comment">// Lin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取索引 0 到 1（不包含 2）</span></span><br><span class="line">System.out.println(str.substring(<span class="number">0</span>, <span class="number">2</span>));       <span class="comment">// JJ</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串替换"><a href="#🔹-字符串替换" class="headerlink" title="🔹 字符串替换"></a><strong>🔹 字符串替换</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line">System.out.println(str.replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;L&#x27;</span>));       <span class="comment">// LL Lin</span></span><br><span class="line">System.out.println(str.replaceAll(<span class="string">&quot;Lin&quot;</span>, <span class="string">&quot;Chou&quot;</span>)); <span class="comment">// JJ Chou</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串大小写转换"><a href="#🔹-字符串大小写转换" class="headerlink" title="🔹 字符串大小写转换"></a><strong>🔹 字符串大小写转换</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line">System.out.println(str.toUpperCase());         <span class="comment">// JJ LIN</span></span><br><span class="line">System.out.println(str.toLowerCase());         <span class="comment">// jj lin</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-去除首尾空格"><a href="#🔹-去除首尾空格" class="headerlink" title="🔹 去除首尾空格"></a><strong>🔹 去除首尾空格</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  JJ Lin  &quot;</span>;</span><br><span class="line">System.out.println(str.trim());                <span class="comment">// &quot;JJ Lin&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串拆分"><a href="#🔹-字符串拆分" class="headerlink" title="🔹 字符串拆分"></a><strong>🔹 字符串拆分</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin, Jay Chou, Eason Chan&quot;</span>;</span><br><span class="line">String[] singers = str.split(<span class="string">&quot;, &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String singer : singers) &#123;</span><br><span class="line">    System.out.println(singer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin</span><br><span class="line">Jay Chou</span><br><span class="line">Eason Chan</span><br></pre></td></tr></table></figure><hr><h2 id="4️⃣-String-特点"><a href="#4️⃣-String-特点" class="headerlink" title="4️⃣ String 特点"></a><strong>4️⃣ String 特点</strong></h2><h3 id="🔹-字符串常量池（String-Pool）"><a href="#🔹-字符串常量池（String-Pool）" class="headerlink" title="🔹 字符串常量池（String Pool）"></a><strong>🔹 字符串常量池（String Pool）</strong></h3><p>Java 中字符串常量池是 JVM 内存中的一个特殊区域，专门存储字符串字面量，<strong>相同内容的字符串只存一份</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);      <span class="comment">// true，指向同一个常量池对象</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-new-创建字符串"><a href="#🔹-new-创建字符串" class="headerlink" title="🔹 new 创建字符串"></a><strong>🔹 <code>new</code> 创建字符串</strong></h3><p>使用 <code>new</code> 会在堆内存中创建一个新对象，即使内容相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JJ Lin&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);      <span class="comment">// false，不是同一个对象</span></span><br></pre></td></tr></table></figure><hr><h2 id="5️⃣-字符串格式化"><a href="#5️⃣-字符串格式化" class="headerlink" title="5️⃣ 字符串格式化"></a><strong>5️⃣ 字符串格式化</strong></h2><p>使用 <code>String.format()</code> 格式化字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;JJ Lin&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s is %d years old.&quot;</span>, name, age);</span><br><span class="line">System.out.println(formatted);        <span class="comment">// JJ Lin is 42 years old.</span></span><br></pre></td></tr></table></figure><hr><h2 id="6️⃣-字符串与其他类型转换"><a href="#6️⃣-字符串与其他类型转换" class="headerlink" title="6️⃣ 字符串与其他类型转换"></a><strong>6️⃣ 字符串与其他类型转换</strong></h2><h3 id="🔹-基本类型转字符串"><a href="#🔹-基本类型转字符串" class="headerlink" title="🔹 基本类型转字符串"></a><strong>🔹 基本类型转字符串</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(num);     <span class="comment">// &quot;100&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-字符串转基本类型"><a href="#🔹-字符串转基本类型" class="headerlink" title="🔹 字符串转基本类型"></a><strong>🔹 字符串转基本类型</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);      <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><hr><h2 id="7️⃣-String-和-StringBuilder-StringBuffer-区别"><a href="#7️⃣-String-和-StringBuilder-StringBuffer-区别" class="headerlink" title="7️⃣ String 和 StringBuilder &#x2F; StringBuffer 区别"></a><strong>7️⃣ String 和 StringBuilder &#x2F; StringBuffer 区别</strong></h2><table><thead><tr><th>特性</th><th><code>String</code></th><th><code>StringBuilder</code></th><th><code>StringBuffer</code></th></tr></thead><tbody><tr><td><strong>可变性</strong></td><td>❌ 不可变</td><td>✅ 可变</td><td>✅ 可变</td></tr><tr><td><strong>线程安全</strong></td><td>❌ 非线程安全</td><td>❌ 非线程安全</td><td>✅ 线程安全</td></tr><tr><td><strong>性能</strong></td><td>🚀 性能较低</td><td>🚀🚀🚀 性能最高</td><td>🚀🚀 性能较高</td></tr></tbody></table><hr><h2 id="8️⃣String-类方法表"><a href="#8️⃣String-类方法表" class="headerlink" title="8️⃣String 类方法表"></a>8️⃣<code>String</code> 类方法表</h2><p><code>String</code> 类是 Java 中最常用的类之一，用于处理字符串。它是不可变的（immutable），每次对字符串的操作都会生成一个新的字符串对象。让我们来全面总结 <code>String</code> 类的常用方法吧！✨</p><hr><h3 id="🧱-1-创建字符串"><a href="#🧱-1-创建字符串" class="headerlink" title="🧱 1. 创建字符串"></a><strong>🧱 1. 创建字符串</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接赋值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello, Java!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符数组转换为字符串</span></span><br><span class="line"><span class="type">char</span>[] chars = &#123;<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br></pre></td></tr></table></figure><hr><h3 id="📏-2-获取信息"><a href="#📏-2-获取信息" class="headerlink" title="📏 2. 获取信息"></a><strong>📏 2. 获取信息</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>length()</code></td><td>获取字符串长度</td><td><code>&quot;Java&quot;.length()</code> → <code>4</code></td></tr><tr><td><code>charAt(int index)</code></td><td>获取指定索引处的字符</td><td><code>&quot;Java&quot;.charAt(1)</code> → <code>&#39;a&#39;</code></td></tr><tr><td><code>indexOf(String str)</code></td><td>查找子字符串首次出现位置</td><td><code>&quot;Hello&quot;.indexOf(&quot;l&quot;)</code> → <code>2</code></td></tr><tr><td><code>lastIndexOf(String str)</code></td><td>查找子字符串最后出现位置</td><td><code>&quot;Hello&quot;.lastIndexOf(&quot;l&quot;)</code> → <code>3</code></td></tr><tr><td><code>contains(CharSequence s)</code></td><td>判断是否包含子字符串</td><td><code>&quot;Java&quot;.contains(&quot;av&quot;)</code> → <code>true</code></td></tr><tr><td><code>startsWith(String prefix)</code></td><td>判断是否以指定前缀开头</td><td><code>&quot;Java&quot;.startsWith(&quot;Ja&quot;)</code> → <code>true</code></td></tr><tr><td><code>endsWith(String suffix)</code></td><td>判断是否以指定后缀结尾</td><td><code>&quot;Java&quot;.endsWith(&quot;va&quot;)</code> → <code>true</code></td></tr><tr><td><code>isEmpty()</code></td><td>判断字符串是否为空</td><td><code>&quot;&quot;.isEmpty()</code> → <code>true</code></td></tr><tr><td><code>isBlank()</code>（Java 11+）</td><td>判断是否为空或仅包含空白字符</td><td><code>&quot;   &quot;.isBlank()</code> → <code>true</code></td></tr></tbody></table><hr><h3 id="🔄-3-字符串转换"><a href="#🔄-3-字符串转换" class="headerlink" title="🔄 3. 字符串转换"></a><strong>🔄 3. 字符串转换</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>toUpperCase()</code></td><td>转换为大写</td><td><code>&quot;java&quot;.toUpperCase()</code> → <code>&quot;JAVA&quot;</code></td></tr><tr><td><code>toLowerCase()</code></td><td>转换为小写</td><td><code>&quot;JAVA&quot;.toLowerCase()</code> → <code>&quot;java&quot;</code></td></tr><tr><td><code>trim()</code></td><td>去除前后空格</td><td><code>&quot;  Java  &quot;.trim()</code> → <code>&quot;Java&quot;</code></td></tr><tr><td><code>strip()</code>（Java 11+）</td><td>去除前后空白字符，更强大</td><td><code>&quot;  Java  &quot;.strip()</code> → <code>&quot;Java&quot;</code></td></tr><tr><td><code>replace(String old, String new)</code></td><td>替换所有匹配的子字符串</td><td><code>&quot;Java&quot;.replace(&quot;a&quot;, &quot;o&quot;)</code> → <code>&quot;Jovo&quot;</code></td></tr><tr><td><code>replaceFirst(String regex, String replacement)</code></td><td>替换首个匹配项</td><td><code>&quot;Java Java&quot;.replaceFirst(&quot;a&quot;, &quot;o&quot;)</code> → <code>&quot;Jova Java&quot;</code></td></tr><tr><td><code>replaceAll(String regex, String replacement)</code></td><td>使用正则替换所有匹配项</td><td><code>&quot;Java Java&quot;.replaceAll(&quot;a&quot;, &quot;o&quot;)</code> → <code>&quot;Jovo Jovo&quot;</code></td></tr><tr><td><code>substring(int beginIndex)</code></td><td>截取从索引开始的字符串</td><td><code>&quot;Java&quot;.substring(1)</code> → <code>&quot;ava&quot;</code></td></tr><tr><td><code>substring(int begin, int end)</code></td><td>截取指定范围字符串（不含 end）</td><td><code>&quot;Java&quot;.substring(1, 3)</code> → <code>&quot;av&quot;</code></td></tr></tbody></table><hr><h3 id="🔗-4-拼接字符串"><a href="#🔗-4-拼接字符串" class="headerlink" title="🔗 4. 拼接字符串"></a><strong>🔗 4. 拼接字符串</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>concat(String str)</code></td><td>拼接字符串</td><td><code>&quot;Hello&quot;.concat(&quot; World&quot;)</code> → <code>&quot;Hello World&quot;</code></td></tr><tr><td><code>+</code>（加号运算符）</td><td>拼接字符串（最常用）</td><td><code>&quot;Hello&quot; + &quot; World&quot;</code> → <code>&quot;Hello World&quot;</code></td></tr><tr><td><code>String.join()</code>（Java 8+）</td><td>使用分隔符拼接多个字符串</td><td><code>String.join(&quot;, &quot;, &quot;Java&quot;, &quot;Python&quot;, &quot;C++&quot;)</code> → <code>&quot;Java, Python, C++&quot;</code></td></tr></tbody></table><hr><h3 id="📋-5-字符串拆分"><a href="#📋-5-字符串拆分" class="headerlink" title="📋 5. 字符串拆分"></a><strong>📋 5. 字符串拆分</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>split(String regex)</code></td><td>使用正则表达式拆分字符串</td><td><code>&quot;Java-Python-C++&quot;.split(&quot;-&quot;)</code> → <code>[&quot;Java&quot;, &quot;Python&quot;, &quot;C++&quot;]</code></td></tr><tr><td><code>split(String regex, int limit)</code></td><td>限制拆分次数</td><td><code>&quot;Java-Python-C++&quot;.split(&quot;-&quot;, 2)</code> → <code>[&quot;Java&quot;, &quot;Python-C++&quot;]</code></td></tr></tbody></table><hr><h3 id="🧪-6-比较字符串"><a href="#🧪-6-比较字符串" class="headerlink" title="🧪 6. 比较字符串"></a><strong>🧪 6. 比较字符串</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>equals(String another)</code></td><td>判断内容是否相同（区分大小写）</td><td><code>&quot;Java&quot;.equals(&quot;java&quot;)</code> → <code>false</code></td></tr><tr><td><code>equalsIgnoreCase(String another)</code></td><td>判断内容是否相同（不区分大小写）</td><td><code>&quot;Java&quot;.equalsIgnoreCase(&quot;java&quot;)</code> → <code>true</code></td></tr><tr><td><code>compareTo(String another)</code></td><td>按字典顺序比较字符串大小</td><td><code>&quot;Java&quot;.compareTo(&quot;Python&quot;)</code> → <code>-6</code></td></tr><tr><td><code>compareToIgnoreCase(String another)</code></td><td>按字典顺序比较（忽略大小写）</td><td><code>&quot;Java&quot;.compareToIgnoreCase(&quot;java&quot;)</code> → <code>0</code></td></tr></tbody></table><hr><h3 id="🔍-7-格式化字符串"><a href="#🔍-7-格式化字符串" class="headerlink" title="🔍 7. 格式化字符串"></a><strong>🔍 7. 格式化字符串</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>String.format(String format, Object... args)</code></td><td>格式化字符串</td><td><code>String.format(&quot;你好, %s!&quot;, &quot;Alice&quot;)</code> → <code>&quot;你好, Alice!&quot;</code></td></tr></tbody></table><hr><h3 id="🔠-8-转换为其他类型"><a href="#🔠-8-转换为其他类型" class="headerlink" title="🔠 8. 转换为其他类型"></a><strong>🔠 8. 转换为其他类型</strong></h3><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>toCharArray()</code></td><td>转换为字符数组</td><td><code>&quot;Java&quot;.toCharArray()</code> → <code>[&#39;J&#39;, &#39;a&#39;, &#39;v&#39;, &#39;a&#39;]</code></td></tr><tr><td><code>getBytes()</code></td><td>转换为字节数组</td><td><code>&quot;Java&quot;.getBytes()</code></td></tr></tbody></table><p>💡 <strong>总结：</strong></p><ul><li><code>String</code> 是最基础但最强大的类之一，必须熟练掌握。</li><li>理解不可变性和字符串池，有助于编写<strong>高效代码</strong>。</li><li>遇到<strong>频繁拼接或修改字符串</strong>，建议使用 <code>StringBuilder</code>。</li></ul><h1 id="Java-String-类-语法练习题"><a href="#Java-String-类-语法练习题" class="headerlink" title="Java String 类 语法练习题"></a>Java String 类 语法练习题</h1><h3 id="基础题"><a href="#基础题" class="headerlink" title="基础题"></a><strong>基础题</strong></h3><h4 id="1-判断一个字符串是否以-“Java”-开头且以-“-”-结尾。"><a href="#1-判断一个字符串是否以-“Java”-开头且以-“-”-结尾。" class="headerlink" title="1.判断一个字符串是否以 “Java” 开头且以 “!” 结尾。"></a>1.判断一个字符串是否以 “Java” 开头且以 “!” 结尾。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//判断一个字符串是否以 &quot;Java&quot; 开头且以 &quot;!&quot; 结尾。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Panduan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> input.startsWith(<span class="string">&quot;Java&quot;</span>) &amp;&amp; input.endsWith(<span class="string">&quot;!&quot;</span>) ? <span class="string">&quot;True&quot;</span>  : <span class="string">&quot;False&quot;</span>;</span><br><span class="line">        System.out.print(result);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Javaffffffffffffff!</span><br><span class="line">True</span><br><span class="line">fdssfa</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="2-将字符串中的所有空格去除。"><a href="#2-将字符串中的所有空格去除。" class="headerlink" title="2.将字符串中的所有空格去除。"></a>2.将字符串中的所有空格去除。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rmspace</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(input.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> fsdfsd    </span><br><span class="line">fsdfsd</span><br></pre></td></tr></table></figure><h4 id="3-将用户输入的字符串转换为大写，并输出长度。"><a href="#3-将用户输入的字符串转换为大写，并输出长度。" class="headerlink" title="3.将用户输入的字符串转换为大写，并输出长度。"></a>3.将用户输入的字符串转换为大写，并输出长度。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//将用户输入的字符串转换为大写，并输出长度。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToUppercase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> input.toUpperCase();</span><br><span class="line">        System.out.println(result + <span class="string">&quot; 长度: &quot;</span> +result.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ddddddddddddddSSSSSSSSSS</span><br><span class="line">DDDDDDDDDDDDDDSSSSSSSSSS 长度: 24</span><br></pre></td></tr></table></figure><h4 id="4-将一个以逗号分隔的字符串拆分，并逐行打印每个单词。"><a href="#4-将一个以逗号分隔的字符串拆分，并逐行打印每个单词。" class="headerlink" title="4.将一个以逗号分隔的字符串拆分，并逐行打印每个单词。"></a>4.将一个以逗号分隔的字符串拆分，并逐行打印每个单词。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//将一个以逗号分隔的字符串拆分，并逐行打印每个单词。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Splite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] result = input.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String strr : result)&#123;</span><br><span class="line">            System.out.println(strr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dsdf,fsdf,Lin,JJ</span><br><span class="line">dsdf</span><br><span class="line">fsdf</span><br><span class="line">Lin</span><br><span class="line">JJ</span><br></pre></td></tr></table></figure><h4 id="5-判断两个字符串是否相等（不区分大小写）。"><a href="#5-判断两个字符串是否相等（不区分大小写）。" class="headerlink" title="5.判断两个字符串是否相等（不区分大小写）。"></a>5.判断两个字符串是否相等（不区分大小写）。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">st1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">st2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        System.out.println(st1.equalsIgnoreCase(st2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="9-统计某个字符出现次数"><a href="#9-统计某个字符出现次数" class="headerlink" title="9.统计某个字符出现次数"></a>9.<strong>统计某个字符出现次数</strong></h4><p> 输入一个字符串和一个字符，统计这个字符在字符串中出现的次数。<br> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin is the best singer</span><br><span class="line">J</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符 &#x27;J&#x27; 出现了 2 次</span><br></pre></td></tr></table></figure><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Count</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入待检测的字符串: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入目标检测字符: &quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">Des</span> <span class="operator">=</span> Character.valueOf(scanner.nextLine().charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> count(input,Des);</span><br><span class="line">        System.out.println(<span class="string">&quot;它出现的次数是:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(String str, <span class="type">char</span> Des)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cou</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) == Des)&#123;</span><br><span class="line">                cou++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cou;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入待检测的字符串: vsadddddd hgjeqhvf jklll</span><br><span class="line">请输入目标检测字符: k</span><br><span class="line">它出现的次数是:1</span><br></pre></td></tr></table></figure><hr><h4 id="10-反转字符串"><a href="#10-反转字符串" class="headerlink" title="10.反转字符串"></a>10.<strong>反转字符串</strong></h4><p> 输入一个字符串，将它反转输出。<br> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">niL JJ</span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 输入一个字符串，将它反转输出。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> reverse(input);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">strlist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length() - <span class="number">1</span> ; i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            strlist.append(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strlist.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sssssssssssssllllllll</span><br><span class="line">llllllllsssssssssssss</span><br></pre></td></tr></table></figure><hr><h3 id="进阶题"><a href="#进阶题" class="headerlink" title="进阶题"></a><strong>进阶题</strong></h3><h4 id="1-首字母大写"><a href="#1-首字母大写" class="headerlink" title="1.首字母大写"></a>1.<strong>首字母大写</strong></h4><p>输入一个英文句子，将每个单词的首字母大写。</p><p><strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jj lin is amazing</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jj Lin Is Amazing</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Upper1st</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] strarrey = input.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(String str:strarrey)&#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">strr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">            <span class="type">String</span> <span class="variable">Upperfirst</span> <span class="operator">=</span> Character.toUpperCase(strr.charAt(<span class="number">0</span>)) + strr.substring(<span class="number">1</span>);</span><br><span class="line">            result.append(Upperfirst + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rr</span> <span class="operator">=</span> result.toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> rr.strip();</span><br><span class="line">        System.out.println(re);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sdgbkab hjkkj nnnnn kljlhjjjjjjjjk jjk</span><br><span class="line">Sdgbkab Hjkkj Nnnnn Kljlhjjjjjjjjk Jjk</span><br></pre></td></tr></table></figure><h5 id="发现的异常问题"><a href="#发现的异常问题" class="headerlink" title="发现的异常问题"></a><strong>发现的异常问题</strong></h5><p>当输入的字符串之间的空格的数量大于一时，如输入<code>ss  jj    jj</code>会报错:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.StringIndexOutOfBoundsException: index 0, length 0</span><br><span class="line">at java.base/java.lang.String.checkIndex(String.java:4567)</span><br><span class="line">at java.base/java.lang.AbstractStringBuilder.charAt(AbstractStringBuilder.java:351)</span><br><span class="line">at java.base/java.lang.StringBuilder.charAt(StringBuilder.java:91)</span><br><span class="line">at Upper1st.main(Upper1st.java:10)</span><br></pre></td></tr></table></figure><p><code>java.lang.StringIndexOutOfBoundsException: index 0, length 0</code>:字符串索引出界异常，原因是当输入字符串中存在多个连续空格时，<code>split(&quot; &quot;)</code> 会产生空字符串元素，例如输入 <code>&quot;kk jj jjj&quot;</code>，<code>split(&quot; &quot;)</code> 会将其分割为 <code>[&quot;kk&quot;, &quot;jj&quot;, &quot;&quot;, &quot;jjj&quot;]</code>，其中包含一个空字符串 <code>&quot;&quot;</code>。当遍历到这个空字符串时，执行 <code>strbuilder.charAt(0)</code> 就会抛出 <code>StringIndexOutOfBoundsException</code> 异常。</p><p><strong>解决方案</strong></p><p>在处理每个分割后的字符串之前，先检查其长度是否大于 0，如果长度大于 0 再进行首字母大写的操作。</p><h3 id="升级后的代码"><a href="#升级后的代码" class="headerlink" title="升级后的代码"></a>升级后的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Upper1st</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] strarrey = input.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(String str:strarrey)&#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">strbuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">            <span class="keyword">if</span> (str.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">Upperfirst</span> <span class="operator">=</span> Character.toUpperCase(strbuilder.charAt(<span class="number">0</span>)) + strbuilder.substring(<span class="number">1</span>);</span><br><span class="line">                result.append(Upperfirst + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rr</span> <span class="operator">=</span> result.toString().strip();</span><br><span class="line">        System.out.println(rr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dddddddd   kkkkkkkk kkk  </span><br><span class="line">Dddddddd Kkkkkkkk Kkk</span><br></pre></td></tr></table></figure><hr><h4 id="2-判断字符串是否是回文（正读和反读都一样）"><a href="#2-判断字符串是否是回文（正读和反读都一样）" class="headerlink" title="2.判断字符串是否是回文（正读和反读都一样）"></a>2.<strong>判断字符串是否是回文</strong>（正读和反读都一样）</h4><p> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是回文字符串</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsPalindrome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] input_list = input.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">is_Palindrome</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> (input_list.length)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; half; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (input_list[i].equals(input_list[input_list.length - <span class="number">1</span> - i]))&#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                is_Palindrome = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_Palindrome)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该输入字符串是回文的&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该输入字符串不是回文的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="4-字符串压缩（类似-LeetCode-压缩字符串题）"><a href="#4-字符串压缩（类似-LeetCode-压缩字符串题）" class="headerlink" title="4.字符串压缩（类似 LeetCode 压缩字符串题）"></a>4.<strong>字符串压缩</strong>（类似 LeetCode 压缩字符串题）</h4><p> 把连续相同字符用字符+次数的形式表示。<br> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaabbcddd</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a3b2c1d3</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 字符串压缩（类似 LeetCode 压缩字符串题）：把连续相同字符用字符+次数的形式表示。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountUS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        String[] input_array = input.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputB</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt; input_array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inputB.contains(input_array[i]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                inputB += input_array[i];</span><br><span class="line">                inputB += (input.lastIndexOf(input_array[i]) - input.indexOf(input_array[i])) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(inputB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaddddddddddddffffffffffffffff</span><br><span class="line">a12d12f16</span><br></pre></td></tr></table></figure><p><strong>问题分析</strong></p><ol><li>重复字符判断逻辑错误</li></ol><p>在代码中，使用 <code>inputB.contains(input_array[i])</code> 来判断当前字符是否已经处理过。这种判断方式有问题，因为只要字符在之前出现过就会跳过，而没有考虑字符是否连续。例如，当处理到第二个 <code>a</code> 时，由于 <code>inputB</code> 中已经包含了 <code>a</code>，就会跳过，导致后续的 <code>a</code> 不能正确统计。</p><ol start="2"><li>字符计数逻辑错误</li></ol><p>代码中使用 <code>input.lastIndexOf(input_array[i]) - input.indexOf(input_array[i]) + 1</code> 来计算字符的出现次数，这是错误的。这个表达式计算的是该字符在整个输入字符串中第一次出现和最后一次出现之间的距离加 1，而不是连续相同字符的个数。</p><p><strong>升级代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串压缩（类似 LeetCode 压缩字符串题）：把连续相同字符用字符+次数的形式表示。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountUS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 如果不是最后一个字符，且当前字符和下一个字符相同</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; input.length() - <span class="number">1</span> &amp;&amp; input.charAt(i) == input.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 将当前字符添加到结果中</span></span><br><span class="line">                result.append(input.charAt(i));</span><br><span class="line">                <span class="comment">// 将连续相同字符的个数添加到结果中</span></span><br><span class="line">                result.append(count);</span><br><span class="line">                <span class="comment">// 重置计数器</span></span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assass</span><br><span class="line">a1s2a1s2</span><br></pre></td></tr></table></figure><hr><h4 id="5-找出字符串中最长的单词"><a href="#5-找出字符串中最长的单词" class="headerlink" title="5.找出字符串中最长的单词"></a>5.<strong>找出字符串中最长的单词</strong></h4><p> <strong>输入示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JJ Lin is a phenomenal singer</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phenomenal</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Longest</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            String[] input = scanner.nextLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            Arrays.sort(input,(a,b) -&gt; b.length() - a.length());</span><br><span class="line">            System.out.println(input[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaaaa hkkjhjkh khhhhhhhhhhhhhhhhhhhhhhhh</span><br><span class="line">khhhhhhhhhhhhhhhhhhhhhhhh</span><br></pre></td></tr></table></figure><hr><h4 id="6-需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。"><a href="#6-需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。" class="headerlink" title="6.需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。"></a>6.<strong>需求：输入一个句子，统计其中大写字母、小写字母、数字和空格的数量。</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringAnalysis</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个句子：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">upperCount</span> <span class="operator">=</span> <span class="number">0</span>, lowerCount = <span class="number">0</span>, digitCount = <span class="number">0</span>, spaceCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> input.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(ch)) &#123;</span><br><span class="line">                upperCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(ch)) &#123;</span><br><span class="line">                lowerCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">                digitCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isWhitespace(ch)) &#123;</span><br><span class="line">                spaceCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;大写字母: %d，小写字母: %d，数字: %d，空格: %d%n&quot;</span>,</span><br><span class="line">                upperCount, lowerCount, digitCount, spaceCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="✨-Bonus：综合练习题"><a href="#✨-Bonus：综合练习题" class="headerlink" title="✨ Bonus：综合练习题"></a>✨ <strong>Bonus：综合练习题</strong></h3><p> 编写一个程序，实现一个简单的文本分析工具，功能包括：</p><ul><li>统计总字数</li><li>统计不同单词数量</li><li>找出出现频率最高的单词</li></ul><hr><p>💡 <strong>提示：</strong></p><ul><li>多用 <code>String</code> 的方法如 <code>charAt()</code>、<code>indexOf()</code>、<code>substring()</code>、<code>split()</code>、<code>replace()</code>、<code>toUpperCase()</code>、<code>equalsIgnoreCase()</code> 等。</li><li>可以用 <code>StringBuilder</code> 来处理字符串反转、拼接等操作，效率更高。</li><li>利用 <code>Map</code>、<code>Set</code> 等数据结构来统计和分析字符串。</li></ul><p>🚀 有任何题目写不出来或者需要优化，随时喊我！加油 💪🌱✨</p><p>来源：</p><pre><code>- ChatGPt-4o- 我自己的题解和理解</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型与变量</title>
      <link href="/2025/03/05/Java%E8%AF%AD%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
      <url>/2025/03/05/Java%E8%AF%AD%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型与变量"><a href="#数据类型与变量" class="headerlink" title="数据类型与变量"></a>数据类型与变量</h1><h2 id="Java-标识符"><a href="#Java-标识符" class="headerlink" title="Java 标识符"></a>Java 标识符</h2><p>Java 所有的组成部分都需要名字。</p><p><strong>类名、变量名和方法名</strong>都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li>所有的标识符都应该以<strong>字母</strong><code>A-Z</code> 或 <code>a-z</code> 、<strong>美元符</strong><code>$</code> 或 <strong>下划线</strong><code>_</code>开始</li><li>首字符之后可以是<strong>字母</strong><code>A-Z</code> 或 <code>a-z</code> 美元符<code>$</code> 、下划线<code>_</code> 或<strong>数字</strong>的任何字符组合</li><li><strong>关键字不能</strong>用作标识符</li><li>标识符是<strong>大小写敏感</strong>的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary （非合法开头）</li></ul><h2 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h2><blockquote><p>在 Java 中，数据类型主要分为两大类：基本数据类型（Primitive Data Types）和引用数据类型（Reference Data Types）。下面为你详细介绍这两种类型。</p></blockquote><p>Java 有 8 种基本数据类型，它们可以进一步分为 4 类：整数类型、浮点类型、字符类型和布尔类型。</p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>用于表示整数数值，不同的整数类型有不同的取值范围和占用的存储空间。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8 位</td><td>-128 到 127</td><td>0</td><td><code>byte b = 10;</code></td></tr><tr><td><code>short</code></td><td>16 位</td><td>-32768 到 32767</td><td>0</td><td><code>short s = 100;</code></td></tr><tr><td><code>int</code></td><td>32 位</td><td>-2147483648 到 2147483647</td><td>0</td><td><code>int i = 1000;</code></td></tr><tr><td><code>long</code></td><td>64 位</td><td>-9223372036854775808 到 9223372036854775807</td><td>0L</td><td><code>long l = 10000L;</code>（注意：定义 <code>long</code> 类型的变量时，数值后面需要加 <code>L</code> 或 <code>l</code>）</td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>用于表示带小数部分的数值，分为单精度 <code>float</code> 和双精度 <code>double</code>。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>float</code></td><td>32 位</td><td>大约 ±3.40282347E+38F（有效位数 6 - 7 位）</td><td>0.0f</td><td><code>float f = 3.14f;</code>（注意：定义 <code>float</code> 类型的变量时，数值后面需要加 <code>F</code> 或 <code>f</code>）</td></tr><tr><td><code>double</code></td><td>64 位</td><td>大约 ±1.79769313486231570E+308（有效位数 15 位）</td><td>0.0d</td><td><code>double d = 3.14159;</code>（<code>double</code> 类型数值后面的 <code>d</code> 或 <code>D</code> 可以省略）</td></tr></tbody></table><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p><code>char</code> 类型用于表示单个字符，占用 16 位（2 个字节），采用 Unicode 编码。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>char</code></td><td>16 位</td><td>‘\u0000’ 到 ‘\uffff’（即 0 到 65535）</td><td>‘\u0000’</td><td><code>char c = &#39;A&#39;;</code></td></tr></tbody></table><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p><code>boolean</code> 类型只有两个值：<code>true</code> 和 <code>false</code>，用于逻辑判断。</p><table><thead><tr><th>数据类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>boolean</code></td><td>未明确规定（通常 1 位）</td><td><code>true</code> 或 <code>false</code></td><td><code>false</code></td><td><code>boolean flag = true;</code></td></tr></tbody></table><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>引用数据类型指向一个对象，而不是存储实际的数据值。常见的引用数据类型包括：</p><h4 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h4><p>自定义的类或者 Java 提供的类，例如 <code>String</code> 类用于表示字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 String 对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h4><p>接口是一种抽象类型，它定义了一组方法的签名，但没有实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现接口方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实现类的对象</span></span><br><span class="line"><span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br></pre></td></tr></table></figure><h4 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h4><p>数组是相同类型数据的有序集合，前面已经详细介绍过数组的声明、构造和初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个整型数组</span></span><br><span class="line"><span class="type">int</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="基本数据类型和引用数据类型的区别"><a href="#基本数据类型和引用数据类型的区别" class="headerlink" title="基本数据类型和引用数据类型的区别"></a>基本数据类型和引用数据类型的区别</h3><ul><li><strong>存储方式</strong>：基本数据类型直接存储数据值，而引用数据类型存储的是对象的引用（内存地址）。</li><li><strong>默认值</strong>：基本数据类型有各自的默认值，而引用数据类型的默认值是 <code>null</code>。</li><li><strong>使用方式</strong>：基本数据类型可以直接进行赋值和运算，而引用数据类型需要通过引用调用对象的方法和属性。</li></ul><h2 id="Java-变量"><a href="#Java-变量" class="headerlink" title="Java 变量"></a>Java 变量</h2><blockquote><p>在 Java 里，变量按其作用域、声明位置和生命周期等因素，可分为局部变量、类变量（静态变量）和成员变量（非静态变量）这三种主要类型。</p></blockquote><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li><strong>定义</strong>：在<strong>方法、构造方法或者语句块中</strong>定义的变量被称为局部变量。它只在定义它的方法、构造方法或语句块内部可见，当这些代码块执行完毕，局部变量就会被销毁。</li><li>特点<ul><li>声明在方法、构造函数或代码块内部。</li><li>必须在使用前初始化，否则会编译错误。</li><li>作用域仅限于声明它的代码块。</li></ul></li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalVariableExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 声明一个局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">10</span>; </span><br><span class="line">        System.out.println(<span class="string">&quot;局部变量的值: &quot;</span> + localVar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalVariableExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalVariableExample</span>();</span><br><span class="line">        example.testMethod();</span><br><span class="line">        <span class="comment">// 下面这行代码会编译错误，因为 localVar 超出了作用域</span></span><br><span class="line">        <span class="comment">// System.out.println(localVar); </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><ul><li><strong>定义</strong>：使用 <code>static</code> 关键字修饰的变量被称为类变量，也叫静态变量。它属于类本身，而不是类的某个实例，<strong>一个类的所有实例共享同一个类变量</strong>。</li><li>特点<ul><li>用 <code>static</code> 关键字声明，<strong>通常在类中方法外部声明</strong>。</li><li>可以在类加载时初始化，如果没有显式初始化，会有默认值（如数值类型为 0，布尔类型为 false，引用类型为 null）。</li><li><strong>可以通过类名直接访问，也可以通过类的实例访问</strong>。</li></ul></li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticVariableExample</span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">classVar</span> <span class="operator">=</span> <span class="number">20</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过类名直接访问类变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过类名访问类变量的值: &quot;</span> + StaticVariableExample.classVar); </span><br><span class="line"></span><br><span class="line">        <span class="type">StaticVariableExample</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticVariableExample</span>();</span><br><span class="line">        <span class="type">StaticVariableExample</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticVariableExample</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过实例访问类变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过 obj1 访问类变量的值: &quot;</span> + obj1.classVar); </span><br><span class="line">        System.out.println(<span class="string">&quot;通过 obj2 访问类变量的值: &quot;</span> + obj2.classVar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改类变量的值</span></span><br><span class="line">        obj1.classVar = <span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后通过 obj2 访问类变量的值: &quot;</span> + obj2.classVar); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量（动态变量）"><a href="#成员变量（动态变量）" class="headerlink" title="成员变量（动态变量）"></a>成员变量（动态变量）</h3><ul><li><strong>定义</strong>：在类中但方法、构造方法和语句块之外声明的变量被称为成员变量，也叫<strong>实例变量</strong>。每个类的实例都有自己独立的一份成员变量副本。</li><li>特点<ul><li>声明在类中，方法外部。</li><li>如果没有显式初始化，会有默认值（如数值类型为 0，布尔类型为 false，引用类型为 null）。</li><li><strong>必须通过类的实例来访问</strong>。</li></ul></li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceVariableExample</span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个成员变量</span></span><br><span class="line">    <span class="type">int</span> instanceVar; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InstanceVariableExample</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instanceVar = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InstanceVariableExample</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstanceVariableExample</span>(<span class="number">40</span>);</span><br><span class="line">        <span class="type">InstanceVariableExample</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstanceVariableExample</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每个实例有自己独立的成员变量副本</span></span><br><span class="line">        System.out.println(<span class="string">&quot;obj1 的成员变量值: &quot;</span> + obj1.instanceVar); </span><br><span class="line">        System.out.println(<span class="string">&quot;obj2 的成员变量值: &quot;</span> + obj2.instanceVar); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java导论</title>
      <link href="/2025/03/05/Java%E5%AF%BC%E8%AE%BA/"/>
      <url>/2025/03/05/Java%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Java导论"><a href="#Java导论" class="headerlink" title="Java导论"></a><code>Java</code>导论</h1><p>理解本博客需要初步了解面向对象编程技术，对于面向对象编程的基本概念本博客不再介绍。</p><blockquote><ul><li><p>Java 是一种高级、面向对象、跨平台的编程语言，由 <strong>Sun Microsystems</strong>（现归属 Oracle）于 1995 年推出。它以 <strong>“Write Once, Run Anywhere”（一次编写，随处运行）</strong> 为目标，广泛用于<strong>桌面应用</strong>、<strong>Web 开发</strong>、<strong>移动应用</strong>、<strong>企业级系统和物联网</strong></p></li><li><p><strong>Java 的跨平台性</strong> 和 <strong>运行时优化机制</strong> 是其核心优势，尤其在企业级和大数据开发中占据重要地位。</p></li></ul></blockquote><h2 id="Java-的主要特点"><a href="#Java-的主要特点" class="headerlink" title="Java 的主要特点"></a><strong>Java 的主要特点</strong></h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><strong>跨平台性</strong>：<ul><li>Java 通过 Java 虚拟机（JVM）实现跨平台。编译后的字节码（<code>.class</code> 文件）可以在任意安装 JVM 的操作系统上运行。</li></ul></li><li><strong>面向对象</strong>：<ul><li>支持类、对象、继承、多态等特性，采用封装、继承和多态作为核心设计思想。</li></ul></li><li><strong>安全性</strong>：<ul><li>Java 在编译和运行时提供多重安全机制，包括字节码验证、沙箱模型和内存管理。</li></ul></li><li><strong>多线程</strong>：<ul><li>Java 内置多线程支持，适合开发并发和高性能的程序。</li></ul></li><li><strong>动态性</strong>：<ul><li>Java 程序可以动态加载类库，适应运行时环境的变化。</li></ul></li><li><strong>高性能</strong>：<ul><li>虽然 Java 是解释执行的语言，但现代 JVM 的即时编译（JIT）技术大幅提高了性能。</li></ul></li></ol><h3 id="Java-的核心组件"><a href="#Java-的核心组件" class="headerlink" title="Java 的核心组件"></a><strong>Java 的核心组件</strong></h3><h4 id="1-Java语言"><a href="#1-Java语言" class="headerlink" title="1. Java语言"></a>1. Java语言</h4><h4 id="2-依赖环境"><a href="#2-依赖环境" class="headerlink" title="2. 依赖环境"></a>2. 依赖环境</h4><ul><li><p><strong>Java 虚拟机（JVM）</strong></p><p>JVM 是 Java 程序的运行核心，它负责加载字节码文件（<code>.class</code> 文件），并将字节码解释或编译成机器码，在不同的操作系统上提供统一的运行环境，实现了 Java 的 “一次编写，到处运行” 特性。</p></li><li><p><strong>Java 运行时环境（JRE）</strong></p><p>JRE 是运行 Java 程序所必需的环境，它包含了 JVM 和 Java 核心类库。如果你只需要运行 Java 程序，安装 JRE 即可。</p></li><li><p><strong>Java 开发工具包（JDK）</strong></p><p>JDK 是 Java 开发人员使用的工具包，它包含了 JRE 和一系列开发工具，如编译器（<code>javac</code>）、调试器等。如果你要开发 Java 程序，需要安装 JDK。</p></li></ul><p>包含关系：JDK &gt; JRE &gt; JVM</p><h4 id="3-类库"><a href="#3-类库" class="headerlink" title="3. 类库"></a>3. 类库</h4><ol><li>Java 标准类库</li></ol><p>Java 标准类库是 Java 提供的一系列预定义类和接口，涵盖了各种功能，如输入输出、网络编程、数据结构等。常见的包有：</p><ul><li><strong><code>java.lang</code></strong>：包含了 Java 语言的核心类，如 <code>Object</code>、<code>String</code>、<code>Thread</code> 等，该包会被自动导入。</li><li><strong><code>java.util</code></strong>：提供了常用的工具类和集合框架，如 <code>ArrayList</code>、<code>HashMap</code> 等。</li><li><strong><code>java.io</code></strong>：用于实现输入输出操作，如文件读写、网络数据传输等。</li><li><strong><code>java.net</code></strong>：提供了网络编程的相关类和接口，如 <code>Socket</code>、<code>ServerSocket</code> 等。</li></ul><ol start="2"><li>Java 扩展类库</li></ol><p>除了标准类库，Java 还有许多扩展类库，如 JavaFX（用于创建富客户端应用程序）、JDBC（用于数据库连接）等</p><h3 id="Java-的运行机制"><a href="#Java-的运行机制" class="headerlink" title="Java 的运行机制"></a><strong>Java 的运行机制</strong></h3><p>Java 的运行机制可以分为以下几个阶段：</p><p><strong>1. 编写源代码</strong></p><ul><li><p>开发者用 Java 编程语言编写 <code>.java</code> 文件。</p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 编译</strong></p><ul><li>使用 <code>javac</code> 编译器将 <code>.java</code> 文件编译为字节码（<code>.class</code> 文件）。</li><li>字节码是一种与平台无关的中间代码，能够被 JVM 执行。</li></ul><p><strong>3. 加载</strong></p><ul><li>JVM 的类加载器（Class Loader）将字节码文件加载到内存。</li></ul><p><strong>4. 解释与执行</strong></p><ul><li>JVM 通过解释器逐行将字节码转换为机器码。</li><li>为提升性能，现代 JVM 使用即时编译器（JIT，Just-In-Time Compiler）将热点代码直接编译为机器码以提高运行速度。</li></ul><p><strong>5. 执行结果</strong></p><ul><li>最终由底层硬件执行生成的机器指令，并输出运行结果。</li></ul><hr><p><strong>运行结构图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">源代码（.java）</span><br><span class="line">   ↓   编译（javac）</span><br><span class="line">字节码文件（.class）</span><br><span class="line">   ↓   加载（Class Loader）</span><br><span class="line">Java 虚拟机（JVM）</span><br><span class="line">   ↓   转换（解释/即时编译）</span><br><span class="line">操作系统与硬件执行</span><br></pre></td></tr></table></figure><hr><h3 id="Java-的典型应用领域"><a href="#Java-的典型应用领域" class="headerlink" title="Java 的典型应用领域"></a><strong>Java 的典型应用领域</strong></h3><ol><li><strong>Web 开发</strong>：Spring、Hibernate、Struts 等框架广泛应用于后端开发。</li><li><strong>移动开发</strong>：Android 应用开发使用 Java 作为主要语言（逐步被 Kotlin 替代）。</li><li><strong>企业级应用</strong>：Java EE 被用于银行、保险和电信等行业的企业级开发。</li><li><strong>大数据</strong>：Hadoop、Spark 等大数据工具依赖 Java。</li><li><strong>物联网</strong>：Java 的平台无关性和多线程支持使其适合 IoT 开发。</li></ol><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>字节码（Bytecode）是一种中间形式的代码，它在编程语言的编译和执行过程中扮演着重要角色，下面从不同角度为你详细介绍：</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>字节码是一种特殊的二进制代码，它介于高级编程语言代码（如 Java、Python 的源代码）和机器码（计算机硬件能够直接执行的指令）之间。字节码通常由高级语言的源代码经过编译器编译生成，它不是直接可以在计算机硬件上运行的机器码，而是<strong>一种面向虚拟机的代码格式</strong>。</p><p><strong>以 Java 为例理解字节码</strong></p><ul><li><strong>生成过程</strong>：在 Java 中，程序员编写的 <code>.java</code> 源文件，经过 Java 编译器（<code>javac</code>）编译后，会生成 <code>.class</code> 文件，这个 <code>.class</code> 文件中存储的就是字节码。例如，有一个简单的 Java 程序：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>javac HelloWorld.java</code> 命令编译该源文件，就会生成 <code>HelloWorld.class</code> 文件，其中包含了该程序对应的字节码。</p><p><strong>执行过程</strong>：</p><ul><li>Java 字节码不能直接在操作系统上运行，而是由 Java 虚拟机（JVM）来执行。</li><li>JVM 会读取 <code>.class</code> 文件中的字节码，将其解释或编译成机器码，然后在特定的操作系统和硬件平台上运行。</li><li>这种方式使得 Java 程序具有 “一次编写，到处运行” 的特性，因为只要在不同的平台上安装了对应的 JVM，就可以运行相同的 Java 字节码。</li></ul><p><strong>字节码的优势</strong></p><ul><li><strong>平台无关性</strong>：字节码可以在不同的操作系统和硬件平台上运行，只要该平台上有对应的虚拟机支持。例如，Java 字节码可以在 Windows、Linux、Mac OS 等多种操作系统上运行，而不需要针对每个平台重新编写和编译代码。</li><li><strong>安全性</strong>：字节码在执行之前可以经过虚拟机的安全检查，确保代码不会对系统造成危害。例如，Java 虚拟机在加载字节码时会进行类文件格式检查、访问权限检查等，防止恶意代码的执行。</li><li><strong>优化潜力</strong>：虚拟机可以对字节码进行优化，提高代码的执行效率。例如，JVM 中的即时编译器（JIT）可以在运行时将频繁执行的字节码编译成高效的机器码，从而提升程序的性能。</li></ul><p><strong>其他使用字节码的语言</strong></p><p>除了 Java 之外，还有很多编程语言也使用字节码技术，例如：</p><ul><li><strong>Python</strong>：Python 源代码会被编译成字节码（<code>.pyc</code> 文件），然后由 Python 解释器（如 CPython）来执行这些字节码。</li><li><strong>C#</strong>：C# 代码经过编译后会生成中间语言（IL）字节码，这些字节码在 .NET 平台的公共语言运行时（CLR）中执行。</li></ul><h2 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="comment">/* 第一个Java程序</span></span><br><span class="line"><span class="comment">     * 它将输出字符串 Hello World</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// 输出 Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面将逐步介绍如何保存、编译以及运行这个程序：</p><ul><li>打开代码编辑器，把上面的代码添加进去；</li><li>把文件名保存为：HelloWorld.java；(源文件名必须和类名相同)</li><li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\</li><li>在命令行窗口输入 <code>javac HelloWorld.java</code> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li><li>再键输入 <code>java HelloWorld</code> 按下回车键就可以运行程序了</li></ul><p>如果遇到编码问题，我们可以使用 <strong>-encoding</strong> 选项设置 <strong>utf-8</strong> 来编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding UTF-8 HelloWorld.java </span><br><span class="line">java HelloWorld </span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="示例语句"><a href="#示例语句" class="headerlink" title="示例语句"></a>示例语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span></span><br></pre></td></tr></table></figure><ul><li>公共的、静态的、无返回值的主方法，该方法接受一个字符串类型的数组作为参数</li></ul><p><img src="/assets/662E827A-FA32-4464-B0BD-40087F429E98.jpg" alt="img"></p><p>这是 Java 语言中程序执行的入口方法，当你运行一个 Java 程序时，JVM（Java 虚拟机）会从这个方法开始执行。其中：</p><ul><li><code>public</code> ：修饰符，表示该方法是公共的，<strong>可以被任何类访问</strong>。</li><li><code>static</code> ：修饰符，表示该方法是<strong>静态的</strong>，<strong>不需要创建类的实例</strong>就可以调用。</li><li><code>void</code>： 表示该方法没有返回值。</li><li><code>main</code> 标识符，是方法名，这是一个固定的名称，JVM 会识别这个方法作为程序的入口。所有的方法名都应该<strong>以小写字母开头</strong></li><li><code>String[] args</code> 是方法的参数，是<code>一个字符串类型的数组</code>，<strong>用于接收命令行参数</strong>。</li></ul><blockquote><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。</p></blockquote><h3 id="编写规则"><a href="#编写规则" class="headerlink" title="编写规则"></a>编写规则</h3><p>编写 Java 程序时，应注意以下几点：</p><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li><strong>类名</strong>：对于所有的类来说，<strong>类名的首字母应该大写</strong>。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li><li><strong>方法名</strong>：所有的方法名都应该<strong>以小写字母开头</strong>。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><p>​</p><p>- </p><h2 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h2><p>类似于 C&#x2F;C++、Java 也支持单行以及多行注释。</p><p>注释中的字符将被 Java 编译器忽略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    * 它将输出 Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello World&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-源程序与编译型运行区别"><a href="#Java-源程序与编译型运行区别" class="headerlink" title="Java 源程序与编译型运行区别"></a>Java 源程序与编译型运行区别</h2><p>如下图所示：</p><p><img src="/assets/ZSSDMld.png"></p><h2 id="Java-关键字"><a href="#Java-关键字" class="headerlink" title="Java 关键字"></a>Java 关键字</h2><p>下面列出了 Java 关键字。这些保留字<strong>不能</strong>用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>abstract</code></td><td>用于<strong>声明抽象类或抽象方法</strong>。</td></tr><tr><td><code>assert</code></td><td>用于断言某个条件为真，通常用于调试。</td></tr><tr><td><code>boolean</code></td><td>用于声明布尔类型的变量（<code>true</code> 或 <code>false</code>）。</td></tr><tr><td><code>break</code></td><td>用于跳出循环或<code>switch</code>语句。</td></tr><tr><td><code>byte</code></td><td>用于声明字节类型的变量（8位整数）。</td></tr><tr><td><code>case</code></td><td>用于<code>switch</code>语句中的分支。</td></tr><tr><td><code>catch</code></td><td>用于捕获异常。</td></tr><tr><td><code>char</code></td><td>用于声明字符类型的变量（16位Unicode字符）。</td></tr><tr><td><code>class</code></td><td>用于声明类。</td></tr><tr><td><code>const</code></td><td>保留关键字，未使用。</td></tr><tr><td><code>continue</code></td><td>用于跳过当前循环的剩余部分，继续下一次循环。</td></tr><tr><td><code>default</code></td><td>用于<code>switch</code>语句中的默认分支。</td></tr><tr><td><code>do</code></td><td>用于声明<code>do-while</code>循环。</td></tr><tr><td><code>double</code></td><td>用于声明双精度浮点数类型的变量（64位浮点数）。</td></tr><tr><td><code>else</code></td><td>用于<code>if</code>语句的否定分支。</td></tr><tr><td><code>enum</code></td><td>用于声明<strong>枚举类型</strong>。</td></tr><tr><td><code>extends</code></td><td>用于<strong>声明一个类继承另一个类</strong>。</td></tr><tr><td><code>final</code></td><td>用于声明常量、不可继承的类或不可重写的方法。</td></tr><tr><td><code>finally</code></td><td>用于<code>try-catch</code>块中，无论是否发生异常都会执行的代码块。</td></tr><tr><td><code>float</code></td><td>用于声明单精度浮点数类型的变量（32位浮点数）。</td></tr><tr><td><code>for</code></td><td>用于声明<code>for</code>循环。</td></tr><tr><td><code>goto</code></td><td>保留关键字，未使用。</td></tr><tr><td><code>if</code></td><td>用于声明条件语句。</td></tr><tr><td><code>implements</code></td><td>用于声明类<strong>实现一个或多个接口</strong>。</td></tr><tr><td><code>import</code></td><td>用于<strong>导入包或类</strong>。</td></tr><tr><td><code>instanceof</code></td><td>用于检查对象<strong>是否是某个类的实例</strong>。</td></tr><tr><td><code>int</code></td><td>用于声明整数类型的变量（32位整数）。</td></tr><tr><td><code>interface</code></td><td>用于声明接口。</td></tr><tr><td><code>long</code></td><td>用于声明<strong>长整数类型的变量</strong>（64位整数）。</td></tr><tr><td><code>native</code></td><td>用于声明<strong>本地方法</strong>（由非Java代码实现的方法）。</td></tr><tr><td><code>new</code></td><td>用于创建新对象。</td></tr><tr><td><code>package</code></td><td>用于声明包。</td></tr><tr><td><code>private</code></td><td>用于声明私有成员（仅在类内部可见）。</td></tr><tr><td><code>protected</code></td><td>用于声明受保护的成员（在类内部、子类和同一包内可见）。</td></tr><tr><td><code>public</code></td><td>用于声明公共成员（在任何地方可见）。</td></tr><tr><td><code>return</code></td><td>用于从方法中返回值。</td></tr><tr><td><code>short</code></td><td>用于声明短整数类型的变量（16位整数）。</td></tr><tr><td><code>static</code></td><td>用于声明静态成员（属于类而不是实例）。</td></tr><tr><td><code>strictfp</code></td><td>用于声明严格浮点计算（确保浮点运算在不同平台上结果一致）。</td></tr><tr><td><code>super</code></td><td>用于<strong>引用父类的成员</strong>或<strong>调用父类的构造方法</strong>。</td></tr><tr><td><code>switch</code></td><td>用于声明多分支选择语句。</td></tr><tr><td><code>synchronized</code></td><td>用于声明同步方法或代码块（线程安全）。</td></tr><tr><td><code>this</code></td><td>用于<strong>引用当前对象的实例</strong>。</td></tr><tr><td><code>throw</code></td><td>用于抛出异常。</td></tr><tr><td><code>throws</code></td><td>用于声明方法可能抛出的异常。</td></tr><tr><td><code>transient</code></td><td>用于声明不需要序列化的字段。</td></tr><tr><td><code>try</code></td><td>用于声明可能抛出异常的代码块。</td></tr><tr><td><code>void</code></td><td>用于声明无返回值的方法。</td></tr><tr><td><code>volatile</code></td><td>用于声明易变变量（确保多线程环境下的可见性）。</td></tr><tr><td><code>while</code></td><td>用于声明<code>while</code>循环。</td></tr></tbody></table><p>注意：</p><ul><li><code>const</code> 和 <code>goto</code> 是Java的保留关键字，但目前并未使用。</li><li><code>true</code>、<code>false</code> 和 <code>null</code> 是字面量，不是关键字，但也不能用作标识符。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法_修饰符</title>
      <link href="/2025/03/05/Java%E8%AF%AD%E6%B3%95-%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2025/03/05/Java%E8%AF%AD%E6%B3%95-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h2><blockquote><p>像其他语言一样，Java可以使用修饰符。在 Java 里，修饰符用于定义<strong>类</strong>、<strong>方法</strong>或者<strong>变量</strong>的<strong>特性与访问权限</strong>。</p></blockquote><p>主要有两类修饰符：</p><ul><li><p>访问控制修饰符 : </p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><code>default</code></td><td>也称为包访问权限。如果一个类、方法或属性没有使用任何访问修饰符，那么它只能被同一个包内的其他类访问。</td></tr><tr><td><code>public</code></td><td>具有<strong>公共访问权限</strong>，被 <code>public</code> 修饰的类、方法或属性<strong>可以被任何包中的任何类访问</strong>。</td></tr><tr><td><code>protected</code></td><td>具有<strong>受保护的访问权限</strong>。被 <code>protected</code> 修饰的成员<strong>可以被同一个包内的其他类访问</strong>，<strong>也可以被不同包中的子类访问</strong>。</td></tr><tr><td><code>private</code></td><td>具有<strong>私有访问权限</strong>，被 <code>private</code> 修饰的方法或属性<strong>只能在定义它们的类内部访问</strong>，<strong>其他类无法直接访问</strong>。</td></tr></tbody></table><p>开放程度：public(所有人) &gt; protected(自家人) &gt; default(在家(包)里的人) &gt; private(自己)</p></li><li><p>非访问控制修饰符 ：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><code>final</code></td><td>修饰类：表示<strong>该类不能被继承</strong>。<br>修饰方法：表示<strong>该方法不能被重写</strong>。<br>修饰变量：表示该变量一旦被赋值，就<strong>不能再被修改</strong>，成为<strong>常量</strong>。</td></tr><tr><td><code>abstract</code></td><td>修饰类：表示该类是抽象类，不能被实例化，主要用于作为其他类的基类。抽象类中可以包含抽象方法和非抽象方法。 <br/>修饰方法：表示该方法是抽象方法，只有方法声明，没有方法体，需要在子类中实现。</td></tr><tr><td><code>static</code></td><td>修饰变量：表示该变量是<strong>类变量</strong>，被<strong>所有类的实例共享</strong>，不需要创建对象就<strong>可以通过类名直接访问</strong>。  <br/>修饰方法：表示该方法是<strong>类方法</strong>，同样不需要创建对象就<strong>可以通过类名直接调用</strong>，并且在静态方法中不能直接访问非静态成员(能访问静态成员)。</td></tr><tr><td><code>synchronized</code></td><td>用于修饰方法或代码块，保证<strong>在同一时刻只有一个线程可以访问该方法或代码块</strong>，主要用于解决<strong>多线程并发访问时的数据同步问题</strong>。</td></tr></tbody></table></li></ul><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><h4 id="1-default（默认，不写修饰符时）"><a href="#1-default（默认，不写修饰符时）" class="headerlink" title="1. default（默认，不写修饰符时）"></a>1. <code>default</code>（默认，不写修饰符时）</h4><ul><li><p><strong>含义</strong>：也称为包访问权限。如果一个类、方法或属性没有使用任何访问修饰符，那么它只能被同一个包内的其他类访问。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义在 com.example 包下</span></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultAccessClass</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a default access method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在同一个包内的其他类可以调用 <code>defaultMethod</code>，但不同包的类无法调用。</p><h4 id="2-public"><a href="#2-public" class="headerlink" title="2. public"></a>2. <code>public</code></h4><ul><li><p><strong>含义</strong>：具有<strong>公共访问权限</strong>，被 <code>public</code> 修饰的类、方法或属性<strong>可以被任何包中的任何类访问</strong>。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicAccessClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a public access method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>无论在哪个包中的类，都可以创建 <code>PublicAccessClass</code> 的对象并调用 <code>publicMethod</code>。</p><h4 id="3-protected"><a href="#3-protected" class="headerlink" title="3. protected"></a>3. <code>protected</code></h4><ul><li><p><strong>含义</strong>：具有<strong>受保护的访问权限</strong>。被 <code>protected</code> 修饰的成员<strong>可以被同一个包内的其他类访问</strong>，<strong>也可以被不同包中的子类访问</strong>。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类，在 com.example 包下</span></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a protected method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类，在不同包下</span></span><br><span class="line"><span class="keyword">package</span> another.example;</span><br><span class="line"><span class="keyword">import</span> com.example.ParentClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChildClass</span> <span class="keyword">extends</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callProtectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        protectedMethod(); <span class="comment">// 可以调用父类的 protected 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-private"><a href="#4-private" class="headerlink" title="4. private"></a>4. <code>private</code></h4><ul><li><p><strong>含义</strong>：具有<strong>私有访问权限</strong>，被 <code>private</code> 修饰的方法或属性<strong>只能在定义它们的类内部访问</strong>，<strong>其他类无法直接访问</strong>。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrivateAccessClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">privateField</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a private method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessPrivateMembers</span><span class="params">()</span> &#123;</span><br><span class="line">        privateField = <span class="number">20</span>;</span><br><span class="line">        privateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>外部类不能直接访问 <code>privateField</code> 和 <code>privateMethod</code>。</p><h3 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h3><h4 id="1-final"><a href="#1-final" class="headerlink" title="1. final"></a>1. <code>final</code></h4><ul><li><p>含义：</p><ul><li>修饰类：表示<strong>该类不能被继承</strong>。</li><li>修饰方法：表示<strong>该方法不能被重写</strong>。</li><li>修饰变量：表示该变量一旦被赋值，就<strong>不能再被修改</strong>，成为<strong>常量</strong>。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final 类不能被继承</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FinalClass</span> &#123;</span><br><span class="line">    <span class="comment">// final 方法不能被重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a final method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnotherClass</span> &#123;</span><br><span class="line">    <span class="comment">// final 变量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FINAL_VARIABLE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-abstract"><a href="#2-abstract" class="headerlink" title="2. abstract"></a>2. <code>abstract</code></h4><ul><li><p>含义：</p><ul><li>修饰类：表示该类是抽象类，不能被实例化，主要用于作为其他类的基类。抽象类中可以包含抽象方法和非抽象方法。</li><li>修饰方法：表示该方法是抽象方法，只有方法声明，没有方法体，需要在子类中实现。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">normalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a normal method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类实现抽象方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Implementing the abstract method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul><h4 id="3-static"><a href="#3-static" class="headerlink" title="3. static"></a>3. <code>static</code></h4><ul><li><p>含义：</p><ul><li>修饰变量：表示该变量是<strong>类变量</strong>，被<strong>所有类的实例共享</strong>，不需要创建对象就<strong>可以通过类名直接访问</strong>。</li><li>修饰方法：表示该方法是<strong>类方法</strong>，同样不需要创建对象就<strong>可以通过类名直接调用</strong>，并且在静态方法中不能直接访问非静态成员(能访问静态成员)。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticExample</span> &#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a static method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 直接通过类名访问静态变量和方法</span></span><br><span class="line">        System.out.println(StaticExample.staticVariable);</span><br><span class="line">        StaticExample.staticMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-synchronized"><a href="#4-synchronized" class="headerlink" title="4. synchronized"></a>4. <code>synchronized</code></h4><ul><li><strong>含义</strong>：用于修饰方法或代码块，保证<strong>在同一时刻只有一个线程可以访问该方法或代码块</strong>，主要用于解决<strong>多线程并发访问时的数据同步问题</strong>。</li><li><strong>示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynchronizedExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample</span>();</span><br><span class="line">        <span class="comment">// 创建多个线程访问同步方法</span></span><br><span class="line">        <span class="comment">// 这里省略具体多线程代码，实际使用中可通过 Thread 类或 ExecutorService 实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protected-成员的访问方式"><a href="#protected-成员的访问方式" class="headerlink" title="protected 成员的访问方式"></a><code>protected</code> 成员的访问方式</h3><blockquote><p>在 Java 中，<code>protected</code> 和 <code>private</code> 都是访问修饰符，用于控制类、方法和变量的访问权限，但它们的访问规则有所不同。下面分别介绍 <code>protected</code> 成员的访问方式以及它与 <code>private</code> 的区别。</p></blockquote><p><code>protected</code> 修饰的成员（类、方法、变量）具有一定的访问权限规则，其访问方式如下：</p><h4 id="1-同一类内部"><a href="#1-同一类内部" class="headerlink" title="1. 同一类内部"></a>1. 同一类内部</h4><p>在定义 <code>protected</code> 成员的类内部，可以直接访问该成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProtectedExample</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">protectedVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a protected method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessWithinClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在类内部可以直接访问 protected 变量和方法</span></span><br><span class="line">        System.out.println(protectedVariable); </span><br><span class="line">        protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-同一包内的其他类"><a href="#2-同一包内的其他类" class="headerlink" title="2. 同一包内的其他类"></a>2. 同一包内的其他类</h4><p>在同一个包中的其他类，可以访问该类的 <code>protected</code> 成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同一个包中的另一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnotherClassInSamePackage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessProtectedMembers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProtectedExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectedExample</span>();</span><br><span class="line">        <span class="comment">// 在同一包内可以访问 protected 变量和方法</span></span><br><span class="line">        System.out.println(example.protectedVariable); </span><br><span class="line">        example.protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-不同包中的子类"><a href="#3-不同包中的子类" class="headerlink" title="3. 不同包中的子类"></a>3. 不同包中的子类</h4><p>在同包的子类中，可以通过子类对象访问从父类继承来的 <code>protected</code> 成员，也可以在子类内部直接访问父类的 <code>protected</code> 成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类在包 com.example.parent 中</span></span><br><span class="line"><span class="keyword">package</span> com.example.parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">protectedVariable</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a protected method in ParentClass.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类在包 com.example.child 中</span></span><br><span class="line"><span class="keyword">package</span> com.example.child;</span><br><span class="line"><span class="keyword">import</span> com.example.parent.ParentClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChildClass</span> <span class="keyword">extends</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessProtectedFromParent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在子类内部可以直接访问父类的 protected 成员</span></span><br><span class="line">        System.out.println(protectedVariable); </span><br><span class="line">        protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChildClass</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChildClass</span>();</span><br><span class="line">        child.accessProtectedFromParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不同包的子类对象也可以访问继承的 protected 成员</span></span><br><span class="line">        System.out.println(child.protectedVariable); </span><br><span class="line">        child.protectedMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protected-与-private-的区别"><a href="#protected-与-private-的区别" class="headerlink" title="protected 与 private 的区别"></a><code>protected</code> 与 <code>private</code> 的区别</h3><h4 id="1-访问权限范围"><a href="#1-访问权限范围" class="headerlink" title="1. 访问权限范围"></a>1. 访问权限范围</h4><ul><li><strong><code>protected</code></strong>：如上述所说，<code>protected</code> 成员可以被同一类内部、同一包内的其他类以及不同包中的子类访问。</li><li><strong><code>private</code></strong>：<code>private</code> 成员只能在定义它的类内部被访问，其他任何类（包括子类，同一包中的其他类）都无法直接访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrivateExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">privateVariable</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a private method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessPrivateWithinClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在类内部可以直接访问 private 变量和方法</span></span><br><span class="line">        System.out.println(privateVariable); </span><br><span class="line">        privateMethod(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TryToAccessPrivate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PrivateExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrivateExample</span>();</span><br><span class="line">        <span class="comment">// 下面两行代码会编译错误，因为 private 成员不能在类外部访问</span></span><br><span class="line">        <span class="comment">// System.out.println(example.privateVariable); </span></span><br><span class="line">        <span class="comment">// example.privateMethod(); </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-对继承的影响"><a href="#2-对继承的影响" class="headerlink" title="2. 对继承的影响"></a>2. 对继承的影响</h4><ul><li><strong><code>protected</code></strong>：<code>protected</code> 成员可以被不同包的子类继承和访问，这使得子类能够扩展和使用父类的功能。</li><li><strong><code>private</code></strong>：<code>private</code> 成员不能被子类继承和直接访问，子类无法直接使用父类的 <code>private</code> 成员，这保证了类的封装性和数据的安全性。</li></ul><p>来源：</p><pre><code>- 豆包- 我自己</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法_循环结构</title>
      <link href="/2025/03/05/Java%E8%AF%AD%E6%B3%95-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2025/03/05/Java%E8%AF%AD%E6%B3%95-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Java 中的循环结构非常强大，是控制程序执行流程的重要部分。让我们系统地讲解 Java 的三种基本循环结构，带你全面掌握它们的用法、区别和技巧！🚀</p><hr><h1 id="Java循环结构"><a href="#Java循环结构" class="headerlink" title="Java循环结构"></a>Java循环结构</h1><h2 id="1️⃣-for-循环"><a href="#1️⃣-for-循环" class="headerlink" title="1️⃣ for 循环"></a><strong>1️⃣ <code>for</code> 循环</strong></h2><p><code>for</code> 循环是 Java 中最常用的循环之一，特别适合<strong>已知循环次数</strong>的场景。</p><h3 id="语法结构："><a href="#语法结构：" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 循环条件; 更新表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行顺序："><a href="#执行顺序：" class="headerlink" title="执行顺序："></a><strong>执行顺序：</strong></h3><ol><li><strong>初始化表达式</strong>：在循环开始前执行一次，只执行这一次。</li><li><strong>循环条件</strong>：在每次循环前判断是否执行循环体。条件为 <code>true</code> 执行，为 <code>false</code> 停止。</li><li><strong>循环体</strong>：条件为 <code>true</code> 时执行。</li><li><strong>更新表达式</strong>：每次循环结束后执行，然后回到条件判断。</li></ol><h3 id="示例：打印-0-到-4-的数字"><a href="#示例：打印-0-到-4-的数字" class="headerlink" title="示例：打印 0 到 4 的数字"></a><strong>示例：打印 0 到 4 的数字</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForLoopExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前数字: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前数字: 0</span><br><span class="line">当前数字: 1</span><br><span class="line">当前数字: 2</span><br><span class="line">当前数字: 3</span><br><span class="line">当前数字: 4</span><br></pre></td></tr></table></figure><h3 id="增强型-for（for-each-循环）"><a href="#增强型-for（for-each-循环）" class="headerlink" title="增强型 for（for-each 循环）"></a><strong>增强型 <code>for</code>（<code>for-each</code> 循环）</strong></h3><p>专门用于<strong>遍历数组或集合</strong>。简洁直观，不需要下标操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数字: &quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2️⃣-while-循环"><a href="#2️⃣-while-循环" class="headerlink" title="2️⃣ while 循环"></a><strong>2️⃣ <code>while</code> 循环</strong></h2><p><code>while</code> 循环适合<strong>不确定循环次数但需要满足条件才执行</strong>的场景。</p><h3 id="语法结构：-1"><a href="#语法结构：-1" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行顺序：-1"><a href="#执行顺序：-1" class="headerlink" title="执行顺序："></a><strong>执行顺序：</strong></h3><ol><li><strong>先判断条件</strong>，<code>true</code> 则执行循环体，<code>false</code> 停止循环。</li><li>每次循环后，返回条件表达式继续判断。</li></ol><h3 id="示例：打印-0-到-4-的数字-1"><a href="#示例：打印-0-到-4-的数字-1" class="headerlink" title="示例：打印 0 到 4 的数字"></a><strong>示例：打印 0 到 4 的数字</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileLoopExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前数字: &quot;</span> + i);</span><br><span class="line">            i++; <span class="comment">// 别忘了更新变量，防止死循环！</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3️⃣-do-while-循环"><a href="#3️⃣-do-while-循环" class="headerlink" title="3️⃣ do-while 循环"></a><strong>3️⃣ <code>do-while</code> 循环</strong></h2><p><code>do-while</code> 循环与 <code>while</code> 类似，但<strong>至少会执行一次</strong>循环体。</p><h3 id="语法结构：-2"><a href="#语法结构：-2" class="headerlink" title="语法结构："></a><strong>语法结构：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><h3 id="执行顺序：-2"><a href="#执行顺序：-2" class="headerlink" title="执行顺序："></a><strong>执行顺序：</strong></h3><ol><li><strong>先执行一次循环体</strong>。</li><li>然后判断条件，<code>true</code> 则继续执行，<code>false</code> 停止。</li></ol><h3 id="示例：至少执行一次的循环"><a href="#示例：至少执行一次的循环" class="headerlink" title="示例：至少执行一次的循环"></a><strong>示例：至少执行一次的循环</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前数字: &quot;</span> + i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>); <span class="comment">// 虽然条件不满足，但仍然执行了一次！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前数字: 10</span><br></pre></td></tr></table></figure><hr><h2 id="4️⃣-控制循环的关键字"><a href="#4️⃣-控制循环的关键字" class="headerlink" title="4️⃣ 控制循环的关键字"></a><strong>4️⃣ 控制循环的关键字</strong></h2><h3 id="break：提前结束循环"><a href="#break：提前结束循环" class="headerlink" title="break：提前结束循环"></a><strong><code>break</code>：提前结束循环</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;遇到 5，结束循环&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">遇到 5，结束循环</span><br></pre></td></tr></table></figure><h3 id="continue：跳过本次循环，继续下一次"><a href="#continue：跳过本次循环，继续下一次" class="headerlink" title="continue：跳过本次循环，继续下一次"></a><strong><code>continue</code>：跳过本次循环，继续下一次</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跳过 2&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">跳过 2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><hr><h2 id="5️⃣-循环嵌套"><a href="#5️⃣-循环嵌套" class="headerlink" title="5️⃣ 循环嵌套"></a><strong>5️⃣ 循环嵌套</strong></h2><p>可以在一个循环中嵌套另一个循环，用于多维数据处理或复杂逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NestedLoopExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;, j=&quot;</span> + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i=1, j=1</span><br><span class="line">i=1, j=2</span><br><span class="line">i=1, j=3</span><br><span class="line">i=2, j=1</span><br><span class="line">...</span><br><span class="line">i=3, j=3</span><br></pre></td></tr></table></figure><hr><h2 id="6️⃣-小技巧-注意事项"><a href="#6️⃣-小技巧-注意事项" class="headerlink" title="6️⃣ 小技巧 &amp; 注意事项"></a><strong>6️⃣ 小技巧 &amp; 注意事项</strong></h2><ul><li><strong><code>for</code> 循环更适合固定次数的循环。</strong></li><li><strong><code>while</code> 和 <code>do-while</code> 更适合不确定次数但需要基于条件的循环。</strong></li><li><strong>别忘了在循环中更新变量，避免死循环！</strong></li><li><strong>增强型 <code>for-each</code> 循环</strong>更加简洁，推荐用于遍历数组和集合。</li></ul><hr><h2 id="7️⃣-练习题"><a href="#7️⃣-练习题" class="headerlink" title="7️⃣ 练习题"></a><strong>7️⃣ 练习题</strong></h2><p><strong>🧠 问题 1：用 <code>for</code> 循环打印 1 到 100 的偶数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Print100</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">----------------</span><br><span class="line">98</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p><strong>🧠 问题 2：用 <code>while</code> 循环求 1 到 100 的和。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sum100</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ,sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5050</span><br></pre></td></tr></table></figure><p><strong>🧠 问题 3：使用嵌套循环输出一个 5x5 的星号矩阵。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintMartrix</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;<span class="number">5</span>;k++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>有问题、练习答案、或者想更深入了解循环？欢迎来交流！🌱😊</p><p>来源：</p><ul><li>Chatgpt-4o</li><li>我的理解</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法_运算符</title>
      <link href="/2025/03/03/Java%E8%AF%AD%E6%B3%95-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2025/03/03/Java%E8%AF%AD%E6%B3%95-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-运算符"><a href="#Java-运算符" class="headerlink" title="Java 运算符"></a>Java 运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>除了常见的<code>+ - * / % </code>还有自增自减<code>--</code> <code>++</code>运算符：</p><ul><li><p><strong>前缀自增自减法(++a,–a):</strong> 先进行自增或者自减运算，再进行表达式运算。</p><p>int b &#x3D; ++a; 拆分运算过程为: a&#x3D;a+1&#x3D;4; b&#x3D;a&#x3D;4, 最后结果为b&#x3D;4,a&#x3D;4</p><p>int d &#x3D; –c; 拆分运算过程为: c&#x3D;c-1&#x3D;2; d&#x3D;c&#x3D;2, 最后结果为d&#x3D;2,c&#x3D;2</p></li><li><p><strong>后缀自增自减法(a++,a–):</strong> 先进行表达式运算，再进行自增或者自减运算 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">selfAddMinus</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2</span>*++a;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>*b++;</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class="string">&quot;,x=&quot;</span>+x);</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class="string">&quot;,y=&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自增运算符前缀运算后a=6，x=12</span><br><span class="line">自增运算符后缀运算后b=6，y=10</span><br></pre></td></tr></table></figure></li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">（A &#x3D;&#x3D; B）为假。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td align="left">(A !&#x3D; B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; B）为假。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;B）为真。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; &#x3D; B）为假。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;&#x3D; B）为真。</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">按位与，如果相对应位都是1，则结果为1，否则为0</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或，如果相对应位都是 0，则结果为 0，否则为 1</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或，如果相对应位值相同，则结果为0，否则为1</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位取反，运翻转操作数的每一位，即0变成1，1变成0。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A = 0011 1100</span><br><span class="line">B = 0000 1101</span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = 0000 1100</span><br><span class="line">A | B = 0011 1101</span><br><span class="line">A ^ B = 0011 0001</span><br><span class="line">~A= 1100 0011</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span> </span><br><span class="line">     <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &amp; b = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a | b = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a ^ b = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;~a = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class="line"> </span><br><span class="line">     c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class="line">  </span><br><span class="line">     c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">     System.out.println(<span class="string">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &amp; b = 12</span><br><span class="line">a | b = 61</span><br><span class="line">a ^ b = 49</span><br><span class="line">~a = -61</span><br><span class="line">a &lt;&lt; 2 = 240</span><br><span class="line">a &gt;&gt; 2  = 15</span><br><span class="line">a &gt;&gt;&gt; 2 = 15</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td align="left">（A &amp;&amp; B）为假。</td></tr><tr><td align="left">| |</td><td align="left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td align="left">（A | | B）为真。</td></tr><tr><td align="left">！</td><td align="left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td align="left">！（A &amp;&amp; B）为真。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class="line">     System.out.println(<span class="string">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &amp;&amp; b = false</span><br><span class="line">a || b = true</span><br><span class="line">!(a &amp;&amp; b) = true</span><br></pre></td></tr></table></figure><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuoJi</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> (++a&gt;<span class="number">10</span>)&amp;&amp;(++a&gt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;a的结果为&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用短路逻辑运算符的结果为false</span><br><span class="line">a的结果为6</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuoJi</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> (a&lt;<span class="number">4</span>)&amp;&amp;(a++&lt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;a的结果为&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用短路逻辑运算符的结果为false</span><br><span class="line">a的结果为5</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下面是Java语言支持的赋值运算符：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td align="left">C &#x3D; A + B将把A + B得到的值赋给C</td></tr><tr><td align="left">+ &#x3D;</td><td align="left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td align="left">C + &#x3D; A等价于C &#x3D; C + A</td></tr><tr><td align="left">- &#x3D;</td><td align="left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td align="left">C - &#x3D; A等价于C &#x3D; C - A</td></tr><tr><td align="left">* &#x3D;</td><td align="left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td align="left">C * &#x3D; A等价于C &#x3D; C * A</td></tr><tr><td align="left">&#x2F; &#x3D;</td><td align="left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td align="left">C &#x2F; &#x3D; A，C 与 A 同类型时等价于 C &#x3D; C &#x2F; A</td></tr><tr><td align="left">（％）&#x3D;</td><td align="left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td align="left">C％&#x3D; A等价于C &#x3D; C％A</td></tr><tr><td align="left">&lt;&lt; &#x3D;</td><td align="left">左移位赋值运算符</td><td align="left">C &lt;&lt; &#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt; &#x3D;</td><td align="left">右移位赋值运算符</td><td align="left">C &gt;&gt; &#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td></tr><tr><td align="left">＆&#x3D;</td><td align="left">按位与赋值运算符</td><td align="left">C＆&#x3D; 2等价于C &#x3D; C＆2</td></tr><tr><td align="left">^ &#x3D;</td><td align="left">按位异或赋值操作符</td><td align="left">C ^ &#x3D; 2等价于C &#x3D; C ^ 2</td></tr><tr><td align="left">| &#x3D;</td><td align="left">按位或赋值操作符</td><td align="left">C | &#x3D; 2等价于C &#x3D; C | 2</td></tr></tbody></table><h2 id="条件运算符（三元运算符）"><a href="#条件运算符（三元运算符）" class="headerlink" title="条件运算符（三元运算符）?:"></a>条件运算符（三元运算符）<code>?:</code></h2><p>该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">variable</span> <span class="variable">x</span> <span class="operator">=</span> (expression) ? value <span class="keyword">if</span> <span class="literal">true</span> : value <span class="keyword">if</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> +  b );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> + b );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value of b is : 30</span><br><span class="line">Value of b is : 20</span><br></pre></td></tr></table></figure><h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (class/<span class="keyword">interface</span> <span class="title class_">type</span>)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstacanceOf</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h2><table><thead><tr><th align="left">类别</th><th align="left">操作符</th><th align="left">关联性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] . (点操作符)</td><td align="left">左到右</td></tr><tr><td align="left">一元</td><td align="left">expr++ expr–</td><td align="left">从左到右</td></tr><tr><td align="left">一元</td><td align="left">++expr –expr + - ～ ！</td><td align="left">从右到左</td></tr><tr><td align="left">乘性</td><td align="left">* &#x2F;％</td><td align="left">左到右</td></tr><tr><td align="left">加性</td><td align="left">+ -</td><td align="left">左到右</td></tr><tr><td align="left">移位</td><td align="left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td align="left">左到右</td></tr><tr><td align="left">关系</td><td align="left">&gt; &gt;&#x3D; &lt; &lt;&#x3D;</td><td align="left">左到右</td></tr><tr><td align="left">相等</td><td align="left">&#x3D;&#x3D; !&#x3D;</td><td align="left">左到右</td></tr><tr><td align="left">按位与</td><td align="left">＆</td><td align="left">左到右</td></tr><tr><td align="left">按位异或</td><td align="left">^</td><td align="left">左到右</td></tr><tr><td align="left">按位或</td><td align="left">|</td><td align="left">左到右</td></tr><tr><td align="left">逻辑与</td><td align="left">&amp;&amp;</td><td align="left">左到右</td></tr><tr><td align="left">逻辑或</td><td align="left">| |</td><td align="left">左到右</td></tr><tr><td align="left">条件</td><td align="left">？：</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">&#x3D; + &#x3D; - &#x3D; * &#x3D; &#x2F; &#x3D;％&#x3D; &gt;&gt; &#x3D; &lt;&lt; &#x3D;＆&#x3D; ^ &#x3D; | &#x3D;</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">，</td><td align="left">左到右</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法_面向对象_包</title>
      <link href="/2025/02/18/Java%E8%AF%AD%E6%B3%95-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%8C%85/"/>
      <url>/2025/02/18/Java%E8%AF%AD%E6%B3%95-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Package"><a href="#Java-Package" class="headerlink" title="Java Package"></a>Java Package</h1><h2 id="package-关键字"><a href="#package-关键字" class="headerlink" title="package 关键字"></a>package 关键字</h2><blockquote><p>在 Java 中，<code>package</code>是一个非常重要的概念，用于组织和管理 Java 类。</p></blockquote><h3 id="定义与作用"><a href="#定义与作用" class="headerlink" title="定义与作用"></a>定义与作用</h3><ul><li><p><strong>定义</strong>：</p><ul><li><code>package</code>语句是 Java 源文件中的一个特殊语句，用于<strong>声明该文件中定义的类所属的包</strong>。</li><li><strong>它必须是源文件中的第一条非注释语句</strong>。</li></ul></li><li><p>作用</p><ul><li><p><strong>组织代码结构</strong>：将相关的类、接口等组织在一起，形成一种层次化的命名空间，使代码更易于管理和维护。</p><p>比如，所有与数据库操作相关的类可以放在一个名为<code>com.example.db</code>的包中。</p></li></ul><ul><li><p><strong>避免命名冲突</strong>：不同的包中可以有<strong>相同名称的类</strong>，通过包名来<strong>区分它们</strong>。</p><p>例如，<code>java.util</code>包和<code>java.sql</code>包中都有<code>Date</code>类，通过完整的包名来明确使用的是哪个类。</p></li></ul></li></ul><h3 id="声明与命名规则"><a href="#声明与命名规则" class="headerlink" title="声明与命名规则"></a>声明与命名规则</h3><ul><li><p><strong>声明语法</strong>：</p><p>在 Java 源文件的开头使用<code>package</code>关键字来声明包，例如<code>package com.example.myapp;</code>，表示该文件中的类都属于<code>com.example.myapp</code>包。</p></li><li><p>命名规则：</p><ul><li><strong>全小写</strong>：包名通常采用全小写字母，以提高可读性和遵循 Java 的命名规范。</li><li><strong>域名倒置</strong>：一般以公司或组织的域名倒置作为包名的开头，然后根据项目的结构和功能进行细分。例如，域名为<code>example.com</code>，那么包名可能是<code>com.example.projectname.module</code>。</li><li><strong>避免使用关键字</strong>：不能使用 Java 中的关键字作为包名，如<code>class</code>、<code>public</code>等。</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p>创建一个叫做animals的包。通常使用小写的字母来命名避免与类、接口名字的冲突。在 animals 包中加入一个接口（interface）</p><p><code>Animal.java文件代码</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来，在同一个包中加入该接口的实现</p><p><code>MammalInt.java文件代码</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MammalInt</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">noOfLegs</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后，编译这两个文件，并把他们放在一个叫做animals的子目录中。 用下面的命令来运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> animals</span><br><span class="line">$ <span class="built_in">cp</span> Animal.class  MammalInt.class animals <span class="comment">#将这两个文件放在animals文件夹，也就是animals包下。</span></span><br><span class="line">$ java animals/MammalInt <span class="comment">#这是在命令行中执行MammalInt类。java是 Java 虚拟机（JVM）的启动命令，用于运行 Java 类。这里指定了animals/MammalInt，表示要运行animals目录下的MammalInt类。</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mammal eats</span><br><span class="line">Mammal travel</span><br></pre></td></tr></table></figure><p>或者在把这两个文件放在 手动新建的<code>animal</code>文件夹 下，然后在IntelliJ IDEA Community Edition 下直接运行<code>MammalInt.java</code>即可，可实现相同功能。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\<span class="number">19707</span>\iCloudDrive\iCloud~<span class="built_in">md</span>~obsidian\Happy\quzia_pac\Java_prac\包&gt; tree /F</span><br><span class="line">卷 OS 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 <span class="number">1511</span><span class="literal">-5760</span></span><br><span class="line">C:.</span><br><span class="line">├─.idea</span><br><span class="line">│      .gitignore</span><br><span class="line">│      misc.xml</span><br><span class="line">│      modules.xml</span><br><span class="line">│      vcs.xml</span><br><span class="line">│      workspace.xml</span><br><span class="line">│      包.iml</span><br><span class="line">│</span><br><span class="line">├─animals</span><br><span class="line">│      Animal.java</span><br><span class="line">│      MammalInt.java</span><br><span class="line">│</span><br><span class="line">└─out</span><br><span class="line">    └─production</span><br><span class="line">        └─包</span><br><span class="line">            ├─.idea</span><br><span class="line">            │      .gitignore</span><br><span class="line">            │      misc.xml</span><br><span class="line">            │      modules.xml</span><br><span class="line">            │      vcs.xml</span><br><span class="line">            │      包.iml</span><br><span class="line">            │</span><br><span class="line">            └─animals</span><br><span class="line">                    Animal.class</span><br><span class="line">                    MammalInt.class</span><br></pre></td></tr></table></figure></li></ol><p>上述代码中，<code>MammalInt</code>类实现了<code>Animal</code>接口，并实现了<code>eat</code>和<code>travel</code>方法，在方法中分别打印出了<code>Mammal eats</code>和<code>Mammal travels</code>。</p><h2 id="package-的目录结构设置"><a href="#package-的目录结构设置" class="headerlink" title="package 的目录结构设置"></a>package 的目录结构设置</h2><p>首先，在.java的文件中，如果想要使用<code>package &lt;name&gt;</code>语句，那么必须将该文件放到 <code>./&lt;name&gt;</code> 文件夹 (项目根目录的name文件夹) 下。 </p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>通常，一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是 Mihoyo.com，所有的包名都以 com.Mihoyo 开头。包名中的每一个部分对应一个子目录。</p><p>例如：有一个 <strong>com.Mihoyo.test</strong> 的包，这个包包含一个叫做 Mihoyo.java 的源文件，那么相应的，应该有如下面的一连串子目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">....\com\Mihoyo\test\Mihoyo.java</span><br></pre></td></tr></table></figure><p>那么文件<code>Mihoyo.java</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Mihoyo.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mihoyo</span> &#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Google</span> &#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用<code>javac -d . Mihoyo.java</code>编译文件，就会产生如下字节码文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\com\Mihoyo\test\Mihoyo.class</span><br><span class="line">.\com\Mihoyo\test\Google.class</span><br></pre></td></tr></table></figure><p>编译之后的 .class 文件应该和 .java 源文件一样，它们放置的目录应该跟包的名字对应起来。</p><p>但是，并不要求 .class 文件的路径跟相应的 .java 的路径一样。你可以分开来安排源码和类的目录。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;path-one&gt;\sources\com\Mihoyo\test\Mihoyo.java</span><br><span class="line">&lt;path-two&gt;\classes\com\Mihoyo\test\Google.class</span><br></pre></td></tr></table></figure><p>这样，你可以将你的类目录分享给其他的编程人员，而不用透露自己的源码。</p><h3 id="字节码文件的加载路径"><a href="#字节码文件的加载路径" class="headerlink" title="字节码文件的加载路径"></a>字节码文件的加载路径</h3><p>用这种方法管理源码和类文件可以让编译器和java 虚拟机（JVM）可以找到你程序中使用的所有类型：</p><ul><li>类目录的绝对路径叫做 <code>class path</code>。设置在系统变量 <code>CLASSPATH</code> 中。也可以在执行时使用<code>java -classpath &lt;class path&gt;</code>来指定或者直接更改<code>CLASSPATH</code>。（更改方法在下一个示例中）</li><li>编译器和 java 虚拟机通过将 <code>&lt;package name&gt; + &lt;class path&gt;</code> 来构造 .class 文件的路径。</li></ul><p>比如在上一个示例中：</p><ul><li><code>&lt;path- two&gt;\classes</code> 是 <code>class path</code></li><li><code>&lt;package name&gt;</code>是 <code>com.Mihoyo.test</code></li><li>所以最终 编译器和 JVM 会在 <code>&lt;path-two&gt;\classes\com\Mihoyo\test</code> 中找编译好的 .class 文件。</li></ul><p>一个 class path 可能会包含好几个路径，多路径应该用分隔符(<code>;</code>)分开。</p><p>默认情况下，编译器和 JVM 查找 <strong>当前目录</strong>。JAR 文件按包含 Java 平台相关的类，所以他们的目录默认放在了 <code>class path</code> 中。</p><p>默认的CLASSPATH如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassPath=.;C:\Program Files\Java\jdk<span class="literal">-17</span>\lib\dt.jar;C:\Program Files\Java\jdk<span class="literal">-17</span>\lib\tools.jar;C:\Program Files\Java\jdk<span class="literal">-17</span>\lib;</span><br></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>使用集成开发环境IDE <code>IntelliJ IDEA Community Edition</code>运行java文件时，包以及java文件编译后，默认存放在.&#x2F;out&#x2F;production&#x2F;&lt;根目录名称&gt;下，比如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\<span class="number">19707</span>\iCloudDrive\iCloud~<span class="built_in">md</span>~obsidian\Happy\quzia_pac\Java_prac\包&gt; tree /F</span><br><span class="line">卷 OS 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 <span class="number">1511</span><span class="literal">-5760</span></span><br><span class="line">C:.</span><br><span class="line">│  _Import.java</span><br><span class="line">│</span><br><span class="line">├─.idea</span><br><span class="line">│      .gitignore</span><br><span class="line">│      misc.xml</span><br><span class="line">│      modules.xml</span><br><span class="line">│      vcs.xml</span><br><span class="line">│      workspace.xml</span><br><span class="line">│      包.iml</span><br><span class="line">│</span><br><span class="line">├─animals</span><br><span class="line">│      Animal.java</span><br><span class="line">│      MammalInt.java</span><br><span class="line">│</span><br><span class="line">└─out</span><br><span class="line">    └─production</span><br><span class="line">        └─包</span><br><span class="line">            │  _Import.class</span><br><span class="line">            │</span><br><span class="line">            ├─.idea</span><br><span class="line">            │      .gitignore</span><br><span class="line">            │      misc.xml</span><br><span class="line">            │      modules.xml</span><br><span class="line">            │      vcs.xml</span><br><span class="line">            │      workspace.xml</span><br><span class="line">            │      包.iml</span><br><span class="line">            │</span><br><span class="line">            └─animals</span><br><span class="line">                    Animal.class</span><br><span class="line">                    MammalInt.class <span class="comment">#编译好的可被JVM加载执行的字节码文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是如果想要在另一个文件夹下使用这个包，有两种方法：</p><h4 id="本地库的使用方法"><a href="#本地库的使用方法" class="headerlink" title="本地库的使用方法"></a>本地库的使用方法</h4><p><strong>方法一：命令行执行指定包路径</strong></p><p>命令行执行，指定包路径<code>C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\包</code>即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\本地库和外部库&gt; java -classpath C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\包\out\production\包 .\OutLib.java</span><br><span class="line">Mammal eats</span><br><span class="line">Mammal travels</span><br></pre></td></tr></table></figure><p><strong>方法二：更改变量CLASSPATH</strong></p><p> <strong>在 CMD 中追加 <code>CLASSPATH</code></strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\19707&gt;<span class="title">set</span> <span class="title">CLASSPATH</span></span></span><br><span class="line"><span class="function"><span class="title">ClassPath</span>=.;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">dt.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">tools.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707&gt;<span class="title">set</span> <span class="title">CLASSPATH</span>=%<span class="title">CLASSPATH</span>%;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707&gt;<span class="title">set</span> <span class="title">CLASSPATH</span></span></span><br><span class="line"><span class="function"><span class="title">ClassPath</span>=.;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">dt.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">tools.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>;;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包</span></span><br></pre></td></tr></table></figure><p>上述命令中，<code>%CLASSPATH%</code> 会获取当前 <code>CLASSPATH</code> 的值，然后通过分号 <code>;</code> 将新的路径追加到后面。</p><p><strong>或在 PowerShell 中追加 <code>CLASSPATH</code></strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:CLASSPATH</span> = <span class="string">&quot;<span class="variable">$env:CLASSPATH</span>;C:\Users\19707\iCloudDrive\iCloud~md~obsidian\Happy\quzia_pac\Java_prac\包\out\production\包&quot;</span></span><br></pre></td></tr></table></figure><p>这里，<code>$env:CLASSPATH</code> 表示当前 <code>CLASSPATH</code> 的值，通过字符串拼接的方式将新的路径追加到后面。</p><p>效果如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">tree</span> /<span class="title">f</span> </span></span><br><span class="line"><span class="function">卷 <span class="title">OS</span> 的文件夹 <span class="title">PATH</span> 列表</span></span><br><span class="line"><span class="function">卷序列号为 1511-5760</span></span><br><span class="line"><span class="function"><span class="title">C</span>:.</span></span><br><span class="line"><span class="function">│  <span class="title">OutLib.java</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">set</span> <span class="title">CLASSPATH</span>=%<span class="title">CLASSPATH</span>%;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包                </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">set</span> <span class="title">CLASSPATH</span>                                              </span></span><br><span class="line"><span class="function"><span class="title">ClassPath</span>=.;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">dt.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>\<span class="title">tools.jar</span>;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Java</span>\<span class="title">jdk</span>-17\<span class="title">lib</span>;;<span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\包\<span class="title">out</span>\<span class="title">production</span>\包</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\19707\<span class="title">iCloudDrive</span>\<span class="title">iCloud</span>~<span class="title">md</span>~<span class="title">obsidian</span>\<span class="title">Happy</span>\<span class="title">quzia_pac</span>\<span class="title">Java_prac</span>\本地库和外部库&gt;<span class="title">java</span> <span class="title">OutLib.java</span></span></span><br><span class="line"><span class="function"><span class="title">Mammal</span> <span class="title">eats</span></span></span><br><span class="line"><span class="function"><span class="title">Mammal</span> <span class="title">travels</span></span></span><br></pre></td></tr></table></figure><h2 id="import-关键字"><a href="#import-关键字" class="headerlink" title="import 关键字"></a>import 关键字</h2><h3 id="Java包的导入与使用"><a href="#Java包的导入与使用" class="headerlink" title="Java包的导入与使用"></a>Java包的导入与使用</h3><ul><li><strong>导入其他包中的类</strong>：<ul><li>使用<code>import</code>语句<strong>导入其他包中的类</strong>，以便在当前类中可以直接使用这些类，而无需使用完整的包名</li><li>例如，要使用<code>java.util.Date</code>类，可以在代码中添加<code>import java.util.Date;</code>，然后就可以直接使用<code>Date</code>来创建对象等操作。</li><li>import 语句应该位于 package 语句之后</li></ul></li><li><strong>使用不同包中的同名类</strong>：<ul><li>当需要使用不同包中的同名类时，可以使用完整的包名来明确指定要使用的类。</li><li>例如，<code>java.util.Date</code>和<code>java.sql.Date</code>是两个不同的<code>Date</code>类，如果在代码中同时需要使用这两个类，可以通过完整的包名来区分它们。</li></ul></li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>在项目下创建文件<code>_Import.java</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> animals.MammalInt; <span class="comment">//使用包中的类，该类是公共的，本文件对它有访问权限。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_Import</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args [])</span>&#123;</span><br><span class="line">        <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">        m.eat();</span><br><span class="line">        m.travel();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后也输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mammal eats</span><br><span class="line">Mammal travels</span><br></pre></td></tr></table></figure><h3 id="包与访问控制"><a href="#包与访问控制" class="headerlink" title="包与访问控制"></a>包与访问控制</h3><ul><li>访问修饰符与包的关系：Java 中的访问修饰符（public、private、protected和默认（没有修饰符））用于控制类、方法和变量在不同包中的访问权限。<ul><li><strong><code>public</code></strong>：被<code>public</code>修饰的 <em>类、方法或变量</em> 可以在 <strong>任何包中的任何类</strong> 中被访问。</li><li><strong><code>private</code></strong>：<code>private</code>修饰的成员只能在 <strong>当前类内部</strong> 被访问，即使在<strong>同一个包中的其他类也无法访问</strong>。</li><li><strong><code>protected</code></strong>：<code>protected</code>修饰的成员可以在 <strong>当前类、同一个包中的其他类以及不同包中的子类</strong> 中被访问。</li><li><strong>默认（没有修饰符）</strong>：没有修饰符的成员具有包访问权限，即<strong>只能在同一个包中的类</strong>中被访问。</li></ul></li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 计算机语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> Package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭载过程</title>
      <link href="/2025/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
      <url>/2025/02/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭载过程"><a href="#博客搭载过程" class="headerlink" title="博客搭载过程"></a>博客搭载过程</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>git</li><li><a href="https://blog.csdn.net/Nicolecocol/article/details/136788200">node.js</a></li><li>Hexo</li></ol><h2 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm : 无法加载文件 D:\Program Files\nodejs\npm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsof</span><br><span class="line">t.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ npm</span><br><span class="line">+ ~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>Windows PowerShell 默认禁止运行脚本。以下是解决方法：</p><hr><h3 id="临时允许脚本运行（推荐）"><a href="#临时允许脚本运行（推荐）" class="headerlink" title="临时允许脚本运行（推荐）"></a>临时允许脚本运行（推荐）</h3><ol><li><p>以管理员身份打开 PowerShell</p></li><li><p>输入以下命令：</p><p>powershell</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope Process</span><br></pre></td></tr></table></figure><ul><li>这会临时允许当前会话运行脚本</li><li>关闭 PowerShell 后权限恢复默认</li></ul></li></ol><h2 id="Hexo命令教学-deepseek生成"><a href="#Hexo命令教学-deepseek生成" class="headerlink" title="Hexo命令教学(deepseek生成)"></a>Hexo命令教学(deepseek生成)</h2><p>以下是 Hexo 的常用命令及其功能说明，帮助你更高效地管理和发布博客内容：</p><hr><h3 id="一、初始化与安装"><a href="#一、初始化与安装" class="headerlink" title="一、初始化与安装"></a>一、初始化与安装</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo init &lt;folder&gt;</code></td><td>初始化一个 Hexo 项目到指定文件夹</td></tr><tr><td><code>npm install</code></td><td>安装 Hexo 项目依赖</td></tr><tr><td><code>npm install hexo-cli -g</code></td><td>全局安装 Hexo 命令行工具</td></tr></tbody></table><hr><h3 id="二、本地开发"><a href="#二、本地开发" class="headerlink" title="二、本地开发"></a>二、本地开发</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo clean</code></td><td>清除缓存文件和已生成的静态文件</td></tr><tr><td><code>hexo generate</code> 或 <code>hexo g</code></td><td>生成静态文件（默认输出到 <code>public</code> 文件夹）</td></tr><tr><td><code>hexo server</code> 或 <code>hexo s</code></td><td>启动本地服务器（默认地址：<code>http://localhost:4000</code>）</td></tr><tr><td><code>hexo s --debug</code></td><td>启动本地服务器并开启调试模式</td></tr><tr><td><code>hexo g --watch</code></td><td>生成静态文件并监听文件变化</td></tr></tbody></table><hr><h3 id="三、内容管理"><a href="#三、内容管理" class="headerlink" title="三、内容管理"></a>三、内容管理</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo new &lt;title&gt;</code> 或 <code>hexo n &lt;title&gt;</code></td><td>创建一篇新文章（默认路径：<code>source/_posts/</code>）</td></tr><tr><td><code>hexo new page &lt;pageName&gt;</code></td><td>创建一个新页面（默认路径：<code>source/&lt;pageName&gt;/index.md</code>）</td></tr><tr><td><code>hexo publish &lt;filename&gt;</code></td><td>发布草稿为正式文章</td></tr></tbody></table><hr><h3 id="四、部署与发布"><a href="#四、部署与发布" class="headerlink" title="四、部署与发布"></a>四、部署与发布</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo deploy</code> 或 <code>hexo d</code></td><td>部署网站到远程服务器</td></tr><tr><td><code>hexo g -d</code></td><td>生成静态文件并部署</td></tr><tr><td><code>hexo d --generate</code></td><td>部署前自动生成静态文件</td></tr></tbody></table><hr><h3 id="五、插件与主题"><a href="#五、插件与主题" class="headerlink" title="五、插件与主题"></a>五、插件与主题</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>npm install &lt;plugin-name&gt;</code></td><td>安装 Hexo 插件</td></tr><tr><td><code>npm uninstall &lt;plugin-name&gt;</code></td><td>卸载 Hexo 插件</td></tr><tr><td><code>git clone &lt;theme-repo-url&gt; themes/&lt;theme-name&gt;</code></td><td>下载并安装主题</td></tr></tbody></table><hr><h3 id="六、调试与帮助"><a href="#六、调试与帮助" class="headerlink" title="六、调试与帮助"></a>六、调试与帮助</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo version</code> 或 <code>hexo -v</code></td><td>查看 Hexo 版本</td></tr><tr><td><code>hexo help</code></td><td>查看 Hexo 帮助信息</td></tr><tr><td><code>hexo list</code></td><td>列出所有可用命令</td></tr></tbody></table><hr><h3 id="七、常用组合命令"><a href="#七、常用组合命令" class="headerlink" title="七、常用组合命令"></a>七、常用组合命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></td><td>清除缓存、生成静态文件并启动本地服务器</td></tr><tr><td><code>hexo clean &amp;&amp; hexo g -d</code></td><td>清除缓存、生成静态文件并部署</td></tr></tbody></table><hr><h3 id="八、配置文件"><a href="#八、配置文件" class="headerlink" title="八、配置文件"></a>八、配置文件</h3><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td><code>_config.yml</code></td><td>Hexo 主配置文件</td></tr><tr><td><code>_config.&lt;theme-name&gt;.yml</code></td><td>主题配置文件</td></tr><tr><td><code>source/_posts/</code></td><td>文章存放目录</td></tr><tr><td><code>source/_drafts/</code></td><td>草稿存放目录</td></tr></tbody></table><hr><h3 id="九、其他实用命令"><a href="#九、其他实用命令" class="headerlink" title="九、其他实用命令"></a>九、其他实用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo migrate &lt;type&gt;</code></td><td>从其他博客系统迁移内容</td></tr><tr><td><code>hexo render &lt;file&gt;</code></td><td>渲染指定文件</td></tr><tr><td><code>hexo list &lt;type&gt;</code></td><td>列出指定类型的文件（如文章、页面等）</td></tr></tbody></table><hr><h3 id="十、注意事项"><a href="#十、注意事项" class="headerlink" title="十、注意事项"></a>十、注意事项</h3><ol><li><strong>部署前务必执行 <code>hexo clean</code></strong>：避免缓存导致的问题。</li><li><strong>修改配置后重启服务器</strong>：确保配置生效。</li><li><strong>使用 <code>--debug</code> 参数</strong>：调试时查看详细日志。</li></ol><p>掌握这些命令后，你可以更高效地管理和发布 Hexo 博客内容！</p><h2 id="markdown动态字体"><a href="#markdown动态字体" class="headerlink" title="markdown动态字体"></a>markdown动态字体</h2><p><a href="https://readme-typing-svg.demolab.com/demo/?lines=%E6%88%91%E6%9C%89%E4%BD%A0%E4%BB%AC%E6%88%91%E9%9D%9E%E5%B8%B8%E5%B9%B8%E7%A6%8F">Readme Typing SVG - Demo Site</a></p><p>效果如下：</p><p><a href="https://git.io/typing-svg"><img src="https://readme-typing-svg.demolab.com/?font=Fira+Code&pause=1000&width=435&lines=%E6%88%91%E6%9C%89%E4%BD%A0%E4%BB%AC%E6%88%91%E9%9D%9E%E5%B8%B8%E5%B9%B8%E7%A6%8F" alt="Typing SVG"></a></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>很推荐</p><p><a href="https://blog.aqcoder.cn/posts/447d/">Butterfly博客主题搭建系列：基础教程 | 枫叶</a></p><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h2><p>修改_config.butterfly.yml里面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Loading Animation</span><br><span class="line">preloader:</span><br><span class="line">  enable: true</span><br><span class="line">  # source</span><br><span class="line">  # 1. fullpage-loading</span><br><span class="line">  # 2. pace (progress bar)</span><br><span class="line">  source: 1</span><br><span class="line">  # pace theme (see https://codebyzach.github.io/pace/)</span><br><span class="line">  pace_css_url:</span><br></pre></td></tr></table></figure><p>enable为true即可</p><h2 id="搜索系统"><a href="#搜索系统" class="headerlink" title="搜索系统"></a>搜索系统</h2><p><a href="https://blog.aqcoder.cn/posts/447d/#%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F">Butterfly 博客主题搭建系列：基础教程 | 枫叶</a></p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><a href="https://blog.aqcoder.cn/posts/447d/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5">Butterfly 博客主题搭建系列：基础教程 | 枫叶</a></p><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><p><a href="https://zsyyblog.com/cf6da462.html#%E6%96%B0%E7%89%88%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89">Hexo+Butterfly 增加留言板信封 | 竹山一叶</a>  使用新版哦！</p><h3 id="留言板信封"><a href="#留言板信封" class="headerlink" title="留言板信封"></a>留言板信封</h3><p><a href="https://akilar.top/posts/e2d3c450/">信笺样式留言板 | Akilarの糖果屋</a></p><h2 id="半自动化生成相册"><a href="#半自动化生成相册" class="headerlink" title="半自动化生成相册"></a>半自动化生成相册</h2><p>参考文章：</p><p>基于 <a href="https://blog.imyan.ren/posts/64b2bc9e/">半自动化生成博客相册 | 炎忍的博客</a> 这篇文章，我进行了改进，让脚本更稳定。</p><p>基于 <a href="https://www.fattymonkey.com/post/10066.html">Butterfly主题美化之图集相关 | 繁体猴の客栈</a> 这篇文章，配置相册封面和页面设置。</p><h3 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Program Files\happy-blog\<span class="built_in">source</span>&gt; tree /F</span><br><span class="line">卷 原神 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 0EDC-5FA0</span><br><span class="line">D:.</span><br><span class="line">├─about</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─categories</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─comments</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─gallery <span class="comment">#相册页面</span></span><br><span class="line">│  │  index.md</span><br><span class="line">│  │</span><br><span class="line">│  └─harbin-tourism <span class="comment">#具体的相册项目</span></span><br><span class="line">│      │  g.py <span class="comment"># 自动生成markdown的python文件位置</span></span><br><span class="line">│      │  index.md <span class="comment"># 该页面的index.md</span></span><br><span class="line">│      │</span><br><span class="line">│      └─images <span class="comment">#该项目对应的图片集</span></span><br><span class="line">│              me&amp;flower.jpg</span><br><span class="line">│              me&amp;rabbit.jpg</span><br><span class="line">│              me&amp;snowman.jpg</span><br><span class="line">│              一起购物.jpg</span><br><span class="line">│              中央大街的合照.jpg</span><br><span class="line">│              九转小莫.jpg</span><br><span class="line">│              九转小莫豆腐.jpg</span><br><span class="line">│              九转小莫锅包肉.jpg</span><br><span class="line">│              冰雪大世界合照.jpg</span><br><span class="line">│              婷姐和班长.jpg</span><br><span class="line">│              懒得喷.jpg</span><br><span class="line">│              海底捞给王琳婷过生日.jpg</span><br><span class="line">│              滑雪的合照.jpg</span><br><span class="line">│              狮子康在演奏钢琴.jpg</span><br><span class="line">│              美丽的冰雪大世界.jpg</span><br><span class="line">│              雪棉豆沙.jpg</span><br><span class="line">├─<span class="built_in">link</span></span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─tags</span><br><span class="line">│      index.md</span><br><span class="line">│</span><br><span class="line">├─_data</span><br><span class="line">│      link.yml</span><br><span class="line">│</span><br><span class="line">└─_posts</span><br><span class="line">        Yolo5第一代识别模型训练过程.md</span><br></pre></td></tr></table></figure><h3 id="g-py"><a href="#g-py" class="headerlink" title="g.py"></a><code>g.py</code></h3><p><strong>功能</strong></p><ul><li>自动向特定相册对应的index.md中追加图片的markdown语句。</li><li>但是还是需要<code>hexo new page &lt;pageName&gt;</code>手动生成特定相册对应的页面。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>] <span class="comment">#D:\Program Files\happy-blog\source\gallery\harbin-tourism\</span></span><br><span class="line">abspath_images = path + <span class="string">&#x27;\\images&#x27;</span> <span class="comment">#图片绝对路径</span></span><br><span class="line">xdpath_images = <span class="string">&#x27;images&#x27;</span> <span class="comment"># 图片相对路径 images</span></span><br><span class="line"></span><br><span class="line">os.chdir(abspath_images) <span class="comment">#harbin-tourism\images</span></span><br><span class="line">ls_file = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.scandir():</span><br><span class="line">    <span class="keyword">if</span> file.is_file():</span><br><span class="line">        ls_file.append(file.name)</span><br><span class="line"></span><br><span class="line">md_text = <span class="string">&quot;\n&#123;% gallery %&#125;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> ls_file:</span><br><span class="line">    md_path = <span class="string">&quot;![&quot;</span> + os.path.splitext(image)[<span class="number">0</span>] + <span class="string">&quot;](&quot;</span> + <span class="built_in">str</span>(xdpath_images)+ <span class="string">&quot;\\&quot;</span> + image+ <span class="string">&quot;)&quot;</span></span><br><span class="line">    md_text += md_path.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">md_text += <span class="string">&quot;&#123;% endgallery %&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">os.chdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.md&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(md_text)</span><br></pre></td></tr></table></figure><h3 id="自动化生成markdown操作步骤"><a href="#自动化生成markdown操作步骤" class="headerlink" title="自动化生成markdown操作步骤"></a>自动化生成markdown操作步骤</h3><ol><li><code>hexo new page gallery</code>生成gallery页面</li><li><code>hexo new page &lt;具体的相册名称&gt;</code>生成某套相册，然后把它移动到上一步生成的gallery目录下。</li><li>在&lt;具体的相册名称&gt;目录下创建images目录，把需要的图片放进去。把g.py也放在该目录下。</li><li><code>python g.py</code>自动生成markdown。</li></ol><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/assets/image-20250210225448620.png" alt="image-20250210225448620"></p><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mailto:&lt;邮箱地址&gt;</span><br></pre></td></tr></table></figure><p>这相当于一个URL外部链接，点击后可以自动打开用户发送邮箱的软件然后向填写的邮箱地址发送邮箱。</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;自我介绍界面&gt;</span><br></pre></td></tr></table></figure><p>我的是默认的<code>hexo new page about</code></p><p>然后填写~source&#x2F;about&#x2F;index.md即可完成自我介绍板块。</p><h2 id="文章发表"><a href="#文章发表" class="headerlink" title="文章发表"></a>文章发表</h2><ol><li><p><code>hexo new &lt;titlee&gt; </code>创建文章</p><p>我的文章如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 你的文章标题</span><br><span class="line">date: 2025-02-04 14:00:00</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 技术</span><br><span class="line"><span class="bullet">  -</span> 学习</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> 编程</span><br><span class="line"><span class="section">comments: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 文章的标题</span></span><br><span class="line"></span><br><span class="line">这里是文章的内容。你可以用 Markdown 格式书写你的文章，包括代码块、列表、图片等。</span><br><span class="line"></span><br><span class="line"><span class="section">## 示例代码</span></span><br><span class="line"></span><br><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">def hello_world():</span></span><br><span class="line"><span class="code">    print(&quot;Hello, World!&quot;)</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></li><li><p>三连可本地查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于yolov8m物体检测模型的前端展示项目</title>
      <link href="/2025/02/04/%E5%9F%BA%E4%BA%8Eyolov8m%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/02/04/%E5%9F%BA%E4%BA%8Eyolov8m%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="基于yolov8m物体检测模型的前端展示项目"><a href="#基于yolov8m物体检测模型的前端展示项目" class="headerlink" title="基于yolov8m物体检测模型的前端展示项目"></a>基于yolov8m物体检测模型的前端展示项目</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>基于yolov8m和机器视觉的冰雪检测模型</li><li>选择自动划分数据集为训练集和验证集。</li><li>github地址：<a href="https://github.com/EDwardGaming/Front-end-display-project-based-on-YOLOV8m-object-detection-model">https://github.com/EDwardGaming/Front-end-display-project-based-on-YOLOV8m-object-detection-model</a></li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip pip install -r .\requirements.txt</span><br></pre></td></tr></table></figure><h2 id="项目目录配置"><a href="#项目目录配置" class="headerlink" title="项目目录配置"></a>项目目录配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Program Files\road_snow&gt; tree</span><br><span class="line">卷 原神 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 0EDC-5FA0</span><br><span class="line">D:.</span><br><span class="line">├─.idea</span><br><span class="line">│  └─inspectionProfiles</span><br><span class="line">├─.vscode</span><br><span class="line">├─training_set</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">└─yolov8n</span><br><span class="line">    ├─runs</span><br><span class="line">    │  └─detect</span><br><span class="line">    │      └─train310</span><br><span class="line">    │          └─weights</span><br><span class="line">    ├─static</span><br><span class="line">    │  ├─css</span><br><span class="line">    │  ├─results</span><br><span class="line">    │  └─uploads</span><br><span class="line">    └─templates</span><br></pre></td></tr></table></figure><h2 id="识别对象分类"><a href="#识别对象分类" class="headerlink" title="识别对象分类"></a>识别对象分类</h2><p>训练决定舍弃数据集中背景和干燥这两大类，只选择moist、snow和ice这三类。目的是只为识别冰雪，增强模型识别的针对性。</p><table><thead><tr><th>类型</th><th>危险指数</th></tr></thead><tbody><tr><td>moist</td><td>低度危险</td></tr><tr><td>snow</td><td>中度危险</td></tr><tr><td>ice</td><td>高度危险</td></tr></tbody></table><p>后续想增加<code>water </code>类型,指代更多的水，就是更危险的路面。</p><h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>在之前的YoloV5n模型的基础上，引入纯态数据集进行训练。纯态数据集里面包含的都是单一类型图片，就是整张图片区域都是moist、snow或ice中的一种。</p><h3 id="数据集目录结构"><a href="#数据集目录结构" class="headerlink" title="数据集目录结构"></a>数据集目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PS D:\dataset&gt; tree</span><br><span class="line">卷 原神 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 0EDC-5FA0</span><br><span class="line">D:.</span><br><span class="line">├─my_png <span class="comment">#自己找的一些用于测试的图片</span></span><br><span class="line">├─PNG </span><br><span class="line">│  ├─12.01</span><br><span class="line">│  └─12.02 <span class="comment">#图片和标注图片的json文件</span></span><br><span class="line">├─video <span class="comment">#视频</span></span><br><span class="line">└─纯态 </span><br><span class="line">    ├─labels</span><br><span class="line">    ├─冰</span><br><span class="line">    ├─干燥</span><br><span class="line">    ├─潮湿</span><br><span class="line">    ├─积水</span><br><span class="line">    └─雪</span><br></pre></td></tr></table></figure><h3 id="yolov8m-yaml配置"><a href="#yolov8m-yaml配置" class="headerlink" title="yolov8m.yaml配置"></a><code>yolov8m.yaml</code>配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">D:\Program</span> <span class="string">Files\road_snow\images\train</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">D:\Program</span> <span class="string">Files\road_snow\images\val</span></span><br><span class="line"><span class="attr">test:</span> <span class="string">D:\Program</span> <span class="string">Files\road_snow\images\test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动划分比例（训练集:验证集）</span></span><br><span class="line"><span class="attr">split:</span> [<span class="number">0.8</span>, <span class="number">0.2</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">nc:</span> <span class="number">3</span>  <span class="comment"># 类别数量</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;water&#x27;</span>,<span class="string">&#x27;snow&#x27;</span>,<span class="string">&#x27;ice&#x27;</span>]  <span class="comment"># 替换为你的类别名称</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h2><h3 id="标注纯态数据集"><a href="#标注纯态数据集" class="headerlink" title="标注纯态数据集"></a>标注纯态数据集</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li><p>需要为Yolo机器学习标注数据集，有以下数据集：moist 、snow和ice三种。需要实现数据集标注。返回图片对应的yolo的.txt标注文件。</p></li><li><p>现在有一些纯态图片，就是整张图片区域都是moist、snow或ice中的一种。</p></li><li><p>标注方法的话，纯态代表整张图片，所以对应的<code>label.txt</code>就是 <code>&lt;class_id&gt; 0.5 0.5 1.0 1.0</code></p></li><li><p>再把标注过的图片移动到训练集下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├─training_set</span><br><span class="line">   ├─images</span><br><span class="line">   └─labels</span><br></pre></td></tr></table></figure></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该脚本实现划分未标注的纯态数据集为训练集目录的功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义类别和 class_id</span></span><br><span class="line">categories = &#123;</span><br><span class="line">    <span class="string">&quot;冰&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;积水&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;潮湿&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;雪&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始数据目录</span></span><br><span class="line">base_dirs = &#123;</span><br><span class="line">    <span class="string">&quot;冰&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\冰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;积水&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\积水&quot;</span>,</span><br><span class="line">    <span class="string">&quot;潮湿&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\潮湿&quot;</span>,</span><br><span class="line">    <span class="string">&quot;雪&quot;</span>: <span class="string">r&quot;D:\Program Files\数据集\纯态\雪&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标存放路径</span></span><br><span class="line">dataset_dir = <span class="string">r&quot;D:\Program Files\road_snow\training_set&quot;</span> <span class="comment">#数据集绝对路径</span></span><br><span class="line">img_dir = os.path.join(dataset_dir, <span class="string">&quot;images&quot;</span>)</span><br><span class="line">label_dir = os.path.join(dataset_dir, <span class="string">&quot;labels&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> [img_dir, label_dir]:</span><br><span class="line">    os.makedirs(path, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有类别的图片</span></span><br><span class="line"><span class="keyword">for</span> category, dir_path <span class="keyword">in</span> base_dirs.items():</span><br><span class="line">    class_id = categories[category]</span><br><span class="line">    all_images = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(dir_path) <span class="keyword">if</span> f.endswith((<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.JPG&#x27;</span>, <span class="string">&#x27;.PNG&#x27;</span>, <span class="string">&#x27;.JPEG&#x27;</span>))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理训练集</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> all_images:</span><br><span class="line">        src_img_path = os.path.join(dir_path, filename)</span><br><span class="line">        dst_img_path = os.path.join(img_dir, filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 复制图片</span></span><br><span class="line">        shutil.copy(src_img_path, dst_img_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成标签</span></span><br><span class="line">        label_filename = os.path.splitext(filename)[<span class="number">0</span>] + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">        label_path = os.path.join(label_dir, label_filename)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(label_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;<span class="subst">&#123;class_id&#125;</span> 0.5 0.5 1.0 1.0\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;纯态数据集划分完成！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="标注普通数据集"><a href="#标注普通数据集" class="headerlink" title="标注普通数据集"></a>标注普通数据集</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><ul><li><p>是图片文件和它对应的json标注文件，需要把这些.json标注转为.txt。之后在分别复制到训练集下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Program Files\数据集\PNG\12.02&gt; <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: D:\Program Files\数据集\PNG\12.02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a----         2025/1/20     17:42        8872155 IMG_0721.json</span><br><span class="line">-a----         2025/1/20     17:44        6337944 IMG_0721.PNG</span><br><span class="line">-a----         2025/1/20     17:49        8872155 IMG_0722.json</span><br><span class="line">-a----         2025/1/20     17:48        6392482 IMG_0722.PNG</span><br><span class="line">-a----         2025/1/20     17:51        8872155 IMG_0723.json</span><br><span class="line">-a----         2025/1/20     17:46        6293090 IMG_0723.PNG</span><br><span class="line">-a----         2025/1/20     17:56        8872155 IMG_0724.json</span><br><span class="line">......(省略)</span><br></pre></td></tr></table></figure></li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该脚本实现划分 将以.json格式标注过的数据集转成.txt格式 并将这些文件构建成训练目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路径</span></span><br><span class="line">image_dir = <span class="string">r&quot;D:\数据集\PNG\12.02&quot;</span>  <span class="comment"># 原始图片目录</span></span><br><span class="line">label_output_dir = <span class="string">r&quot;D:\Program Files\road_snow\training_set\labels&quot;</span></span><br><span class="line">image_output_dir = <span class="string">r&quot;D:\Program Files\road_snow\training_set\images&quot;</span></span><br><span class="line">os.makedirs(label_output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(image_output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">suffix_file = [<span class="string">&quot;.PNG&quot;</span>,<span class="string">&quot;.JPG&quot;</span>,<span class="string">&quot;.JPEG&quot;</span>,<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义类别</span></span><br><span class="line">classes = [<span class="string">&#x27;water&#x27;</span>, <span class="string">&#x27;snow&#x27;</span>, <span class="string">&#x27;ice&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析 JSON 并转换为 YOLO 格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_yolo</span>(<span class="params">json_file, img_width, img_height</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    </span><br><span class="line">    yolo_labels = []</span><br><span class="line">    <span class="keyword">for</span> shape <span class="keyword">in</span> data[<span class="string">&#x27;shapes&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> shape[<span class="string">&#x27;shape_type&#x27;</span>] == <span class="string">&#x27;polygon&#x27;</span>:</span><br><span class="line">            label = shape[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> classes:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            class_id = classes.index(label)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算多边形的外接矩形</span></span><br><span class="line">            points = shape[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">            x_coords = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> points]</span><br><span class="line">            y_coords = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> points]</span><br><span class="line">            x_min, x_max = <span class="built_in">min</span>(x_coords), <span class="built_in">max</span>(x_coords)</span><br><span class="line">            y_min, y_max = <span class="built_in">min</span>(y_coords), <span class="built_in">max</span>(y_coords)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 转换为 YOLO 格式</span></span><br><span class="line">            x_center = (x_min + x_max) / <span class="number">2</span> / img_width</span><br><span class="line">            y_center = (y_min + y_max) / <span class="number">2</span> / img_height</span><br><span class="line">            width = (x_max - x_min) / img_width</span><br><span class="line">            height = (y_max - y_min) / img_height</span><br><span class="line">            yolo_labels.append(<span class="string">f&quot;<span class="subst">&#123;class_id&#125;</span> <span class="subst">&#123;x_center&#125;</span> <span class="subst">&#123;y_center&#125;</span> <span class="subst">&#123;width&#125;</span> <span class="subst">&#123;height&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> yolo_labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片和标签</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_data</span>(<span class="params">img_file, labels</span>):</span><br><span class="line">    base_name = os.path.basename(img_file).replace(<span class="string">&quot;.PNG&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.JPG&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.JPEG&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> suffix_file:</span><br><span class="line">        <span class="keyword">if</span> os.path.basename(img_file).endswith(i):</span><br><span class="line">            img_output_path = os.path.join(image_output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    label_output_path = os.path.join(label_output_dir, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(label_output_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>.join(labels))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复制图片</span></span><br><span class="line">    shutil.copy(img_file, img_output_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有图片文件</span></span><br><span class="line">image_paths = []</span><br><span class="line"><span class="keyword">for</span> img_file <span class="keyword">in</span> os.listdir(image_dir):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> suffix_file:</span><br><span class="line">        <span class="keyword">if</span> img_file.endswith(i):</span><br><span class="line">            json_file = os.path.join(image_dir, img_file.replace(<span class="string">&quot;.PNG&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.JPG&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.JPEG&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.json&quot;</span>).replace(<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.json&quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(json_file):<span class="comment">#如果存在对应的json则操作</span></span><br><span class="line">                <span class="comment"># 假设图片分辨率为 2400x1600，可以根据实际情况调整</span></span><br><span class="line">                img_width, img_height = <span class="number">2400</span>, <span class="number">1600</span></span><br><span class="line">                labels = convert_to_yolo(json_file, img_width, img_height)</span><br><span class="line">                save_data(os.path.join(image_dir, img_file), labels)</span><br><span class="line">                image_paths.append(os.path.join(image_output_dir, img_file))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 手动划分训练集和验证集</span></span><br><span class="line"><span class="string">random.shuffle(image_paths)</span></span><br><span class="line"><span class="string">split_idx = int(len(image_paths) * 0.8)</span></span><br><span class="line"><span class="string">train_imgs, val_imgs = image_paths[:split_idx], image_paths[split_idx:]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建训练集和验证集目录</span></span><br><span class="line"><span class="string">train_dir = os.path.join(image_output_dir, &quot;train&quot;)</span></span><br><span class="line"><span class="string">val_dir = os.path.join(image_output_dir, &quot;val&quot;)</span></span><br><span class="line"><span class="string">os.makedirs(train_dir, exist_ok=True)</span></span><br><span class="line"><span class="string">os.makedirs(val_dir, exist_ok=True)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 移动文件</span></span><br><span class="line"><span class="string">for img_file in train_imgs:</span></span><br><span class="line"><span class="string">    shutil.move(img_file, os.path.join(train_dir, os.path.basename(img_file)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for img_file in val_imgs:</span></span><br><span class="line"><span class="string">    shutil.move(img_file, os.path.join(val_dir, os.path.basename(img_file)))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据集划分完成！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>创建训练目录<code>yolov8m</code>，在该目录下创建<code>train.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载预训练的 YOLOv8 模型</span></span><br><span class="line">model = YOLO(<span class="string">r&quot;D:\Program Files\road_snow\yolov8n\yolov8m.pt&quot;</span>)  <span class="comment"># 这里可以根据你的需求替换为其他版本的 YOLO 模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置训练参数</span></span><br><span class="line">train_args = &#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;yolov8m.yaml&#x27;</span>,  <span class="comment"># 数据集配置文件路径</span></span><br><span class="line">    <span class="string">&#x27;epochs&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 训练的轮数</span></span><br><span class="line">    <span class="string">&#x27;batch&#x27;</span>: <span class="number">16</span>,  <span class="comment"># 每个批次的大小</span></span><br><span class="line">    <span class="string">&#x27;imgsz&#x27;</span>: <span class="number">640</span>,  <span class="comment"># 输入图像的大小</span></span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;cuda&#x27;</span>,  <span class="comment"># 使用 GPU 训练，如果没有 GPU 可以改为 &#x27;cpu&#x27;</span></span><br><span class="line">    <span class="string">&#x27;project&#x27;</span>: <span class="string">&#x27;runs/detect&#x27;</span>,  <span class="comment"># 存储训练结果的目录</span></span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;train3&#x27;</span>,  <span class="comment"># 训练结果保存的子目录</span></span><br><span class="line">    <span class="string">&#x27;save&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 是否保存模型</span></span><br><span class="line">    <span class="string">&#x27;save_period&#x27;</span>: -<span class="number">1</span>,  <span class="comment"># 每隔多少轮保存一次模型</span></span><br><span class="line">    <span class="string">&#x27;verbose&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 是否打印详细日志</span></span><br><span class="line">    <span class="string">&#x27;workers&#x27;</span>: <span class="number">0</span>,  <span class="comment"># 数据加载器的工作线程数</span></span><br><span class="line">    <span class="string">&#x27;optimizer&#x27;</span>: <span class="string">&#x27;AdamW&#x27;</span>,  <span class="comment"># 使用自动优化器（Adam 或 SGD）</span></span><br><span class="line">    <span class="string">&#x27;lr0&#x27;</span>: <span class="number">0.003</span>,  <span class="comment"># 初始学习率</span></span><br><span class="line">    <span class="string">&#x27;lrf&#x27;</span>: <span class="number">0.2</span>,  <span class="comment"># 学习率衰减率</span></span><br><span class="line">    <span class="string">&#x27;warmup_epochs&#x27;</span>: <span class="number">7</span>,  <span class="comment"># 预热的轮数</span></span><br><span class="line">    <span class="string">&#x27;box&#x27;</span>: <span class="number">7.5</span>,  <span class="comment"># 训练的框回归损失权重</span></span><br><span class="line">    <span class="string">&#x27;cls&#x27;</span>: <span class="number">0.5</span>,  <span class="comment"># 类别损失权重</span></span><br><span class="line">    <span class="string">&#x27;dfl&#x27;</span>: <span class="number">1.5</span>,  <span class="comment"># 关键点损失权重</span></span><br><span class="line">    <span class="string">&#x27;pose&#x27;</span>: <span class="number">12.0</span>,  <span class="comment"># 姿态估计损失权重</span></span><br><span class="line">    <span class="string">&#x27;nbs&#x27;</span>: <span class="number">64</span>,  <span class="comment"># 批次大小</span></span><br><span class="line">    <span class="string">&#x27;freeze&#x27;</span> : <span class="number">10</span>,  <span class="comment"># 冻结训练的层数</span></span><br><span class="line">    <span class="string">&#x27;split&#x27;</span>: <span class="string">&quot;0.8 0.2 &quot;</span>  <span class="comment"># 训练集和验证集的比例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 打印训练参数</span></span><br><span class="line"><span class="built_in">print</span>(train_args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">train_results = model.train(**train_args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出训练结果</span></span><br><span class="line"><span class="built_in">print</span>(train_results)</span><br></pre></td></tr></table></figure><h3 id="训练参数打印"><a href="#训练参数打印" class="headerlink" title="训练参数打印"></a>训练参数打印</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">engine\trainer: </span><br><span class="line">task=detect</span><br><span class="line">mode=train</span><br><span class="line">model=D:\Program Files\road_snow\yolov8n\yolov8m.pt</span><br><span class="line">data=yolov8m.yaml</span><br><span class="line">epochs=300</span><br><span class="line"><span class="keyword">time</span>=None</span><br><span class="line">patience=100</span><br><span class="line">batch=16</span><br><span class="line">imgsz=640</span><br><span class="line">save=True</span><br><span class="line">save_period=-1</span><br><span class="line">cache=False</span><br><span class="line">device=cuda</span><br><span class="line">workers=0</span><br><span class="line">project=runs/detect</span><br><span class="line">name=train32</span><br><span class="line">exist_ok=False</span><br><span class="line">pretrained=True</span><br><span class="line">optimizer=AdamW</span><br><span class="line">verbose=True</span><br><span class="line">seed=0</span><br><span class="line">deterministic=True</span><br><span class="line">single_cls=False</span><br><span class="line">rect=False</span><br><span class="line">cos_lr=False</span><br><span class="line">close_mosaic=10</span><br><span class="line">resume=False</span><br><span class="line">amp=True</span><br><span class="line">fraction=1.0</span><br><span class="line">profile=False</span><br><span class="line">freeze=10</span><br><span class="line">multi_scale=False</span><br><span class="line">overlap_mask=True</span><br><span class="line">mask_ratio=4</span><br><span class="line">dropout=0.0</span><br><span class="line">val=True</span><br><span class="line"><span class="built_in">split</span>=0.8 0.2</span><br><span class="line">save_json=False</span><br><span class="line">save_hybrid=False</span><br><span class="line">conf=None</span><br><span class="line">iou=0.7</span><br><span class="line">max_det=300</span><br><span class="line">half=False</span><br><span class="line">dnn=False</span><br><span class="line">plots=True</span><br><span class="line"><span class="built_in">source</span>=None</span><br><span class="line">vid_stride=1</span><br><span class="line">stream_buffer=False</span><br><span class="line">visualize=False</span><br><span class="line">augment=False</span><br><span class="line">agnostic_nms=False</span><br><span class="line">classes=None</span><br><span class="line">retina_masks=False</span><br><span class="line">embed=None</span><br><span class="line">show=False</span><br><span class="line">save_frames=False</span><br><span class="line">save_txt=False</span><br><span class="line">save_conf=False</span><br><span class="line">save_crop=False</span><br><span class="line">show_labels=True</span><br><span class="line">show_conf=True</span><br><span class="line">show_boxes=True</span><br><span class="line">line_width=None</span><br><span class="line">format=torchscript</span><br><span class="line">keras=False</span><br><span class="line">optimize=False</span><br><span class="line">int8=False</span><br><span class="line">dynamic=False</span><br><span class="line">simplify=True</span><br><span class="line">opset=None</span><br><span class="line">workspace=None</span><br><span class="line">nms=False</span><br><span class="line">lr0=0.003</span><br><span class="line">lrf=0.2</span><br><span class="line">momentum=0.937</span><br><span class="line">weight_decay=0.0005</span><br><span class="line">warmup_epochs=7</span><br><span class="line">warmup_momentum=0.8</span><br><span class="line">warmup_bias_lr=0.1</span><br><span class="line">box=7.5</span><br><span class="line">cls=0.5</span><br><span class="line">dfl=1.5</span><br><span class="line">pose=12.0</span><br><span class="line">kobj=1.0</span><br><span class="line">nbs=64</span><br><span class="line">hsv_h=0.015</span><br><span class="line">hsv_s=0.7</span><br><span class="line">hsv_v=0.4</span><br><span class="line">degrees=0.0</span><br><span class="line">translate=0.1</span><br><span class="line">scale=0.5</span><br><span class="line">shear=0.0</span><br><span class="line">perspective=0.0</span><br><span class="line">flipud=0.0</span><br><span class="line">fliplr=0.5</span><br><span class="line">bgr=0.0</span><br><span class="line">mosaic=1.0</span><br><span class="line">mixup=0.0</span><br><span class="line">copy_paste=0.0</span><br><span class="line">copy_paste_mode=flip</span><br><span class="line">auto_augment=randaugment</span><br><span class="line">erasing=0.4</span><br><span class="line">crop_fraction=1.0</span><br><span class="line">cfg=None</span><br><span class="line">tracker=botsort.yaml</span><br><span class="line">save_dir=runs\detect\train32</span><br></pre></td></tr></table></figure><h2 id="模型评估与优化"><a href="#模型评估与优化" class="headerlink" title="模型评估与优化"></a>模型评估与优化</h2><h3 id="效果图展示"><a href="#效果图展示" class="headerlink" title="效果图展示"></a>效果图展示</h3><p><img src="/assets/IMG_6163.jpg" alt="IMG_6163"></p><p><img src="/assets/IMG_5882.jpg" alt="IMG_5882"></p><p><img src="/assets/IMG_4644.jpg" alt="IMG_4644"></p><p><img src="/assets/IMG_0814.jpg" alt="IMG_0814"></p><p><img src="/assets/IMG_0730.jpg" alt="IMG_0730"></p><p><img src="/assets/IMG_0724.jpg" alt="IMG_0724"></p><p><img src="/assets/IMG_0666.jpg" alt="IMG_0666"></p><p><img src="/assets/IMG_0607.jpg" alt="IMG_0607"></p><p><img src="/assets/IMG_0569.jpg" alt="IMG_0569"></p><h2 id="危险评估算法设计"><a href="#危险评估算法设计" class="headerlink" title="危险评估算法设计"></a>危险评估算法设计</h2><p>日后的工作</p><h2 id="前端展示代码"><a href="#前端展示代码" class="headerlink" title="前端展示代码"></a>前端展示代码</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><code>static/css/styles.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0056b3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#result</span> <span class="selector-tag">img</span>, <span class="selector-id">#result</span> <span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>templates/index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/styles.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>YOLOv8 Object Detection<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>YOLOv8 Object Detection<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;upload-form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*,video/*&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload and Predict<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Prediction Result:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;result-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Result will be displayed here&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%; display: none;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;result-video&quot;</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%; display: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;upload-form&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> resultImage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result-image&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> resultVideo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result-video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">        form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="title function_">async</span> (e) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!file) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;Please select a file.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/upload&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">body</span>: formData,</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (result.<span class="property">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(result.<span class="property">error</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 添加时间戳避免缓存问题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> resultPath = <span class="string">`<span class="subst">$&#123;result.result&#125;</span>?t=<span class="subst">$&#123;timestamp&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;image/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">src</span> = resultPath;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 清除视频源</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;video/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">src</span> = resultPath;</span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    resultImage.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 清除图片源</span></span></span><br><span class="line"><span class="language-javascript">                    resultVideo.<span class="title function_">load</span>(); <span class="comment">// 重新加载视频</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;Prediction failed: &#x27;</span> + error.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>yolov8n/app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_from_directory, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;static/uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>] = <span class="string">&#x27;static/results&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保文件夹存在</span></span><br><span class="line">os.makedirs(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>], exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict_yolov8</span>(<span class="params">input_path, file</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model = YOLO(<span class="string">r&#x27;D:\Program Files\road_snow\yolov8n\runs\detect\train310\weights\best.pt&#x27;</span>)</span><br><span class="line">        results = model.predict(</span><br><span class="line">            source=input_path,</span><br><span class="line">            project=app.config[<span class="string">&#x27;RESULTS_FOLDER&#x27;</span>],</span><br><span class="line">            name=os.path.splitext(file.filename)[<span class="number">0</span>],</span><br><span class="line">            save=<span class="literal">True</span>,</span><br><span class="line">            exist_ok=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        result_dir = <span class="built_in">str</span>(results[<span class="number">0</span>].save_dir)</span><br><span class="line">        result_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(result_dir) <span class="keyword">if</span> f.endswith((<span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result_files:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;No output file generated.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result_filename = result_files[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保 ffmpeg 在系统 PATH 中</span></span><br><span class="line">        <span class="keyword">if</span> result_filename.endswith(<span class="string">&#x27;.avi&#x27;</span>):</span><br><span class="line">            result_filename_mp4 = os.path.splitext(result_filename)[<span class="number">0</span>] + <span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line">            avi_path = os.path.join(result_dir, result_filename)</span><br><span class="line">            mp4_path = os.path.join(result_dir, result_filename_mp4)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用 ffmpeg 进行转换</span></span><br><span class="line">            subprocess.run([<span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, avi_path, <span class="string">&#x27;-vcodec&#x27;</span>, <span class="string">&#x27;libx264&#x27;</span>, <span class="string">&#x27;-crf&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;-preset&#x27;</span>, <span class="string">&#x27;fast&#x27;</span>, mp4_path], check=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            os.remove(avi_path)  <span class="comment"># 删除原 .avi 文件</span></span><br><span class="line">            result_filename = result_filename_mp4</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Result saved to: <span class="subst">&#123;result_dir&#125;</span>\\<span class="subst">&#123;result_filename&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;/static/results/<span class="subst">&#123;os.path.basename(result_dir)&#125;</span>/<span class="subst">&#123;result_filename&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error in predict_yolov8: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No file uploaded&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No selected file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安全处理文件名</span></span><br><span class="line">    filename = secure_filename(file.filename)</span><br><span class="line">    input_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file.save(input_path)</span><br><span class="line">        result_url = predict_yolov8(input_path, file)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result_url:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Prediction failed&#x27;</span>&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;result&#x27;</span>: result_url&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error in upload_file: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static/&lt;path:path&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serve_static</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">&#x27;static&#x27;</span>, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><p>即可在<code>http://127.0.0.1:5000/</code>与前端交互</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Yolo </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
